<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00206" kind="file" language="C++">
    <compoundname>valuewrapper.hh</compoundname>
    <includedby refid="a00308" local="no">_ikarus.cc</includedby>
    <includedby refid="a00200" local="no">registerferequirements.hh</includedby>
    <invincdepgraph>
      <node id="4">
        <label>fe.hh</label>
        <link refid="a00209"/>
      </node>
      <node id="3">
        <label>registerferequirements.hh</label>
        <link refid="a00200"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>valuewrapper.hh</label>
        <link refid="a00206"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>_ikarus.cc</label>
        <link refid="a00308"/>
      </node>
    </invincdepgraph>
    <innerclass refid="a01511" prot="public">ValueWrapper</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>since<sp/>python<sp/>does<sp/>not<sp/>support<sp/>passing<sp/>python<sp/>float<sp/>by<sp/>reference<sp/>to<sp/>a<sp/>double&amp;,<sp/>we<sp/>have<sp/>to<sp/>wrap<sp/>everything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>also<sp/>https://pybind11.readthedocs.io/en/stable/faq.html#limitations-involving-reference-arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="7" refid="a01511" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01511" kindref="compound">ValueWrapper</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9" refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="10" refid="a01511_1a840cbb7a2fa7a70861260c860b2c0f1c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref><sp/><ref refid="a01511_1a840cbb7a2fa7a70861260c860b2c0f1c" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>{<ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref><sp/>+<sp/>v.<ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>};<sp/>}</highlight></codeline>
<codeline lineno="11" refid="a01511_1a62fc0039be5a1f0ea0400b5304adbc5b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref><sp/><ref refid="a01511_1a62fc0039be5a1f0ea0400b5304adbc5b" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>{<ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref><sp/>-<sp/>v.<ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>};<sp/>}</highlight></codeline>
<codeline lineno="12" refid="a01511_1a629052781251a1175f8f4b1ed06450c7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref><sp/><ref refid="a01511_1a629052781251a1175f8f4b1ed06450c7" kindref="member">operator-</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>{-<ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>};<sp/>}</highlight></codeline>
<codeline lineno="13" refid="a01511_1a2037771be99237c1bd6e4f0a5a6f2bcd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref><sp/><ref refid="a01511_1a2037771be99237c1bd6e4f0a5a6f2bcd" kindref="member">operator*</ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>{<ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref><sp/>*<sp/>value};<sp/>}</highlight></codeline>
<codeline lineno="14" refid="a01511_1a05a02467be4d07a44de78537554ac857" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>&amp;<sp/><ref refid="a01511_1a05a02467be4d07a44de78537554ac857" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref><sp/>+=<sp/>v.<ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="18" refid="a01511_1a88e341a6b09b7e508b5c108c3f9bab73" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>&amp;<sp/><ref refid="a01511_1a88e341a6b09b7e508b5c108c3f9bab73" kindref="member">operator*=</ref>(T<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref><sp/>*=<sp/>v;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="a01511_1af5de129784d0aad83c2d7c1d0a6effaa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref><sp/><ref refid="a01511_1af5de129784d0aad83c2d7c1d0a6effaa" kindref="member">operator*</ref>(T<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>&amp;<sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01511" kindref="compound">ValueWrapper</ref>{f<sp/>*<sp/>v.<ref refid="a01511_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>};<sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/valuewrapper.hh"/>
  </compounddef>
</doxygen>
