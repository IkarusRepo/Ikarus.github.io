<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00329" kind="group">
    <compoundname>pythonbindings</compoundname>
    <title>Python bindings</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00329_1gaeab1c5f959a22f95b40b0a7576f9c896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Assembler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerSparseFlatAssembler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Assembler, options... &gt; cls)</argsstring>
        <name>registerSparseFlatAssembler</name>
        <qualifiedname>Ikarus::Python::registerSparseFlatAssembler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Assembler, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00349" kindref="compound">Python</ref> bindings for a <ref refid="a01193" kindref="compound">SparseFlatAssembler</ref> class. <linebreak/>
. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00349" kindref="compound">Python</ref> bindings for a <ref refid="a01193" kindref="compound">SparseFlatAssembler</ref> class, allowing it to be used in <ref refid="a00349" kindref="compound">Python</ref> scripts. <linebreak/>
 This function is a result of the macro <computeroutput><ref refid="a00143_1adda74d8564a01c0a9851a4379308a8b2" kindref="member">MAKE_ASSEMBLER_REGISTERY_FUNCTION( SparseFlatAssembler )</ref></computeroutput>. <linebreak/>
 <linebreak/>
 The registered class will have an initializer that takes a list of finite elements (<computeroutput>fes</computeroutput>) and a <computeroutput>DirichletValuesType</computeroutput> object. <linebreak/>
 It exposes several member functions to <ref refid="a00349" kindref="compound">Python</ref>: <linebreak/>
 <itemizedlist>
<listitem>
<para><computeroutput>getMatrix(req)</computeroutput>: Returns a dense matrix based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getReducedMatrix(req)</computeroutput>: Returns a reduced dense matrix based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getVector(req)</computeroutput>: Returns a vector based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getScalar(req)</computeroutput>: Returns a scalar based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getReducedVector(req)</computeroutput>: Returns a reduced vector based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>createFullVector(redVec)</computeroutput>: Creates a full vector from a reduced vector. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>reducedSize()</computeroutput>: Returns the size of the reduced space. <linebreak/>
 </para>
</listitem>
</itemizedlist>
<linebreak/>
 <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Assembler</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01193" kindref="compound">SparseFlatAssembler</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00349" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00349" kindref="compound">Python</ref> scope where the class should be registered.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01193" kindref="compound">SparseFlatAssembler</ref> class. &lt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" line="68" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="a00329_1ga2b0faffde20690631657489c79ec809b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Assembler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerDenseFlatAssembler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Assembler, options... &gt; cls)</argsstring>
        <name>registerDenseFlatAssembler</name>
        <qualifiedname>Ikarus::Python::registerDenseFlatAssembler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Assembler, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00349" kindref="compound">Python</ref> bindings for a <ref refid="a01197" kindref="compound">DenseFlatAssembler</ref> class. <linebreak/>
. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00349" kindref="compound">Python</ref> bindings for a <ref refid="a01197" kindref="compound">DenseFlatAssembler</ref> class, allowing it to be used in <ref refid="a00349" kindref="compound">Python</ref> scripts. <linebreak/>
 This function is a result of the macro <computeroutput><ref refid="a00143_1adda74d8564a01c0a9851a4379308a8b2" kindref="member">MAKE_ASSEMBLER_REGISTERY_FUNCTION( DenseFlatAssembler )</ref></computeroutput>. <linebreak/>
 <linebreak/>
 The registered class will have an initializer that takes a list of finite elements (<computeroutput>fes</computeroutput>) and a <computeroutput>DirichletValuesType</computeroutput> object. <linebreak/>
 It exposes several member functions to <ref refid="a00349" kindref="compound">Python</ref>: <linebreak/>
 <itemizedlist>
<listitem>
<para><computeroutput>getMatrix(req)</computeroutput>: Returns a dense matrix based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getReducedMatrix(req)</computeroutput>: Returns a reduced dense matrix based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getVector(req)</computeroutput>: Returns a vector based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getScalar(req)</computeroutput>: Returns a scalar based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getReducedVector(req)</computeroutput>: Returns a reduced vector based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>createFullVector(redVec)</computeroutput>: Creates a full vector from a reduced vector. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>reducedSize()</computeroutput>: Returns the size of the reduced space. <linebreak/>
 </para>
</listitem>
</itemizedlist>
<linebreak/>
 <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Assembler</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01197" kindref="compound">DenseFlatAssembler</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00349" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00349" kindref="compound">Python</ref> scope where the class should be registered.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01197" kindref="compound">DenseFlatAssembler</ref> class. &lt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" line="69" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="a00329_1ga2f6146bb687ad25cfb413fbcfd470788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BasisHandler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerBasisHandler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; BasisHandler, options... &gt; cls)</argsstring>
        <name>registerBasisHandler</name>
        <qualifiedname>Ikarus::Python::registerBasisHandler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; BasisHandler, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register a <ref refid="a00349" kindref="compound">Python</ref> wrapper for an <ref refid="a00337" kindref="compound">Ikarus</ref> basis class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01541" kindref="compound">BasisHandler</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a00337" kindref="compound">Ikarus</ref> handler basis class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00349" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00349" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a00337" kindref="compound">Ikarus</ref> basis handler class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/basis/basis.hh" line="37" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/basis/basis.hh" bodystart="37" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="a00329_1ga39b6df6adfe4858b13ac71f5830f29f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DirichletValues</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerDirichletValues</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; DirichletValues, options... &gt; cls)</argsstring>
        <name>registerDirichletValues</name>
        <qualifiedname>Ikarus::Python::registerDirichletValues</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; DirichletValues, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00349" kindref="compound">Python</ref> bindings for a <ref refid="a01577" kindref="compound">DirichletValues</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00349" kindref="compound">Python</ref> bindings for a <ref refid="a01577" kindref="compound">DirichletValues</ref> class, allowing it to be used in <ref refid="a00349" kindref="compound">Python</ref> scripts. The registered class will have an initializer that takes a <computeroutput>Basis</computeroutput> object. It exposes several member functions to <ref refid="a00349" kindref="compound">Python</ref>:<itemizedlist>
<listitem><para><computeroutput>fixBoundaryDOFs(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput>.</para>
</listitem><listitem><para><computeroutput>fixBoundaryDOFsUsingLocalView(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput> with a <computeroutput>LocalView</computeroutput> argument.</para>
</listitem><listitem><para><computeroutput>fixBoundaryDOFsUsingLocalViewAndIntersection(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput> with <computeroutput>LocalView</computeroutput> and <computeroutput>Intersection</computeroutput> arguments.</para>
</listitem><listitem><para><computeroutput>fixDOFs(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput> with the boolean vector and the basis as arguments.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01577" kindref="compound">DirichletValues</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01577" kindref="compound">DirichletValues</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00349" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00349" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01577" kindref="compound">DirichletValues</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh" line="49" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh" bodystart="49" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="a00329_1gac8bb4a818dee7342efbc5e174e35b840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FE</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerFE</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; FE, options... &gt; cls)</argsstring>
        <name>registerFE</name>
        <qualifiedname>Ikarus::Python::registerFE</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; FE, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00349" kindref="compound">Python</ref> bindings for the <ref refid="a01241" kindref="compound">FE</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00349" kindref="compound">Python</ref> bindings for a <ref refid="a01241" kindref="compound">FE</ref> class, allowing it to be used in <ref refid="a00349" kindref="compound">Python</ref> scripts.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01241" kindref="compound">FE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01241" kindref="compound">FE</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00349" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00349" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01345" kindref="compound">KirchhoffLoveShell</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/fe.hh" line="86" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/fe.hh" bodystart="86" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Header for <ref refid="a00356" kindref="compound">Python</ref> Bindings. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
