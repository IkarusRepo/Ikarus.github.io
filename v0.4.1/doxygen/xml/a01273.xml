<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01273" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::FERequirements</compoundname>
    <includes refid="a00218" local="no">ikarus/finiteelements/ferequirements.hh</includes>
    <templateparamlist>
      <param>
        <type>typename SV</type>
        <defval>std::reference_wrapper&lt;Eigen::VectorXd&gt;</defval>
      </param>
      <param>
        <type>typename PM</type>
        <defval>std::reference_wrapper&lt;double&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a01273_1abe68bcd08ef5188a7afb3da261843230" prot="public" static="no">
        <type>SV</type>
        <definition>using Ikarus::FERequirements&lt; SV, PM &gt;::SolutionVectorType =  SV</definition>
        <argsstring></argsstring>
        <name>SolutionVectorType</name>
        <qualifiedname>Ikarus::FERequirements::SolutionVectorType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="159" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01273_1adc4ad440a8d045f2d048d20130cf323e" prot="public" static="no">
        <type>typename Impl::DeduceRawVectorType&lt; std::remove_cvref_t&lt; SV &gt; &gt;::Type</type>
        <definition>using Ikarus::FERequirements&lt; SV, PM &gt;::SolutionVectorTypeRaw =  typename Impl::DeduceRawVectorType&lt;std::remove_cvref_t&lt;SV&gt; &gt;::Type</definition>
        <argsstring></argsstring>
        <name>SolutionVectorTypeRaw</name>
        <qualifiedname>Ikarus::FERequirements::SolutionVectorTypeRaw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="160" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01273_1ab71870a060195b870bf050577e1493a0" prot="public" static="no">
        <type>PM</type>
        <definition>using Ikarus::FERequirements&lt; SV, PM &gt;::ParameterType =  PM</definition>
        <argsstring></argsstring>
        <name>ParameterType</name>
        <qualifiedname>Ikarus::FERequirements::ParameterType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="161" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01273_1af80d75a0b1418035a1b5e9658a3a56d9" prot="public" static="no">
        <type>typename PM::type</type>
        <definition>using Ikarus::FERequirements&lt; SV, PM &gt;::ParameterTypeRaw =  typename PM::type</definition>
        <argsstring></argsstring>
        <name>ParameterTypeRaw</name>
        <qualifiedname>Ikarus::FERequirements::ParameterTypeRaw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="162" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01273_1aa255ef41882e4611f11c220aaf8da094" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="a00324_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref>, <ref refid="a01273_1abe68bcd08ef5188a7afb3da261843230" kindref="member">SolutionVectorType</ref> &gt;</type>
        <definition>std::map&lt;FESolutions, SolutionVectorType&gt; Ikarus::FERequirements&lt; SV, PM &gt;::sols_</definition>
        <argsstring></argsstring>
        <name>sols_</name>
        <qualifiedname>Ikarus::FERequirements::sols_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="279" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01273_1acb8634020dbc9f07b077c99df380a3f2" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="a00324_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref>, <ref refid="a01273_1ab71870a060195b870bf050577e1493a0" kindref="member">ParameterType</ref> &gt;</type>
        <definition>std::map&lt;FEParameter, ParameterType&gt; Ikarus::FERequirements&lt; SV, PM &gt;::parameter_</definition>
        <argsstring></argsstring>
        <name>parameter_</name>
        <qualifiedname>Ikarus::FERequirements::parameter_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="280" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01273_1a408dacfda36aa22b04fb1be568995dc3" prot="private" static="no" mutable="no">
        <type><ref refid="a01257" kindref="compound">AffordanceCollectionImpl</ref></type>
        <definition>AffordanceCollectionImpl Ikarus::FERequirements&lt; SV, PM &gt;::affordances_</definition>
        <argsstring></argsstring>
        <name>affordances_</name>
        <qualifiedname>Ikarus::FERequirements::affordances_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="281" column="28" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="281" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01273_1ac691d2377e4df99285b4e2cea067b062" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>FEAffordance</type>
            <declname>Affordance</declname>
            <defname>Affordance</defname>
          </param>
        </templateparamlist>
        <type><ref refid="a01273" kindref="compound">FERequirements</ref> &amp;</type>
        <definition>FERequirements &amp; Ikarus::FERequirements&lt; SV, PM &gt;::addAffordance</definition>
        <argsstring>(Affordance &amp;&amp;affordance)</argsstring>
        <name>addAffordance</name>
        <qualifiedname>Ikarus::FERequirements::addAffordance</qualifiedname>
        <param>
          <type>Affordance &amp;&amp;</type>
          <declname>affordance</declname>
        </param>
        <briefdescription>
<para>Add an affordance to the requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adds the specified affordance to the requirements.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Affordance</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of affordance to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>affordance</parametername>
</parameternamelist>
<parameterdescription>
<para>The affordance to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the updated <ref refid="a01273" kindref="compound">FERequirements</ref> instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="174" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="174" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="a01273_1adc86ba90fa2e45c688cf03020f487271" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01273" kindref="compound">FERequirements</ref> &amp;</type>
        <definition>FERequirements &amp; Ikarus::FERequirements&lt; SV, PM &gt;::insertParameter</definition>
        <argsstring>(const FEParameter &amp;key, ParameterTypeRaw &amp;val)</argsstring>
        <name>insertParameter</name>
        <qualifiedname>Ikarus::FERequirements::insertParameter</qualifiedname>
        <param>
          <type>const <ref refid="a00324_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="a01273_1af80d75a0b1418035a1b5e9658a3a56d9" kindref="member">ParameterTypeRaw</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Insert a parameter into the requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>This function inserts the specified parameter into the requirements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key representing the parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the raw parameter value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the updated <ref refid="a01273" kindref="compound">FERequirements</ref> instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="195" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="a01273_1a4fafac757343aa4709c1c986290e3e18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01273" kindref="compound">FERequirements</ref> &amp;</type>
        <definition>FERequirements &amp; Ikarus::FERequirements&lt; SV, PM &gt;::insertGlobalSolution</definition>
        <argsstring>(const FESolutions &amp;key, SolutionVectorTypeRaw &amp;sol)</argsstring>
        <name>insertGlobalSolution</name>
        <qualifiedname>Ikarus::FERequirements::insertGlobalSolution</qualifiedname>
        <param>
          <type>const <ref refid="a00324_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="a01273_1adc4ad440a8d045f2d048d20130cf323e" kindref="member">SolutionVectorTypeRaw</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
<para>Insert a global solution vector into the requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>This function inserts the specified global solution vector into the requirements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key representing the type of the solution vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the raw global solution vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the updated <ref refid="a01273" kindref="compound">FERequirements</ref> instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="209" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="a01273_1a6a1c765d729145258fab79b29f20450c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01273_1adc4ad440a8d045f2d048d20130cf323e" kindref="member">SolutionVectorTypeRaw</ref> &amp;</type>
        <definition>const SolutionVectorTypeRaw &amp; Ikarus::FERequirements&lt; SV, PM &gt;::getGlobalSolution</definition>
        <argsstring>(const FESolutions &amp;key) const</argsstring>
        <name>getGlobalSolution</name>
        <qualifiedname>Ikarus::FERequirements::getGlobalSolution</qualifiedname>
        <param>
          <type>const <ref refid="a00324_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get the raw global solution vector for a specific type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the raw global solution vector for the specified type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key representing the type of the solution vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Const reference to the raw global solution vector.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Dune::RangeError</parametername>
</parameternamelist>
<parameterdescription>
<para>if the specified type is not found in the requirements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="224" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="224" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="a01273_1a451f4d103d32aa85b43b059642832cb2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01273_1af80d75a0b1418035a1b5e9658a3a56d9" kindref="member">ParameterTypeRaw</ref> &amp;</type>
        <definition>const ParameterTypeRaw &amp; Ikarus::FERequirements&lt; SV, PM &gt;::getParameter</definition>
        <argsstring>(FEParameter &amp;&amp;key) const</argsstring>
        <name>getParameter</name>
        <qualifiedname>Ikarus::FERequirements::getParameter</qualifiedname>
        <param>
          <type><ref refid="a00324_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get the raw parameter value for a specific key. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the raw parameter value for the specified key.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key representing the parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Const reference to the raw parameter value.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Dune::RangeError</parametername>
</parameternamelist>
<parameterdescription>
<para>if the specified key is not found in the requirements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="247" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="247" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="a01273_1a01df6acb6d68e28f974dbda21c544cfa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>FEAffordance</type>
            <declname>Affordance</declname>
            <defname>Affordance</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Ikarus::FERequirements&lt; SV, PM &gt;::hasAffordance</definition>
        <argsstring>(Affordance &amp;&amp;affordance) const</argsstring>
        <name>hasAffordance</name>
        <qualifiedname>Ikarus::FERequirements::hasAffordance</qualifiedname>
        <param>
          <type>Affordance &amp;&amp;</type>
          <declname>affordance</declname>
        </param>
        <briefdescription>
<para>Check if a specific affordance is present in the requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the specified affordance is present in the requirements.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Affordance</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of affordance to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>affordance</parametername>
</parameternamelist>
<parameterdescription>
<para>The affordance to be checked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the affordance is present, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="267" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="267" bodyend="276"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class representing the requirements for finite element calculations. </para>
    </briefdescription>
    <detaileddescription>
<para>This class defines the requirements for finite element calculations, including the types of solution vectors and parameters needed. It provides methods to add affordances, insert parameters, and manage global solution vectors.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SV</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the solution vector, defaulting to std::reference_wrapper&lt;Eigen::VectorXd&gt;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PM</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the parameter, defaulting to std::reference_wrapper&lt;double&gt;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::FERequirements&lt; std::reference_wrapper&lt; Eigen::VectorXd &gt;, std::reference_wrapper&lt; double &gt; &gt;</label>
        <link refid="a01273"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::reference_wrapper&lt; Eigen::VectorXd &gt;, std::reference_wrapper&lt; double &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Ikarus::FERequirements&lt; SV, PM &gt;</label>
        <link refid="a01273"/>
      </node>
      <node id="3">
        <label>Ikarus::FErequirements&lt; SV, PM &gt;</label>
        <link refid="a01277"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="156" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="157" bodyend="282"/>
    <listofallmembers>
      <member refid="a01273_1ac691d2377e4df99285b4e2cea067b062" prot="public" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>addAffordance</name></member>
      <member refid="a01273_1a408dacfda36aa22b04fb1be568995dc3" prot="private" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>affordances_</name></member>
      <member refid="a01273_1a6a1c765d729145258fab79b29f20450c" prot="public" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>getGlobalSolution</name></member>
      <member refid="a01273_1a451f4d103d32aa85b43b059642832cb2" prot="public" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>getParameter</name></member>
      <member refid="a01273_1a01df6acb6d68e28f974dbda21c544cfa" prot="public" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>hasAffordance</name></member>
      <member refid="a01273_1a4fafac757343aa4709c1c986290e3e18" prot="public" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>insertGlobalSolution</name></member>
      <member refid="a01273_1adc86ba90fa2e45c688cf03020f487271" prot="public" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>insertParameter</name></member>
      <member refid="a01273_1acb8634020dbc9f07b077c99df380a3f2" prot="private" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>parameter_</name></member>
      <member refid="a01273_1ab71870a060195b870bf050577e1493a0" prot="public" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>ParameterType</name></member>
      <member refid="a01273_1af80d75a0b1418035a1b5e9658a3a56d9" prot="public" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>ParameterTypeRaw</name></member>
      <member refid="a01273_1aa255ef41882e4611f11c220aaf8da094" prot="private" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>sols_</name></member>
      <member refid="a01273_1abe68bcd08ef5188a7afb3da261843230" prot="public" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>SolutionVectorType</name></member>
      <member refid="a01273_1adc4ad440a8d045f2d048d20130cf323e" prot="public" virt="non-virtual"><scope>Ikarus::FERequirements</scope><name>SolutionVectorTypeRaw</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
