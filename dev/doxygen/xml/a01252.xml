<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01252" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::ResultRequirements</compoundname>
    <includes refid="a00227" local="no">ikarus/finiteelements/ferequirements.hh</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="a01240" kindref="compound">FERequirements</ref></type>
        <defval><ref refid="a01240" kindref="compound">FERequirements</ref>&lt;&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a01252_1acf475b20f169aa0c5d35067cac32f0c2" prot="public" static="no">
        <type>typename <ref refid="a01240_1ad5d5b9eab0760b9d8be25e6ee75200f8" kindref="member">FERequirements::ParameterTypeRaw</ref></type>
        <definition>using Ikarus::ResultRequirements&lt; FERequirements &gt;::ParameterTypeRaw =  typename FERequirements::ParameterTypeRaw</definition>
        <argsstring></argsstring>
        <name>ParameterTypeRaw</name>
        <qualifiedname>Ikarus::ResultRequirements::ParameterTypeRaw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="416" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01252_1a6572e4b55efcac594536459775487a28" prot="public" static="no">
        <type>typename <ref refid="a01240_1af1af058f84d982946aa834c9dd29f504" kindref="member">FERequirements::SolutionVectorType</ref></type>
        <definition>using Ikarus::ResultRequirements&lt; FERequirements &gt;::SolutionVectorType =  typename FERequirements::SolutionVectorType</definition>
        <argsstring></argsstring>
        <name>SolutionVectorType</name>
        <qualifiedname>Ikarus::ResultRequirements::SolutionVectorType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="417" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01252_1a9c76a8f7f9a65f0663ea09d444e4843b" prot="public" static="no">
        <type>typename <ref refid="a01240_1a0911acef8d62b37965de7a0ead42c85b" kindref="member">FERequirements::SolutionVectorTypeRaw</ref></type>
        <definition>using Ikarus::ResultRequirements&lt; FERequirements &gt;::SolutionVectorTypeRaw =  typename FERequirements::SolutionVectorTypeRaw</definition>
        <argsstring></argsstring>
        <name>SolutionVectorTypeRaw</name>
        <qualifiedname>Ikarus::ResultRequirements::SolutionVectorTypeRaw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="418" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="418" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01252_1a3f51bfaf0320ecce12aa2842a19d886e" prot="private" static="no" mutable="no">
        <type>std::set&lt; <ref refid="a00303_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref> &gt;</type>
        <definition>std::set&lt;ResultType&gt; Ikarus::ResultRequirements&lt; FERequirements &gt;::resType</definition>
        <argsstring></argsstring>
        <name>resType</name>
        <qualifiedname>Ikarus::ResultRequirements::resType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="566" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01252_1a24f2939426fee5cc6e02d46eaadf9148" prot="private" static="no" mutable="no">
        <type><ref refid="a01240" kindref="compound">FERequirements</ref></type>
        <definition>FERequirements Ikarus::ResultRequirements&lt; FERequirements &gt;::reqB</definition>
        <argsstring></argsstring>
        <name>reqB</name>
        <qualifiedname>Ikarus::ResultRequirements::reqB</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="567" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="567" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01252_1ae9f5aa3ebb36cf7bb2d647d984354075" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::ResultRequirements&lt; FERequirements &gt;::ResultRequirements</definition>
        <argsstring>(FERequirements &amp;&amp;req, std::set&lt; ResultType &gt; &amp;&amp;p_resType)</argsstring>
        <name>ResultRequirements</name>
        <qualifiedname>Ikarus::ResultRequirements::ResultRequirements</qualifiedname>
        <param>
          <type><ref refid="a01240" kindref="compound">FERequirements</ref> &amp;&amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>std::set&lt; <ref refid="a00303_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref> &gt; &amp;&amp;</type>
          <declname>p_resType</declname>
        </param>
        <briefdescription>
<para>Constructor with <ref refid="a01240" kindref="compound">FERequirements</ref> and result types. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs a <ref refid="a01252" kindref="compound">ResultRequirements</ref> object with the given <ref refid="a01244" kindref="compound">FErequirements</ref> and set of result types.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Finite element requirements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_resType</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of result types. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="428" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="428" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1acc8b5392590e2ea3ebd73f3cb920f2cd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::ResultRequirements&lt; FERequirements &gt;::ResultRequirements</definition>
        <argsstring>(const FERequirements &amp;req)</argsstring>
        <name>ResultRequirements</name>
        <qualifiedname>Ikarus::ResultRequirements::ResultRequirements</qualifiedname>
        <param>
          <type>const <ref refid="a01240" kindref="compound">FERequirements</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Constructor with only <ref refid="a01240" kindref="compound">FERequirements</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs a <ref refid="a01252" kindref="compound">ResultRequirements</ref> object with the given <ref refid="a01240" kindref="compound">FERequirements</ref> and an empty set of result types.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Finite element requirements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="439" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="439" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1a7209c38b9e0f6f251a00b582859d852b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::ResultRequirements&lt; FERequirements &gt;::ResultRequirements</definition>
        <argsstring>()=default</argsstring>
        <name>ResultRequirements</name>
        <qualifiedname>Ikarus::ResultRequirements::ResultRequirements</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs an empty <ref refid="a01252" kindref="compound">ResultRequirements</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="447" column="3"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1aa75a1bfbcca39d7c30d1b1141eae4795" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ikarus::ResultRequirements&lt; FERequirements &gt;::isResultRequested</definition>
        <argsstring>(ResultType &amp;&amp;key) const</argsstring>
        <name>isResultRequested</name>
        <qualifiedname>Ikarus::ResultRequirements::isResultRequested</qualifiedname>
        <param>
          <type><ref refid="a00303_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Check if a specific result type is requested. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if the specified result type is requested.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The result type to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the result type is requested, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="457" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="457" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1a0900b42cbc6485aad82c55179234b087" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>FEAffordance</type>
            <declname>Affordance</declname>
            <defname>Affordance</defname>
          </param>
        </templateparamlist>
        <type><ref refid="a01252" kindref="compound">ResultRequirements</ref> &amp;</type>
        <definition>ResultRequirements &amp; Ikarus::ResultRequirements&lt; FERequirements &gt;::addAffordance</definition>
        <argsstring>(Affordance &amp;&amp;affordance)</argsstring>
        <name>addAffordance</name>
        <qualifiedname>Ikarus::ResultRequirements::addAffordance</qualifiedname>
        <param>
          <type>Affordance &amp;&amp;</type>
          <declname>affordance</declname>
        </param>
        <briefdescription>
<para>Add an affordance to the finite element requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds the specified affordance to the finite element requirements.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Affordance</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of affordance to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>affordance</parametername>
</parameternamelist>
<parameterdescription>
<para>The affordance to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the <ref refid="a01252" kindref="compound">ResultRequirements</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="469" column="22" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="469" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1a3ee8e39fcf1acce22dc1b5c36c70a1fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01252" kindref="compound">ResultRequirements</ref> &amp;</type>
        <definition>ResultRequirements &amp; Ikarus::ResultRequirements&lt; FERequirements &gt;::insertParameter</definition>
        <argsstring>(FEParameter &amp;&amp;key, ParameterTypeRaw &amp;val)</argsstring>
        <name>insertParameter</name>
        <qualifiedname>Ikarus::ResultRequirements::insertParameter</qualifiedname>
        <param>
          <type><ref refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="a01252_1acf475b20f169aa0c5d35067cac32f0c2" kindref="member">ParameterTypeRaw</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Insert a parameter into the finite element requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>Inserts the specified parameter into the finite element requirements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the <ref refid="a01252" kindref="compound">ResultRequirements</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="483" column="22" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1a98129560488126934c2937dc3954a74d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01252" kindref="compound">ResultRequirements</ref> &amp;</type>
        <definition>ResultRequirements &amp; Ikarus::ResultRequirements&lt; FERequirements &gt;::insertGlobalSolution</definition>
        <argsstring>(FESolutions &amp;&amp;key, SolutionVectorTypeRaw &amp;sol)</argsstring>
        <name>insertGlobalSolution</name>
        <qualifiedname>Ikarus::ResultRequirements::insertGlobalSolution</qualifiedname>
        <param>
          <type><ref refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="a01252_1a9c76a8f7f9a65f0663ea09d444e4843b" kindref="member">SolutionVectorTypeRaw</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
<para>Insert a global solution into the finite element requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>Inserts the specified global solution into the finite element requirements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The global solution key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>The global solution value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the <ref refid="a01252" kindref="compound">ResultRequirements</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="497" column="22" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1a18e3aaa93d9106e11d846c7378f1e849" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ResultTypeConcept...</type>
            <declname>ResultTypes</declname>
            <defname>ResultTypes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="a01252" kindref="compound">ResultRequirements</ref> &amp;</type>
        <definition>ResultRequirements &amp; Ikarus::ResultRequirements&lt; FERequirements &gt;::addResultRequest</definition>
        <argsstring>(ResultTypes &amp;&amp;... keys)</argsstring>
        <name>addResultRequest</name>
        <qualifiedname>Ikarus::ResultRequirements::addResultRequest</qualifiedname>
        <param>
          <type>ResultTypes &amp;&amp;...</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
<para>Add one or more result types to the set of requested results. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds the specified result types to the set of requested results.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ResultTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of results to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>The result types to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the <ref refid="a01252" kindref="compound">ResultRequirements</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="512" column="22" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="512" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1a15c5fab8c1190b52ff013c244fdfa486" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01252_1a9c76a8f7f9a65f0663ea09d444e4843b" kindref="member">SolutionVectorTypeRaw</ref> &amp;</type>
        <definition>const SolutionVectorTypeRaw &amp; Ikarus::ResultRequirements&lt; FERequirements &gt;::getGlobalSolution</definition>
        <argsstring>(FESolutions &amp;&amp;key) const</argsstring>
        <name>getGlobalSolution</name>
        <qualifiedname>Ikarus::ResultRequirements::getGlobalSolution</qualifiedname>
        <param>
          <type><ref refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get the global solution for a specific global solution type. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the global solution for the specified global solution type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The global solution type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the global solution value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="525" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="525" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1aa548e0d7e6823134a51d91d5ec47c37f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01252_1acf475b20f169aa0c5d35067cac32f0c2" kindref="member">ParameterTypeRaw</ref> &amp;</type>
        <definition>const ParameterTypeRaw &amp; Ikarus::ResultRequirements&lt; FERequirements &gt;::getParameter</definition>
        <argsstring>(FEParameter &amp;&amp;key) const</argsstring>
        <name>getParameter</name>
        <qualifiedname>Ikarus::ResultRequirements::getParameter</qualifiedname>
        <param>
          <type><ref refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get the value of a specific parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the value of the specified parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter key. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the parameter value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="537" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="537" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1a55da3509459a63cd2ffcb20df9039d0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01240" kindref="compound">FERequirements</ref> &amp;</type>
        <definition>const FERequirements &amp; Ikarus::ResultRequirements&lt; FERequirements &gt;::getFERequirements</definition>
        <argsstring>() const</argsstring>
        <name>getFERequirements</name>
        <qualifiedname>Ikarus::ResultRequirements::getFERequirements</qualifiedname>
        <briefdescription>
<para>Get the associated finite element requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the associated finite element requirements.</para>
<para><simplesect kind="return"><para>Reference to the finite element requirements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="546" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="546" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="a01252_1a244a5a171cdb08dbed0797d5c0669b85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::ResultRequirements&lt; FERequirements &gt;::getRequestedResult</definition>
        <argsstring>() const</argsstring>
        <name>getRequestedResult</name>
        <qualifiedname>Ikarus::ResultRequirements::getRequestedResult</qualifiedname>
        <briefdescription>
<para>Get the requested result type. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the requested result type when only a single result type is present in the set of requested results.</para>
<para><simplesect kind="return"><para>Reference to the requested result type.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Dune::InvalidStateException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the set of requested results does not contain a single result type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="557" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="557" bodyend="563"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class representing the requirements for obtaining specific results. </para>
    </briefdescription>
    <detaileddescription>
<para>This class encapsulates the requirements for obtaining results, including the desired result types, associated affordances, and input parameters. It is templated on the type of <ref refid="a01240" kindref="compound">FERequirements</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01240" kindref="compound">FERequirements</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type representing the finite element requirements. Default is FERequirements&lt;&gt;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="413" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="414" bodyend="568"/>
    <listofallmembers>
      <member refid="a01252_1a0900b42cbc6485aad82c55179234b087" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>addAffordance</name></member>
      <member refid="a01252_1a18e3aaa93d9106e11d846c7378f1e849" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>addResultRequest</name></member>
      <member refid="a01252_1a55da3509459a63cd2ffcb20df9039d0d" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>getFERequirements</name></member>
      <member refid="a01252_1a15c5fab8c1190b52ff013c244fdfa486" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>getGlobalSolution</name></member>
      <member refid="a01252_1aa548e0d7e6823134a51d91d5ec47c37f" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>getParameter</name></member>
      <member refid="a01252_1a244a5a171cdb08dbed0797d5c0669b85" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>getRequestedResult</name></member>
      <member refid="a01252_1a98129560488126934c2937dc3954a74d" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>insertGlobalSolution</name></member>
      <member refid="a01252_1a3ee8e39fcf1acce22dc1b5c36c70a1fd" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>insertParameter</name></member>
      <member refid="a01252_1aa75a1bfbcca39d7c30d1b1141eae4795" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>isResultRequested</name></member>
      <member refid="a01252_1acf475b20f169aa0c5d35067cac32f0c2" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>ParameterTypeRaw</name></member>
      <member refid="a01252_1a24f2939426fee5cc6e02d46eaadf9148" prot="private" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>reqB</name></member>
      <member refid="a01252_1a3f51bfaf0320ecce12aa2842a19d886e" prot="private" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>resType</name></member>
      <member refid="a01252_1ae9f5aa3ebb36cf7bb2d647d984354075" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>ResultRequirements</name></member>
      <member refid="a01252_1acc8b5392590e2ea3ebd73f3cb920f2cd" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>ResultRequirements</name></member>
      <member refid="a01252_1a7209c38b9e0f6f251a00b582859d852b" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>ResultRequirements</name></member>
      <member refid="a01252_1a6572e4b55efcac594536459775487a28" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>SolutionVectorType</name></member>
      <member refid="a01252_1a9c76a8f7f9a65f0663ea09d444e4843b" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>SolutionVectorTypeRaw</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
