<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="d5/d6f/a01281" kind="struct" language="C++" prot="private">
    <compoundname>Ikarus::LinearSolverTemplate::SolverImpl</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename Solver</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d5/d6f/a01281_1a2596dddb7edaec11649070994c06f2ba" prot="public" static="no" mutable="no">
        <type>Solver</type>
        <definition>Solver Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;::solver</definition>
        <argsstring></argsstring>
        <name>solver</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::solver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="121" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/d6f/a01281_1a8a8467a666128ed79bd4ae3c17abbd3f" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;::analyzePattern</definition>
        <argsstring>(const SparseMatrixType &amp;A) final</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::analyzePattern</qualifiedname>
        <param>
          <type>const <ref refid="de/d85/a01273_1a374226b59baa30615d574bdd7ec230c8" kindref="member">SparseMatrixType</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="77" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="d5/d6f/a01281_1a6984656295bbe2caa09b7b385a8db786" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;::factorize</definition>
        <argsstring>(const SparseMatrixType &amp;A) final</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::factorize</qualifiedname>
        <param>
          <type>const <ref refid="de/d85/a01273_1a374226b59baa30615d574bdd7ec230c8" kindref="member">SparseMatrixType</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="81" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="d5/d6f/a01281_1ab455a8f474185082704ffa61c4de9b6e" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;::factorize</definition>
        <argsstring>(const DenseMatrixType &amp;A) final</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::factorize</qualifiedname>
        <param>
          <type>const <ref refid="de/d85/a01273_1a878cccde0e595d7b0f7d6a2188aeeb31" kindref="member">DenseMatrixType</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="87" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="d5/d6f/a01281_1a7852deb4c524b91d985ed2811696a758" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;::compute</definition>
        <argsstring>(const SparseMatrixType &amp;A) final</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::compute</qualifiedname>
        <param>
          <type>const <ref refid="de/d85/a01273_1a374226b59baa30615d574bdd7ec230c8" kindref="member">SparseMatrixType</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="91" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="91" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="d5/d6f/a01281_1a4187de28616a526b40b76c5f1c3bdbb1" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;::compute</definition>
        <argsstring>(const DenseMatrixType &amp;A) final</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::compute</qualifiedname>
        <param>
          <type>const <ref refid="de/d85/a01273_1a878cccde0e595d7b0f7d6a2188aeeb31" kindref="member">DenseMatrixType</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="98" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="98" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="d5/d6f/a01281_1a360b244f1e41cc0e5b55b0143735d1c9" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;::solve</definition>
        <argsstring>(Eigen::VectorX&lt; ScalarType &gt; &amp;x, const Eigen::VectorX&lt; ScalarType &gt; &amp;b) const final</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::solve</qualifiedname>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorX&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="105" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="d5/d6f/a01281_1a3d848e3089ac265f4b21f4776143da24" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX2&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX2&lt; ScalarType &gt; &amp;b) const final</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX2&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX2&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="109" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="d5/d6f/a01281_1aa663d65659a9309fae2122d673447915" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX3&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX3&lt; ScalarType &gt; &amp;b) const final</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX3&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX3&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="113" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="d5/d6f/a01281_1a4566541af4af4bec8673a1222d846821" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX&lt; ScalarType &gt; &amp;b) const final</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverImpl::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="117" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1d/a01277_1ab7fda7f9bc34c5c928e998ff09449ac2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::analyzePattern</definition>
        <argsstring>(const DenseMatrixType &amp;) const</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::analyzePattern</qualifiedname>
        <param>
          <type>const <ref refid="de/d85/a01273_1a878cccde0e595d7b0f7d6a2188aeeb31" kindref="member">DenseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="61" column="20" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="61" bodyend="61"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase</label>
      </node>
      <node id="1">
        <label>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase</label>
      </node>
      <node id="1">
        <label>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverImpl&lt; Solver &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="74" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="74" bodyend="122"/>
    <listofallmembers>
      <member refid="d5/d6f/a01281_1a8a8467a666128ed79bd4ae3c17abbd3f" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>analyzePattern</name></member>
      <member refid="d2/d1d/a01277_1ab7fda7f9bc34c5c928e998ff09449ac2" prot="public" virt="virtual" ambiguityscope="Ikarus::LinearSolverTemplate::SolverBase::"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>analyzePattern</name></member>
      <member refid="d5/d6f/a01281_1a7852deb4c524b91d985ed2811696a758" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>compute</name></member>
      <member refid="d5/d6f/a01281_1a4187de28616a526b40b76c5f1c3bdbb1" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>compute</name></member>
      <member refid="d5/d6f/a01281_1a6984656295bbe2caa09b7b385a8db786" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>factorize</name></member>
      <member refid="d5/d6f/a01281_1ab455a8f474185082704ffa61c4de9b6e" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>factorize</name></member>
      <member refid="d5/d6f/a01281_1a360b244f1e41cc0e5b55b0143735d1c9" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>solve</name></member>
      <member refid="d5/d6f/a01281_1a3d848e3089ac265f4b21f4776143da24" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>solve</name></member>
      <member refid="d5/d6f/a01281_1aa663d65659a9309fae2122d673447915" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>solve</name></member>
      <member refid="d5/d6f/a01281_1a4566541af4af4bec8673a1222d846821" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>solve</name></member>
      <member refid="d5/d6f/a01281_1a2596dddb7edaec11649070994c06f2ba" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>solver</name></member>
      <member refid="d2/d1d/a01277_1a9c6b97e27f64983ae56bdbc19918e7c0" prot="public" virt="virtual"><scope>Ikarus::LinearSolverTemplate::SolverImpl</scope><name>~SolverBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
