<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01338" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::NonLinearElastic</compoundname>
    <basecompoundref refid="a01226" prot="public" virt="non-virtual">Ikarus::PowerBasisFE&lt; Basis_ &gt;</basecompoundref>
    <basecompoundref refid="a01306" prot="public" virt="non-virtual">Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;</basecompoundref>
    <basecompoundref refid="a01302" prot="public" virt="non-virtual">Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;</basecompoundref>
    <includes refid="a02469" local="no">ikarus/finiteelements/mechanics/nonlinearelastic.hh</includes>
    <templateparamlist>
      <param>
        <type>typename Basis_</type>
      </param>
      <param>
        <type>typename Material_</type>
      </param>
      <param>
        <type>typename FERequirements_</type>
        <defval><ref refid="a01250" kindref="compound">FERequirements</ref>&lt;&gt;</defval>
      </param>
      <param>
        <type>bool</type>
        <declname>useEigenRef</declname>
        <defname>useEigenRef</defname>
        <defval>false</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a01338_1a470c63e09f0085be08a18eca7c31edc5" prot="public" static="no">
        <type><ref refid="a01258" kindref="compound">FETraits</ref>&lt; Basis_, FERequirements_, useEigenRef &gt;</type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::Traits =  FETraits&lt;Basis_, FERequirements_, useEigenRef&gt;</definition>
        <argsstring></argsstring>
        <name>Traits</name>
        <qualifiedname>Ikarus::NonLinearElastic::Traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="52" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1ae61be1f5b6bdd9443c5ac05e1c526e2f" prot="public" static="no">
        <type>typename <ref refid="a01258_1a60167d06e28805974dec7b7bfda0b8fe" kindref="member">Traits::Basis</ref></type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::Basis =  typename Traits::Basis</definition>
        <argsstring></argsstring>
        <name>Basis</name>
        <qualifiedname>Ikarus::NonLinearElastic::Basis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="53" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1afc4ec54126ffcf064c026548b8def36f" prot="public" static="no">
        <type>typename <ref refid="a01258_1aa32f74d438637b2a1e3862b20b010823" kindref="member">Traits::FlatBasis</ref></type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::FlatBasis =  typename Traits::FlatBasis</definition>
        <argsstring></argsstring>
        <name>FlatBasis</name>
        <qualifiedname>Ikarus::NonLinearElastic::FlatBasis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="54" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1a845acdbdee4d31a14517c29a6e41a633" prot="public" static="no">
        <type>typename <ref refid="a01258_1ac302107e3a891954c504b6cc9b739f32" kindref="member">Traits::FERequirementType</ref></type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::FERequirementType =  typename Traits::FERequirementType</definition>
        <argsstring></argsstring>
        <name>FERequirementType</name>
        <qualifiedname>Ikarus::NonLinearElastic::FERequirementType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="55" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1a734b832d2e3da29878954ac6e195b777" prot="public" static="no">
        <type>typename <ref refid="a01258_1aaff1416c2f755aa06e3f85dbf46c2bcb" kindref="member">Traits::LocalView</ref></type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::LocalView =  typename Traits::LocalView</definition>
        <argsstring></argsstring>
        <name>LocalView</name>
        <qualifiedname>Ikarus::NonLinearElastic::LocalView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="56" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1adfc5aadc33a3225e2493c91d106d951d" prot="public" static="no">
        <type>typename <ref refid="a01258_1a4fd6cbc70d8a5bd3af746776aec58338" kindref="member">Traits::Geometry</ref></type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::Geometry =  typename Traits::Geometry</definition>
        <argsstring></argsstring>
        <name>Geometry</name>
        <qualifiedname>Ikarus::NonLinearElastic::Geometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="57" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1adf29dfa503f9123880503d874f80e670" prot="public" static="no">
        <type>typename <ref refid="a01258_1ab7206c907598ab750532f44d70c58ae0" kindref="member">Traits::GridView</ref></type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::GridView =  typename Traits::GridView</definition>
        <argsstring></argsstring>
        <name>GridView</name>
        <qualifiedname>Ikarus::NonLinearElastic::GridView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="58" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1a6b5b825027cf741ba76c9683701373d5" prot="public" static="no">
        <type>typename <ref refid="a01258_1a17b758b602def406352e9dd72a136288" kindref="member">Traits::Element</ref></type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::Element =  typename Traits::Element</definition>
        <argsstring></argsstring>
        <name>Element</name>
        <qualifiedname>Ikarus::NonLinearElastic::Element</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="59" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1aa7182016ca36060d769175bb4a612026" prot="public" static="no">
        <type><ref refid="a01226" kindref="compound">PowerBasisFE</ref>&lt; <ref refid="a01338_1ae61be1f5b6bdd9443c5ac05e1c526e2f" kindref="member">Basis</ref> &gt;</type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::BasePowerFE =  PowerBasisFE&lt;Basis&gt;</definition>
        <argsstring></argsstring>
        <name>BasePowerFE</name>
        <qualifiedname>Ikarus::NonLinearElastic::BasePowerFE</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="60" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1ac44404a0f9d5ee9c786775dc0b8ef760" prot="public" static="no">
        <type>Material_</type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::Material =  Material_</definition>
        <argsstring></argsstring>
        <name>Material</name>
        <qualifiedname>Ikarus::NonLinearElastic::Material</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="61" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1a6d5e4e1db7af32672a4345589e00ebe8" prot="public" static="no">
        <type><ref refid="a01306" kindref="compound">Volume</ref>&lt; <ref refid="a01338" kindref="compound">NonLinearElastic</ref>&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;, <ref refid="a01338_1a470c63e09f0085be08a18eca7c31edc5" kindref="member">Traits</ref> &gt;</type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::VolumeType =  Volume&lt;NonLinearElastic&lt;Basis_, Material_, FERequirements_, useEigenRef&gt;, Traits&gt;</definition>
        <argsstring></argsstring>
        <name>VolumeType</name>
        <qualifiedname>Ikarus::NonLinearElastic::VolumeType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="62" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1a030408ba33d6f027a9057e8d3a829159" prot="public" static="no">
        <type><ref refid="a01302" kindref="compound">Traction</ref>&lt; <ref refid="a01338" kindref="compound">NonLinearElastic</ref>&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;, <ref refid="a01338_1a470c63e09f0085be08a18eca7c31edc5" kindref="member">Traits</ref> &gt;</type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::TractionType =  Traction&lt;NonLinearElastic&lt;Basis_, Material_, FERequirements_, useEigenRef&gt;, Traits&gt;</definition>
        <argsstring></argsstring>
        <name>TractionType</name>
        <qualifiedname>Ikarus::NonLinearElastic::TractionType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="63" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01338_1ac980630bbf94190d87100b44b7a53837" prot="public" static="no">
        <type>decltype(std::declval&lt; <ref refid="a01338_1a734b832d2e3da29878954ac6e195b777" kindref="member">LocalView</ref> &gt;().tree().child(0).finiteElement().localBasis())</type>
        <definition>using Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::LocalBasisType =  decltype(std::declval&lt;LocalView&gt;().tree().child(0).finiteElement().localBasis())</definition>
        <argsstring></argsstring>
        <name>LocalBasisType</name>
        <qualifiedname>Ikarus::NonLinearElastic::LocalBasisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="64" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01226_1a9199b27c710f3cf1bb3379381e1d3ac8" prot="public" static="no">
        <type>typename <ref refid="a01258_1aa32f74d438637b2a1e3862b20b010823" kindref="member">Traits::FlatBasis</ref></type>
        <definition>using Ikarus::PowerBasisFE&lt; Basis_  &gt;::RootBasis =  typename Traits::FlatBasis</definition>
        <argsstring></argsstring>
        <name>RootBasis</name>
        <qualifiedname>Ikarus::PowerBasisFE&lt; Basis_ &gt;::RootBasis</qualifiedname>
        <briefdescription>
<para>Type of the root basis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" line="27" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01226_1a8d6c61ef84c53a1468462f803cdba0a5" prot="public" static="no">
        <type>typename <ref refid="a01258_1a58c165013cc9427aef846dad4dc6703e" kindref="member">Traits::GlobalIndex</ref></type>
        <definition>using Ikarus::PowerBasisFE&lt; Basis_  &gt;::GlobalIndex =  typename Traits::GlobalIndex</definition>
        <argsstring></argsstring>
        <name>GlobalIndex</name>
        <qualifiedname>Ikarus::PowerBasisFE&lt; Basis_ &gt;::GlobalIndex</qualifiedname>
        <briefdescription>
<para>Type of the global index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" line="29" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01226_1a983249c2d5963504ba570dd6da67f67c" prot="public" static="no">
        <type>typename <ref refid="a01258_1a17b758b602def406352e9dd72a136288" kindref="member">Traits::Element</ref></type>
        <definition>using Ikarus::PowerBasisFE&lt; Basis_  &gt;::GridElement =  typename Traits::Element</definition>
        <argsstring></argsstring>
        <name>GridElement</name>
        <qualifiedname>Ikarus::PowerBasisFE&lt; Basis_ &gt;::GridElement</qualifiedname>
        <briefdescription>
<para>Type of the grid element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" line="30" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="a01338_1a089f6bc160374739a5111aa99e2f4b95" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::myDim</definition>
        <argsstring></argsstring>
        <name>myDim</name>
        <qualifiedname>Ikarus::NonLinearElastic::myDim</qualifiedname>
        <initializer>= <ref refid="a01258_1a43fba779ca28962b6c1ae5a78a6fa890" kindref="member">Traits::mydim</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="66" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="66" bodyend="-1"/>
        <referencedby refid="a01338_1a4cdd78cc86c784202967911c9953e667" compoundref="a02469" startline="225" endline="247">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateMatrix</referencedby>
        <referencedby refid="a01338_1ab3328f45d8603589239dcea4c86a745b" compoundref="a02469" startline="307" endline="329">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateVectorImpl</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a01338_1a2b89a8d5f5b634b295327b9cdbf8579d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::strainType</definition>
        <argsstring></argsstring>
        <name>strainType</name>
        <qualifiedname>Ikarus::NonLinearElastic::strainType</qualifiedname>
        <initializer>= <ref refid="a00314_1ggacef1e451de1a99845c59d7391064fb8faca3f1e4bb21fd00a3d29c5d8aff8e11e" kindref="member">StrainTags::greenLagrangian</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="67" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01226_1a08d63c99f722a352ee1ebe29bcb88bcd" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int Ikarus::PowerBasisFE&lt; Basis_  &gt;::num_children</definition>
        <argsstring></argsstring>
        <name>num_children</name>
        <qualifiedname>Ikarus::PowerBasisFE&lt; Basis_ &gt;::num_children</qualifiedname>
        <briefdescription>
<para>Number of children in the powerBasis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" line="48" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01306_1aa57591d28c62806bfac624043d2e0258" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::worldDim</definition>
        <argsstring></argsstring>
        <name>worldDim</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::worldDim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="25" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01302_1a1eee242b581174d0fd8e7587130234be" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::worldDim</definition>
        <argsstring></argsstring>
        <name>worldDim</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::worldDim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="29" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01338_1a359db119203262c5026047ec8695822c" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; const <ref refid="a01338_1adfc5aadc33a3225e2493c91d106d951d" kindref="member">Geometry</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const Geometry&gt; Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::geo_</definition>
        <argsstring></argsstring>
        <name>geo_</name>
        <qualifiedname>Ikarus::NonLinearElastic::geo_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="274" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01338_1a8faad021597375498642d3db4300a365" prot="private" static="no" mutable="no">
        <type>Dune::CachedLocalBasis&lt; std::remove_cvref_t&lt; <ref refid="a01338_1ac980630bbf94190d87100b44b7a53837" kindref="member">LocalBasisType</ref> &gt; &gt;</type>
        <definition>Dune::CachedLocalBasis&lt;std::remove_cvref_t&lt;LocalBasisType&gt; &gt; Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::localBasis</definition>
        <argsstring></argsstring>
        <name>localBasis</name>
        <qualifiedname>Ikarus::NonLinearElastic::localBasis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="275" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01338_1ab44e1c23e8a91a5e9faceed55a1149b1" prot="private" static="no" mutable="no">
        <type><ref refid="a01338_1ac44404a0f9d5ee9c786775dc0b8ef760" kindref="member">Material</ref></type>
        <definition>Material Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::mat</definition>
        <argsstring></argsstring>
        <name>mat</name>
        <qualifiedname>Ikarus::NonLinearElastic::mat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="276" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01338_1a5f3e67f77392370f29c144a500f18d6a" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::numberOfNodes_</definition>
        <argsstring></argsstring>
        <name>numberOfNodes_</name>
        <qualifiedname>Ikarus::NonLinearElastic::numberOfNodes_</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="277" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01338_1ac345af4f888ca9d99592780656ab4f95" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::order_</definition>
        <argsstring></argsstring>
        <name>order_</name>
        <qualifiedname>Ikarus::NonLinearElastic::order_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="278" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="278" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01338_1afcba98cc2fcdf140b11fd652dcc7d361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VolumeLoad</type>
            <defval><ref refid="a01490" kindref="compound">utils::LoadDefault</ref></defval>
          </param>
          <param>
            <type>typename NeumannBoundaryLoad</type>
            <defval><ref refid="a01490" kindref="compound">utils::LoadDefault</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::NonLinearElastic</definition>
        <argsstring>(const Basis &amp;globalBasis, const typename LocalView::Element &amp;element, const Material &amp;p_mat, VolumeLoad p_volumeLoad={}, const BoundaryPatch&lt; GridView &gt; *p_neumannBoundary=nullptr, NeumannBoundaryLoad p_neumannBoundaryLoad={})</argsstring>
        <name>NonLinearElastic</name>
        <qualifiedname>Ikarus::NonLinearElastic::NonLinearElastic</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1ae61be1f5b6bdd9443c5ac05e1c526e2f" kindref="member">Basis</ref> &amp;</type>
          <declname>globalBasis</declname>
        </param>
        <param>
          <type>const typename LocalView::Element &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const <ref refid="a01338_1ac44404a0f9d5ee9c786775dc0b8ef760" kindref="member">Material</ref> &amp;</type>
          <declname>p_mat</declname>
        </param>
        <param>
          <type>VolumeLoad</type>
          <declname>p_volumeLoad</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const BoundaryPatch&lt; <ref refid="a01338_1adf29dfa503f9123880503d874f80e670" kindref="member">GridView</ref> &gt; *</type>
          <declname>p_neumannBoundary</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>NeumannBoundaryLoad</type>
          <declname>p_neumannBoundaryLoad</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Constructor for the <ref refid="a01338" kindref="compound">NonLinearElastic</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VolumeLoad</parametername>
</parameternamelist>
<parameterdescription>
<para>The type for the volume load function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NeumannBoundaryLoad</parametername>
</parameternamelist>
<parameterdescription>
<para>The type for the Neumann boundary load function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>globalBasis</parametername>
</parameternamelist>
<parameterdescription>
<para>The global basis for the finite element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>The element for which the finite element is constructed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The material for the non-linear elastic element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_volumeLoad</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a01306" kindref="compound">Volume</ref> load function (default is LoadDefault). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_neumannBoundary</parametername>
</parameternamelist>
<parameterdescription>
<para>Neumann boundary patch (default is nullptr). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_neumannBoundaryLoad</parametername>
</parameternamelist>
<parameterdescription>
<para>Neumann boundary load function (default is LoadDefault). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="82" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="82" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="a01338_1a89b811cd039a701d8a1d2c5b8796c50f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::displacementFunction</definition>
        <argsstring>(const FERequirementType &amp;par, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>displacementFunction</name>
        <qualifiedname>Ikarus::NonLinearElastic::displacementFunction</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>Get the displacement function for the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the displacement function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional displacement vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StandardLocalFunction representing the displacement function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="116" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="116" bodyend="122"/>
        <referencedby refid="a01338_1a7eb013e741bad3ae7105ef86c1f3d117" compoundref="a02469" startline="259" endline="271">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateAt</referencedby>
        <referencedby refid="a01338_1aa5bba94f05661386e4e62d6c74889490" compoundref="a02469" startline="282" endline="304">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateScalarImpl</referencedby>
        <referencedby refid="a01338_1ae258d2211b130b7b6f167aa86ac1fab7" compoundref="a02469" startline="133" endline="136">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::strainFunction</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01338_1ae258d2211b130b7b6f167aa86ac1fab7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::strainFunction</definition>
        <argsstring>(const FERequirementType &amp;par, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>strainFunction</name>
        <qualifiedname>Ikarus::NonLinearElastic::strainFunction</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>The strain function for the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the strain function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional displacement vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The strain function calculated using greenLagrangeStrains. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="133" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="133" bodyend="136"/>
        <referencedby refid="a01338_1a4cdd78cc86c784202967911c9953e667" compoundref="a02469" startline="225" endline="247">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateMatrix</referencedby>
        <referencedby refid="a01338_1aa5bba94f05661386e4e62d6c74889490" compoundref="a02469" startline="282" endline="304">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateScalarImpl</referencedby>
        <referencedby refid="a01338_1ab3328f45d8603589239dcea4c86a745b" compoundref="a02469" startline="307" endline="329">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateVectorImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01338_1ae091d629e7aa235d88e381368a75f5bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>strainDim</declname>
            <defname>strainDim</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>voigt</declname>
            <defname>voigt</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::materialTangent</definition>
        <argsstring>(const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;strain) const</argsstring>
        <name>materialTangent</name>
        <qualifiedname>Ikarus::NonLinearElastic::materialTangent</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;</type>
          <declname>strain</declname>
        </param>
        <briefdescription>
<para>Get the material tangent for the given strain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the material and strain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strainDim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the strain vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voigt</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use Voigt notation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strain</parametername>
</parameternamelist>
<parameterdescription>
<para>The strain vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The material tangent calculated using the material&apos;s tangentModuli function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="148" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="148" bodyend="155"/>
        <referencedby refid="a01338_1a4cdd78cc86c784202967911c9953e667" compoundref="a02469" startline="225" endline="247">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateMatrix</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01338_1a5e139eb8977fd8a47656dc680ac15214" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>strainDim</declname>
            <defname>strainDim</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::getInternalEnergy</definition>
        <argsstring>(const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;strain) const</argsstring>
        <name>getInternalEnergy</name>
        <qualifiedname>Ikarus::NonLinearElastic::getInternalEnergy</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;</type>
          <declname>strain</declname>
        </param>
        <briefdescription>
<para>Get the internal energy for the given strain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the material and strain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strainDim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the strain vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strain</parametername>
</parameternamelist>
<parameterdescription>
<para>The strain vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The internal energy calculated using the material&apos;s storedEnergy function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="166" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="166" bodyend="173"/>
        <referencedby refid="a01338_1aa5bba94f05661386e4e62d6c74889490" compoundref="a02469" startline="282" endline="304">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateScalarImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01338_1ad86ce202de620c405536c11514a0f6db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>strainDim</declname>
            <defname>strainDim</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>voigt</declname>
            <defname>voigt</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::getStress</definition>
        <argsstring>(const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;strain) const</argsstring>
        <name>getStress</name>
        <qualifiedname>Ikarus::NonLinearElastic::getStress</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;</type>
          <declname>strain</declname>
        </param>
        <briefdescription>
<para>Get the stress for the given strain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the material and strain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strainDim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the strain vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voigt</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean indicating whether to use the Voigt notation for stress. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strain</parametername>
</parameternamelist>
<parameterdescription>
<para>The strain vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The stress vector calculated using the material&apos;s stresses function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="185" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="185" bodyend="192"/>
        <referencedby refid="a01338_1a4cdd78cc86c784202967911c9953e667" compoundref="a02469" startline="225" endline="247">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateMatrix</referencedby>
        <referencedby refid="a01338_1ab3328f45d8603589239dcea4c86a745b" compoundref="a02469" startline="307" endline="329">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateVectorImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01338_1a19b3729a38801ee4b804c5a90c95c763" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01338_1adfc5aadc33a3225e2493c91d106d951d" kindref="member">Geometry</ref> &amp;</type>
        <definition>const Geometry &amp; Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::geometry</definition>
        <argsstring>() const</argsstring>
        <name>geometry</name>
        <qualifiedname>Ikarus::NonLinearElastic::geometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="194" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="a01338_1aca8d346ffc5392056481de5c925e4866" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::numberOfNodes</definition>
        <argsstring>() const</argsstring>
        <name>numberOfNodes</name>
        <qualifiedname>Ikarus::NonLinearElastic::numberOfNodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="195" column="11" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="a01338_1a3cf664c8926af751cbc5c55c42a860bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::order</definition>
        <argsstring>() const</argsstring>
        <name>order</name>
        <qualifiedname>Ikarus::NonLinearElastic::order</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="196" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="a01338_1a744057f5543df5a612211f6fb1acbd7c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateScalar</definition>
        <argsstring>(const FERequirementType &amp;par) const</argsstring>
        <name>calculateScalar</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateScalar</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <briefdescription>
<para>Calculate the scalar value associated with the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object specifying the requirements for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The calculated scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="205" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="a01338_1affd164f3f82e4856e5fea2cf9479324c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateVector</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template VectorType&lt;&gt; force) const</argsstring>
        <name>calculateVector</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateVector</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template VectorType&lt;&gt;</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Calculate the vector associated with the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object specifying the requirements for the calculation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to store the calculated result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="214" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="214" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="a01338_1a4cdd78cc86c784202967911c9953e667" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateMatrix</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template MatrixType&lt;&gt; K) const</argsstring>
        <name>calculateMatrix</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateMatrix</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template MatrixType&lt;&gt;</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Calculate the matrix associated with the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object specifying the requirements for the calculation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to store the calculated result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="225" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="225" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="a01338_1a7eb013e741bad3ae7105ef86c1f3d117" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="a00312_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref></type>
            <declname>resType</declname>
            <defname>resType</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateAt</definition>
        <argsstring>(const FERequirementType &amp;req, const Dune::FieldVector&lt; double, Traits::mydim &gt; &amp;local) const</argsstring>
        <name>calculateAt</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateAt</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>const <ref refid="a01370" kindref="compound">Dune::FieldVector</ref>&lt; double, <ref refid="a01258_1a43fba779ca28962b6c1ae5a78a6fa890" kindref="member">Traits::mydim</ref> &gt; &amp;</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>Calculates a requested result at a specific local position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object holding the global solution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>Local position vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated result</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>resType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type representing the requested result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="259" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="259" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="a01226_1a65fbcfb67bd20fd4a434230b5efa5bd1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t Ikarus::PowerBasisFE&lt; Basis_  &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>Ikarus::PowerBasisFE&lt; Basis_ &gt;::size</qualifiedname>
        <briefdescription>
<para>Get the size of the local view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the local view. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" line="54" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="a01226_1ac47a208cf2511bf8676282280360ab38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::PowerBasisFE&lt; Basis_  &gt;::globalFlatIndices</definition>
        <argsstring>(std::vector&lt; GlobalIndex &gt; &amp;globalIndices) const</argsstring>
        <name>globalFlatIndices</name>
        <qualifiedname>Ikarus::PowerBasisFE&lt; Basis_ &gt;::globalFlatIndices</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="a01226_1a8d6c61ef84c53a1468462f803cdba0a5" kindref="member">GlobalIndex</ref> &gt; &amp;</type>
          <declname>globalIndices</declname>
        </param>
        <briefdescription>
<para>Get the global flat indices for the power basis. </para>
        </briefdescription>
        <detaileddescription>
<para>The global indices are collected in a FlatInterLeaved order. I.e. x_0, y_0, z_0, ..., x_n, y_n, z_n</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>globalIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector to store global indices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" line="63" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" bodystart="63" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="a01226_1a0fe5d4e10f331905629351786c72ce6a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01226_1a983249c2d5963504ba570dd6da67f67c" kindref="member">GridElement</ref> &amp;</type>
        <definition>const GridElement &amp; Ikarus::PowerBasisFE&lt; Basis_  &gt;::gridElement</definition>
        <argsstring>() const</argsstring>
        <name>gridElement</name>
        <qualifiedname>Ikarus::PowerBasisFE&lt; Basis_ &gt;::gridElement</qualifiedname>
        <briefdescription>
<para>Get the grid element associated with the local view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The grid element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" line="78" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="a01226_1a4b49c02de08fb5c115affa646c5f249a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01338_1a734b832d2e3da29878954ac6e195b777" kindref="member">LocalView</ref> &amp;</type>
        <definition>const LocalView &amp; Ikarus::PowerBasisFE&lt; Basis_  &gt;::localView</definition>
        <argsstring>() const</argsstring>
        <name>localView</name>
        <qualifiedname>Ikarus::PowerBasisFE&lt; Basis_ &gt;::localView</qualifiedname>
        <briefdescription>
<para>Get the const reference to the local view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The const reference to the local view. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" line="84" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="a01226_1a00a045439d18c431ef49d7349230272b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01338_1a734b832d2e3da29878954ac6e195b777" kindref="member">LocalView</ref> &amp;</type>
        <definition>LocalView &amp; Ikarus::PowerBasisFE&lt; Basis_  &gt;::localView</definition>
        <argsstring>()</argsstring>
        <name>localView</name>
        <qualifiedname>Ikarus::PowerBasisFE&lt; Basis_ &gt;::localView</qualifiedname>
        <briefdescription>
<para>Get the reference to the local view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The reference to the local view. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" line="90" column="13" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febases/powerbasisfe.hh" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="a01306_1a33edddd4d3ef260d45b1c029efd9046d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateScalar</definition>
        <argsstring>(const FERequirementType &amp;req) const</argsstring>
        <name>calculateScalar</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateScalar</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Calculate the scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the scalar value based on the given FERequirements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The calculated scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="48" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="a01306_1ad2cf691094d779dd4681c79a1d768aae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateVector</definition>
        <argsstring>(const FERequirementType &amp;req, typename Traits::template VectorType&lt;&gt; force) const</argsstring>
        <name>calculateVector</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateVector</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>typename Traits::template VectorType&lt;&gt;</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Calculate the vector associated with the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object specifying the requirements for the calculation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to store the calculated result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="57" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="a01306_1ab34ccd72bb7397283f7c2dcbf595841e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateMatrix</definition>
        <argsstring>(const FERequirementType &amp;req, typename Traits::template MatrixType&lt;&gt; K) const</argsstring>
        <name>calculateMatrix</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateMatrix</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>typename Traits::template MatrixType&lt;&gt;</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Calculate the matrix associated with the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object specifying the requirements for the calculation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to store the calculated result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="67" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="a01302_1ac9ed9f5497683a52effe2c572056c6e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateScalar</definition>
        <argsstring>(const FERequirementType &amp;req) const</argsstring>
        <name>calculateScalar</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateScalar</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Calculate the scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the scalar value based on the given FERequirements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The calculated scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="56" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="a01302_1a7c9d37bb3d426f00c1451d5a5222b748" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateVector</definition>
        <argsstring>(const FERequirementType &amp;req, typename Traits::template VectorType&lt;&gt; force) const</argsstring>
        <name>calculateVector</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateVector</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>typename Traits::template VectorType&lt;&gt;</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Calculate the vector associated with the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object specifying the requirements for the calculation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to store the calculated result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="65" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="a01302_1ad5b9f64124013ab2e98b6494e9b511b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateMatrix</definition>
        <argsstring>(const FERequirementType &amp;req, typename Traits::template MatrixType&lt;&gt; K) const</argsstring>
        <name>calculateMatrix</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateMatrix</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>typename Traits::template MatrixType&lt;&gt;</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Calculate the matrix associated with the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object specifying the requirements for the calculation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to store the calculated result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="75" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="75" bodyend="77"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="a01338_1aa5bba94f05661386e4e62d6c74889490" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateScalarImpl</definition>
        <argsstring>(const FERequirementType &amp;par, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const -&gt; ScalarType</argsstring>
        <name>calculateScalarImpl</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateScalarImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="282" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="282" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="a01338_1ab3328f45d8603589239dcea4c86a745b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateVectorImpl</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template VectorType&lt; ScalarType &gt; force, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>calculateVectorImpl</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateVectorImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template VectorType&lt; ScalarType &gt;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="307" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="307" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="a01306_1a38b6d9f88ad5734093413497e3ac7b29" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateScalarImpl</definition>
        <argsstring>(const FERequirementType &amp;par, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const -&gt; ScalarType</argsstring>
        <name>calculateScalarImpl</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateScalarImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="73" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="73" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="a01306_1af2fc872a641d42398fc9d8bd60aa973c" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateVectorImpl</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template VectorType&lt; ScalarType &gt; force, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>calculateVectorImpl</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateVectorImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template VectorType&lt; ScalarType &gt;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="92" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="92" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="a01306_1a6903f5e92a06b8066ef67b6a1f22e142" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateMatrixImpl</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template MatrixType&lt;&gt; K, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>calculateMatrixImpl</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateMatrixImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template MatrixType&lt;&gt;</type>
          <declname>K</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="113" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="113" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="a01302_1a3b3de553171d016228f21cbac1e7f47d" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateScalarImpl</definition>
        <argsstring>(const FERequirementType &amp;par, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const -&gt; ScalarType</argsstring>
        <name>calculateScalarImpl</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateScalarImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="81" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="81" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="a01302_1a0cac2c7cc2a06ae38bc83f97664e4d8c" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateVectorImpl</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template VectorType&lt; ScalarType &gt; force, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; dx=std::nullopt) const</argsstring>
        <name>calculateVectorImpl</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateVectorImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template VectorType&lt; ScalarType &gt;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Integration rule along the boundary</para>
<para>The value of the local function wrt the i-th coeff</para>
<para>Value of the Neumann data at the current position</para>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="116" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="116" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="a01302_1aae1b4a04dd13b2ec2145ef141bf3190c" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt; , FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt;  &gt;::calculateMatrixImpl</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template MatrixType&lt;&gt; K, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>calculateMatrixImpl</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::calculateMatrixImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template MatrixType&lt;&gt;</type>
          <declname>K</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="150" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="150" bodyend="151"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="a01338" kindref="compound">NonLinearElastic</ref> class represents a non-linear elastic finite element. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Basis_</parametername>
</parameternamelist>
<parameterdescription>
<para>The basis type for the finite element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Material_</parametername>
</parameternamelist>
<parameterdescription>
<para>The material type for the finite element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FERequirements_</parametername>
</parameternamelist>
<parameterdescription>
<para>The requirements for the finite element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useEigenRef</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean flag indicating whether to use <ref refid="a00333" kindref="compound">Eigen</ref> references. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;</label>
        <link refid="a01338"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::PowerBasisFE&lt; Basis &gt;</label>
        <link refid="a01226"/>
      </node>
      <node id="7">
        <label>Ikarus::Traction&lt; DisplacementBasedElement, Traits &gt;</label>
        <link refid="a01302"/>
      </node>
      <node id="5">
        <label>Ikarus::Volume&lt; DisplacementBasedElement, Traits &gt;</label>
        <link refid="a01306"/>
      </node>
      <node id="2">
        <label>Ikarus::PowerBasisFE&lt; Basis_ &gt;</label>
        <link refid="a01226"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; Basis_ &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;</label>
        <link refid="a01302"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;</label>
        <link refid="a01306"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;</label>
        <link refid="a01338"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::PowerBasisFE&lt; Basis &gt;</label>
        <link refid="a01226"/>
      </node>
      <node id="7">
        <label>Ikarus::Traction&lt; DisplacementBasedElement, Traits &gt;</label>
        <link refid="a01302"/>
      </node>
      <node id="5">
        <label>Ikarus::Volume&lt; DisplacementBasedElement, Traits &gt;</label>
        <link refid="a01306"/>
      </node>
      <node id="2">
        <label>Ikarus::PowerBasisFE&lt; Basis_ &gt;</label>
        <link refid="a01226"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; Basis_ &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Ikarus::Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;</label>
        <link refid="a01302"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>Ikarus::Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;</label>
        <link refid="a01306"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="45" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="50" bodyend="330"/>
    <listofallmembers>
      <member refid="a01338_1aa7182016ca36060d769175bb4a612026" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>BasePowerFE</name></member>
      <member refid="a01338_1ae61be1f5b6bdd9443c5ac05e1c526e2f" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Basis</name></member>
      <member refid="a01338_1a7eb013e741bad3ae7105ef86c1f3d117" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateAt</name></member>
      <member refid="a01338_1a4cdd78cc86c784202967911c9953e667" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateMatrix</name></member>
      <member refid="a01306_1ab34ccd72bb7397283f7c2dcbf595841e" prot="public" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateMatrix</name></member>
      <member refid="a01302_1ad5b9f64124013ab2e98b6494e9b511b3" prot="public" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateMatrix</name></member>
      <member refid="a01306_1a6903f5e92a06b8066ef67b6a1f22e142" prot="protected" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateMatrixImpl</name></member>
      <member refid="a01302_1aae1b4a04dd13b2ec2145ef141bf3190c" prot="protected" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateMatrixImpl</name></member>
      <member refid="a01338_1a744057f5543df5a612211f6fb1acbd7c" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateScalar</name></member>
      <member refid="a01306_1a33edddd4d3ef260d45b1c029efd9046d" prot="public" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateScalar</name></member>
      <member refid="a01302_1ac9ed9f5497683a52effe2c572056c6e0" prot="public" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateScalar</name></member>
      <member refid="a01338_1aa5bba94f05661386e4e62d6c74889490" prot="protected" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateScalarImpl</name></member>
      <member refid="a01306_1a38b6d9f88ad5734093413497e3ac7b29" prot="protected" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateScalarImpl</name></member>
      <member refid="a01302_1a3b3de553171d016228f21cbac1e7f47d" prot="protected" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateScalarImpl</name></member>
      <member refid="a01338_1affd164f3f82e4856e5fea2cf9479324c" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateVector</name></member>
      <member refid="a01306_1ad2cf691094d779dd4681c79a1d768aae" prot="public" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateVector</name></member>
      <member refid="a01302_1a7c9d37bb3d426f00c1451d5a5222b748" prot="public" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateVector</name></member>
      <member refid="a01338_1ab3328f45d8603589239dcea4c86a745b" prot="protected" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateVectorImpl</name></member>
      <member refid="a01306_1af2fc872a641d42398fc9d8bd60aa973c" prot="protected" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateVectorImpl</name></member>
      <member refid="a01302_1a0cac2c7cc2a06ae38bc83f97664e4d8c" prot="protected" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateVectorImpl</name></member>
      <member refid="a01338_1a89b811cd039a701d8a1d2c5b8796c50f" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>displacementFunction</name></member>
      <member refid="a01338_1a6b5b825027cf741ba76c9683701373d5" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Element</name></member>
      <member refid="a01338_1a845acdbdee4d31a14517c29a6e41a633" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>FERequirementType</name></member>
      <member refid="a01338_1afc4ec54126ffcf064c026548b8def36f" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>FlatBasis</name></member>
      <member refid="a01338_1a359db119203262c5026047ec8695822c" prot="private" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>geo_</name></member>
      <member refid="a01338_1a19b3729a38801ee4b804c5a90c95c763" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>geometry</name></member>
      <member refid="a01338_1adfc5aadc33a3225e2493c91d106d951d" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Geometry</name></member>
      <member refid="a01338_1a5e139eb8977fd8a47656dc680ac15214" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>getInternalEnergy</name></member>
      <member refid="a01338_1ad86ce202de620c405536c11514a0f6db" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>getStress</name></member>
      <member refid="a01226_1ac47a208cf2511bf8676282280360ab38" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>globalFlatIndices</name></member>
      <member refid="a01226_1a8d6c61ef84c53a1468462f803cdba0a5" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>GlobalIndex</name></member>
      <member refid="a01226_1a0fe5d4e10f331905629351786c72ce6a" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>gridElement</name></member>
      <member refid="a01226_1a983249c2d5963504ba570dd6da67f67c" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>GridElement</name></member>
      <member refid="a01338_1adf29dfa503f9123880503d874f80e670" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>GridView</name></member>
      <member refid="a01338_1a8faad021597375498642d3db4300a365" prot="private" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>localBasis</name></member>
      <member refid="a01338_1ac980630bbf94190d87100b44b7a53837" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>LocalBasisType</name></member>
      <member refid="a01338_1a734b832d2e3da29878954ac6e195b777" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>LocalView</name></member>
      <member refid="a01226_1a4b49c02de08fb5c115affa646c5f249a" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>localView</name></member>
      <member refid="a01226_1a00a045439d18c431ef49d7349230272b" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>localView</name></member>
      <member refid="a01338_1ab44e1c23e8a91a5e9faceed55a1149b1" prot="private" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>mat</name></member>
      <member refid="a01338_1ac44404a0f9d5ee9c786775dc0b8ef760" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Material</name></member>
      <member refid="a01338_1ae091d629e7aa235d88e381368a75f5bc" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>materialTangent</name></member>
      <member refid="a01338_1a089f6bc160374739a5111aa99e2f4b95" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>myDim</name></member>
      <member refid="a01338_1afcba98cc2fcdf140b11fd652dcc7d361" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>NonLinearElastic</name></member>
      <member refid="a01226_1a08d63c99f722a352ee1ebe29bcb88bcd" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>num_children</name></member>
      <member refid="a01338_1aca8d346ffc5392056481de5c925e4866" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>numberOfNodes</name></member>
      <member refid="a01338_1a5f3e67f77392370f29c144a500f18d6a" prot="private" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>numberOfNodes_</name></member>
      <member refid="a01338_1a3cf664c8926af751cbc5c55c42a860bc" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>order</name></member>
      <member refid="a01338_1ac345af4f888ca9d99592780656ab4f95" prot="private" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>order_</name></member>
      <member refid="a01226_1a009345be8aeaf011f22f4c32c7d6f638" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>PowerBasisFE</name></member>
      <member refid="a01226_1a9199b27c710f3cf1bb3379381e1d3ac8" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>RootBasis</name></member>
      <member refid="a01226_1a65fbcfb67bd20fd4a434230b5efa5bd1" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>size</name></member>
      <member refid="a01338_1ae258d2211b130b7b6f167aa86ac1fab7" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>strainFunction</name></member>
      <member refid="a01338_1a2b89a8d5f5b634b295327b9cdbf8579d" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>strainType</name></member>
      <member refid="a01302_1ab0350cc85099b73b31b6f337bba45052" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Traction</name></member>
      <member refid="a01338_1a030408ba33d6f027a9057e8d3a829159" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>TractionType</name></member>
      <member refid="a01338_1a470c63e09f0085be08a18eca7c31edc5" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Traits</name></member>
      <member refid="a01306_1a4b5995b4de476887526d16c90600b634" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Volume</name></member>
      <member refid="a01338_1a6d5e4e1db7af32672a4345589e00ebe8" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>VolumeType</name></member>
      <member refid="a01306_1aa57591d28c62806bfac624043d2e0258" prot="public" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>worldDim</name></member>
      <member refid="a01302_1a1eee242b581174d0fd8e7587130234be" prot="public" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; Basis_, Material_, FERequirements&lt;&gt;, false &gt;, FETraits&lt; Basis_, FERequirements&lt;&gt;, false &gt; &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>worldDim</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
