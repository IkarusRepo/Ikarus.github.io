<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01565" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::IObservable</compoundname>
    <includes refid="a00221" local="no">ikarus/utils/observer/observer.hh</includes>
    <templateparamlist>
      <param>
        <type>typename MessageType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="a01565_1a1c8b2528995a1b226f6df1b032bc0407" prot="private" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="a01561" kindref="compound">IObserver</ref>&lt; MessageType &gt; &gt; &gt;</type>
        <definition>using Ikarus::IObservable&lt; MessageType &gt;::ObserverVector =  std::vector&lt;std::shared_ptr&lt;IObserver&lt;MessageType&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>ObserverVector</name>
        <qualifiedname>Ikarus::IObservable::ObserverVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="214" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01565_1aa30ed3d3760904c6ac9a13fe8b3045ee" prot="private" static="no">
        <type>std::map&lt; MessageType, ObserverVector &gt;</type>
        <definition>using Ikarus::IObservable&lt; MessageType &gt;::ObserverMap =  std::map&lt;MessageType, ObserverVector&gt;</definition>
        <argsstring></argsstring>
        <name>ObserverMap</name>
        <qualifiedname>Ikarus::IObservable::ObserverMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="215" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="215" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01565_1a931d60e91a42c0893ce92718612a63cf" prot="private" static="no" mutable="no">
        <type>ObserverMap</type>
        <definition>ObserverMap Ikarus::IObservable&lt; MessageType &gt;::observers_</definition>
        <argsstring></argsstring>
        <name>observers_</name>
        <qualifiedname>Ikarus::IObservable::observers_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="216" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01565_1ad4653066fb0ac8f79947caf82c99bab8" prot="private" static="no" mutable="no">
        <type>std::vector&lt; MessageType &gt;</type>
        <definition>std::vector&lt;MessageType&gt; Ikarus::IObservable&lt; MessageType &gt;::messages_</definition>
        <argsstring></argsstring>
        <name>messages_</name>
        <qualifiedname>Ikarus::IObservable::messages_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="217" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01565_1ac8058d5b1ebb462a10712ba598154e23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::IObservable&lt; MessageType &gt;::IObservable</definition>
        <argsstring>()</argsstring>
        <name>IObservable</name>
        <qualifiedname>Ikarus::IObservable::IObservable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="127" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1ad1fe15b31cccec8e44c695af550938ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Ikarus::IObservable&lt; MessageType &gt;::~IObservable</definition>
        <argsstring>()=default</argsstring>
        <name>~IObservable</name>
        <qualifiedname>Ikarus::IObservable::~IObservable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="131" column="13"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1ae182a206a72de6bc4585152d32332349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::subscribe</definition>
        <argsstring>(MessageType message, std::shared_ptr&lt; IObserver&lt; MessageType &gt; &gt; observer)</argsstring>
        <name>subscribe</name>
        <qualifiedname>Ikarus::IObservable::subscribe</qualifiedname>
        <param>
          <type>MessageType</type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01561" kindref="compound">IObserver</ref>&lt; MessageType &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to subscribe to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="137" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="221" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1a13bd8d73b485186680f640786e2682e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::subscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; MessageType &gt; &gt; observer)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable::subscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01561" kindref="compound">IObserver</ref>&lt; MessageType &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="142" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1a026462a1a050728e37bc24e33d2edd9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::subscribeAll</definition>
        <argsstring>(std::initializer_list&lt; std::shared_ptr&lt; IObserver&lt; MessageType &gt; &gt; &gt; observers)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable::subscribeAll</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::shared_ptr&lt; <ref refid="a01561" kindref="compound">IObserver</ref>&lt; MessageType &gt; &gt; &gt;</type>
          <declname>observers</declname>
        </param>
        <briefdescription>
<para>Subscribe multiple observers to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observers to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="147" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="234" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1a49622286d2b15f0b8a2b25275e6bc771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::unSubscribe</definition>
        <argsstring>(MessageType message, std::shared_ptr&lt; IObserver&lt; MessageType &gt; &gt; observer)</argsstring>
        <name>unSubscribe</name>
        <qualifiedname>Ikarus::IObservable::unSubscribe</qualifiedname>
        <param>
          <type>MessageType</type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01561" kindref="compound">IObserver</ref>&lt; MessageType &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to unsubscribe from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="153" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1a5c20f7eab2233d085071a4fd3b44cbda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::unSubscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; MessageType &gt; &gt; observer)</argsstring>
        <name>unSubscribeAll</name>
        <qualifiedname>Ikarus::IObservable::unSubscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01561" kindref="compound">IObserver</ref>&lt; MessageType &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="158" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::notify</definition>
        <argsstring>(MessageType message)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable::notify</qualifiedname>
        <param>
          <type>MessageType</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="163" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="254" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1ac035ba934c33e090c4a45128ac13f190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::floating_point</type>
            <declname>ScalarType</declname>
            <defname>ScalarType</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::notify</definition>
        <argsstring>(MessageType message, ScalarType val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable::notify</qualifiedname>
        <param>
          <type>MessageType</type>
          <declname>message</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a floating-point value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the floating-point value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating-point value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="172" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::notify</definition>
        <argsstring>(MessageType message, int val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable::notify</qualifiedname>
        <param>
          <type>MessageType</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="179" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="269" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1a2f93322aa7327069dd4469983933bd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::notify</definition>
        <argsstring>(MessageType message, const std::string &amp;val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable::notify</qualifiedname>
        <param>
          <type>MessageType</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="186" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="276" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1ae0c6cec757e540f22b65fce1f782e380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::notify</definition>
        <argsstring>(MessageType message, int val1, double val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable::notify</qualifiedname>
        <param>
          <type>MessageType</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer and a double value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="194" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="283" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1a72e3156874ce81a1c7548b9f74db522c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::notify</definition>
        <argsstring>(MessageType message, int val1, const std::string &amp;val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable::notify</qualifiedname>
        <param>
          <type>MessageType</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value and a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="202" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="290" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="a01565_1ac72b261cd2af7f59e98f1504814bc785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::floating_point</type>
            <declname>ScalarType</declname>
            <defname>ScalarType</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; MessageType &gt;::notify</definition>
        <argsstring>(MessageType message, Eigen::VectorX&lt; ScalarType &gt; vec)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable::notify</qualifiedname>
        <param>
          <type>MessageType</type>
          <declname>message</declname>
        </param>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an Eigen::VectorX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements in the Eigen::VectorX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::VectorX to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="211" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="298" bodyend="302"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic observable interface for the Observer design pattern. See <ref refid="a02523_1CITEREF_gamma1995design" kindref="member">[3]</ref> for a description of the design pattern. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MessageType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of message that the observable can handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; ControlMessages &gt;</label>
        <link refid="a01565"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;</label>
        <link refid="a01565"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; NonLinearSolverMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a01565"/>
      </node>
      <node id="3">
        <label>Ikarus::LoadControl&lt; NonLinearSolver &gt;</label>
        <link refid="a01185"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>Ikarus::NewtonRaphson&lt; NonLinearOperatorImpl, LinearSolver, UpdateFunctionTypeImpl &gt;</label>
        <link refid="a01413"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Ikarus::NewtonRaphsonWithSubsidiaryFunction&lt; NonLinearOperatorImpl, LinearSolver, UpdateFunctionTypeImpl &gt;</label>
        <link refid="a01421"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;</label>
        <link refid="a01189"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;</label>
        <link refid="a01441"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="125" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="125" bodyend="218"/>
    <listofallmembers>
      <member refid="a01565_1ac8058d5b1ebb462a10712ba598154e23" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>IObservable</name></member>
      <member refid="a01565_1ad4653066fb0ac8f79947caf82c99bab8" prot="private" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>messages_</name></member>
      <member refid="a01565_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>notify</name></member>
      <member refid="a01565_1ac035ba934c33e090c4a45128ac13f190" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>notify</name></member>
      <member refid="a01565_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>notify</name></member>
      <member refid="a01565_1a2f93322aa7327069dd4469983933bd16" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>notify</name></member>
      <member refid="a01565_1ae0c6cec757e540f22b65fce1f782e380" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>notify</name></member>
      <member refid="a01565_1a72e3156874ce81a1c7548b9f74db522c" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>notify</name></member>
      <member refid="a01565_1ac72b261cd2af7f59e98f1504814bc785" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>notify</name></member>
      <member refid="a01565_1aa30ed3d3760904c6ac9a13fe8b3045ee" prot="private" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>ObserverMap</name></member>
      <member refid="a01565_1a931d60e91a42c0893ce92718612a63cf" prot="private" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>observers_</name></member>
      <member refid="a01565_1a1c8b2528995a1b226f6df1b032bc0407" prot="private" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>ObserverVector</name></member>
      <member refid="a01565_1ae182a206a72de6bc4585152d32332349" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>subscribe</name></member>
      <member refid="a01565_1a13bd8d73b485186680f640786e2682e5" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>subscribeAll</name></member>
      <member refid="a01565_1a026462a1a050728e37bc24e33d2edd9c" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>subscribeAll</name></member>
      <member refid="a01565_1a49622286d2b15f0b8a2b25275e6bc771" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>unSubscribe</name></member>
      <member refid="a01565_1a5c20f7eab2233d085071a4fd3b44cbda" prot="public" virt="non-virtual"><scope>Ikarus::IObservable</scope><name>unSubscribeAll</name></member>
      <member refid="a01565_1ad1fe15b31cccec8e44c695af550938ed" prot="public" virt="virtual"><scope>Ikarus::IObservable</scope><name>~IObservable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
