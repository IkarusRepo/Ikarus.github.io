<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01400" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::LinearSolverTemplate</compoundname>
    <includes refid="a00248" local="no">ikarus/solver/linearsolver/linearsolver.hh</includes>
    <innerclass refid="a01404" prot="private">Ikarus::LinearSolverTemplate::SolverBase</innerclass>
    <innerclass refid="a01408" prot="private">Ikarus::LinearSolverTemplate::SolverImpl</innerclass>
    <templateparamlist>
      <param>
        <type>typename ScalarType</type>
        <defval>double</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a01400_1a374226b59baa30615d574bdd7ec230c8" prot="public" static="no">
        <type>Eigen::SparseMatrix&lt; ScalarType &gt;</type>
        <definition>using Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SparseMatrixType =  Eigen::SparseMatrix&lt;ScalarType&gt;</definition>
        <argsstring></argsstring>
        <name>SparseMatrixType</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SparseMatrixType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="64" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01400_1a878cccde0e595d7b0f7d6a2188aeeb31" prot="public" static="no">
        <type>Eigen::MatrixX&lt; ScalarType &gt;</type>
        <definition>using Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::DenseMatrixType =  Eigen::MatrixX&lt;ScalarType&gt;</definition>
        <argsstring></argsstring>
        <name>DenseMatrixType</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::DenseMatrixType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="65" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01400_1ac47436d94620129966977ae11667d89d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; SolverBase &gt;</type>
        <definition>std::unique_ptr&lt;SolverBase&gt; Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solverimpl</definition>
        <argsstring></argsstring>
        <name>solverimpl</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solverimpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="171" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01400_1adbf34cc94e01a4613bd55b922722fe5e" prot="private" static="no" mutable="no">
        <type><ref refid="a00316_1a731a9ee6621f91193c15f31b9a399906" kindref="member">SolverTypeTag</ref></type>
        <definition>SolverTypeTag Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solverTypeTag</definition>
        <argsstring></argsstring>
        <name>solverTypeTag</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solverTypeTag</qualifiedname>
        <initializer>{<ref refid="a00316_1a731a9ee6621f91193c15f31b9a399906a334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">SolverTypeTag::none</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="172" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01400_1a477e8cefcd049db15451e765fcef4d76" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::LinearSolverTemplate</definition>
        <argsstring>(const SolverTypeTag &amp;p_solverTypeTag)</argsstring>
        <name>LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::LinearSolverTemplate</qualifiedname>
        <param>
          <type>const <ref refid="a00316_1a731a9ee6621f91193c15f31b9a399906" kindref="member">SolverTypeTag</ref> &amp;</type>
          <declname>p_solverTypeTag</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_solverTypeTag</parametername>
</parameternamelist>
<parameterdescription>
<para>The solver type tag representing the type of the linear solver. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="71" column="14"/>
      </memberdef>
      <memberdef kind="function" id="a01400_1af2696f3af9722c49e0a828f2e31d8622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::~LinearSolverTemplate</definition>
        <argsstring>()=default</argsstring>
        <name>~LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::~LinearSolverTemplate</qualifiedname>
        <briefdescription>
<para>Destructor for <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="76" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a01400_1ac7a43c5219405e5a5e5295f18525c54e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
        <definition>LinearSolverTemplate &amp; Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::operator=</definition>
        <argsstring>(const LinearSolverTemplate &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::operator=</qualifiedname>
        <param>
          <type>const <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the assigned <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="83" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="a01400_1a8510a3ec009ad9680ad7dcc72f357cc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::LinearSolverTemplate</definition>
        <argsstring>(const LinearSolverTemplate &amp;other)</argsstring>
        <name>LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::LinearSolverTemplate</qualifiedname>
        <param>
          <type>const <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="92" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="92" bodyend="92"/>
        <referencedby refid="a01400_1a8510a3ec009ad9680ad7dcc72f357cc9" compoundref="a00248" startline="92" endline="92">Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::LinearSolverTemplate</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01400_1ad37d02209b2f59e00cd19cc38ec29a70" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::LinearSolverTemplate</definition>
        <argsstring>(LinearSolverTemplate &amp;&amp;other) noexcept=default</argsstring>
        <name>LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::LinearSolverTemplate</qualifiedname>
        <param>
          <type><ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="97" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a01400_1a2aafcf7d9b1f801b236097ca067c9b80" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
        <definition>LinearSolverTemplate &amp; Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::operator=</definition>
        <argsstring>(LinearSolverTemplate &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::operator=</qualifiedname>
        <param>
          <type><ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the assigned <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="103" column="26"/>
      </memberdef>
      <memberdef kind="function" id="a01400_1a347fcf892a32d3f382cebe8a09fcb86f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type><ref refid="a01400" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
        <definition>LinearSolverTemplate &amp; Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::compute</definition>
        <argsstring>(const MatrixType &amp;A)</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::compute</qualifiedname>
        <param>
          <type>const MatrixType &amp;</type>
          <declname>A</declname>
        </param>
    <requiresclause>std::is_same_v&lt;MatrixType, DenseMatrixType&gt; || std::is_same_v&lt;MatrixType, SparseMatrixType&gt;    </requiresclause>
        <briefdescription>
<para>Compute the factorization of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatrixType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix (DenseMatrixType or SparseMatrixType). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix for factorization. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the <ref refid="a01400" kindref="compound">LinearSolverTemplate</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="183" column="33" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="183" bodyend="186"/>
        <referencedby refid="a01400_1a347fcf892a32d3f382cebe8a09fcb86f" compoundref="a00248" startline="183" endline="186">Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::compute</referencedby>
        <referencedby refid="a01400_1a2aafcf7d9b1f801b236097ca067c9b80">Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01400_1a33237d5e237bf2272d2c58c648eda5a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::analyzePattern</definition>
        <argsstring>(const MatrixType &amp;A)</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::analyzePattern</qualifiedname>
        <param>
          <type>const MatrixType &amp;</type>
          <declname>A</declname>
        </param>
    <requiresclause>std::is_same_v&lt;MatrixType, DenseMatrixType&gt; || std::is_same_v&lt;MatrixType, SparseMatrixType&gt;    </requiresclause>
        <briefdescription>
<para>Analyze the pattern of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatrixType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix (DenseMatrixType or SparseMatrixType). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix for pattern analysis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="195" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="195" bodyend="195"/>
        <referencedby refid="a01400_1a2aafcf7d9b1f801b236097ca067c9b80">Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01400_1ad9515d35c770a9d2a087a20593af5d85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::factorize</definition>
        <argsstring>(const MatrixType &amp;A)</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::factorize</qualifiedname>
        <param>
          <type>const MatrixType &amp;</type>
          <declname>A</declname>
        </param>
    <requiresclause>std::is_same_v&lt;MatrixType, DenseMatrixType&gt; || std::is_same_v&lt;MatrixType, SparseMatrixType&gt;    </requiresclause>
        <briefdescription>
<para>Factorize the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatrixType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix (DenseMatrixType or SparseMatrixType). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix for factorization. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="204" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="204" bodyend="204"/>
        <referencedby refid="a01400_1a2aafcf7d9b1f801b236097ca067c9b80">Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01400_1a4ddf79d3353ecc1c7e7a25c7e249cb78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solve</definition>
        <argsstring>(Eigen::VectorX&lt; ScalarType &gt; &amp;x, const Eigen::VectorX&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorX&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solve the linear system for a vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The solution vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand side vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="211" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="211" bodyend="211"/>
        <referencedby refid="a01400_1a2aafcf7d9b1f801b236097ca067c9b80">Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01400_1af33f3862045be96e92dd09a954260857" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX3&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX3&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX3&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX3&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solve the linear system for a <computeroutput>n</computeroutput> times <computeroutput>3</computeroutput> matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The solution matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand side matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="218" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="a01400_1a77afedeea7ca3cc8ee541aade55e859b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX2&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX2&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX2&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX2&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solve the linear system for a <computeroutput>n</computeroutput> times <computeroutput>2</computeroutput> matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The solution matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand side matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="224" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="a01400_1a0db3eb266a56bb16e2f4fbd22a66b14d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solve the linear system for a <computeroutput>n</computeroutput> times <computeroutput>n</computeroutput> matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The solution matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand side matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="231" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="231" bodyend="231"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A type-erased class which wraps most of the linear solvers available in <ref refid="a00323" kindref="compound">Eigen</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the linear system (default: double). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;</label>
        <link refid="a01400"/>
      </node>
      <node id="2">
        <label>Ikarus::LinearSolverTemplate&lt; double &gt;</label>
        <link refid="a01400"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="62" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="62" bodyend="232"/>
    <listofallmembers>
      <member refid="a01400_1a33237d5e237bf2272d2c58c648eda5a1" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>analyzePattern</name></member>
      <member refid="a01400_1a347fcf892a32d3f382cebe8a09fcb86f" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>compute</name></member>
      <member refid="a01400_1a878cccde0e595d7b0f7d6a2188aeeb31" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>DenseMatrixType</name></member>
      <member refid="a01400_1ad9515d35c770a9d2a087a20593af5d85" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>factorize</name></member>
      <member refid="a01400_1a477e8cefcd049db15451e765fcef4d76" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>LinearSolverTemplate</name></member>
      <member refid="a01400_1a8510a3ec009ad9680ad7dcc72f357cc9" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>LinearSolverTemplate</name></member>
      <member refid="a01400_1ad37d02209b2f59e00cd19cc38ec29a70" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>LinearSolverTemplate</name></member>
      <member refid="a01400_1ac7a43c5219405e5a5e5295f18525c54e" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>operator=</name></member>
      <member refid="a01400_1a2aafcf7d9b1f801b236097ca067c9b80" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>operator=</name></member>
      <member refid="a01400_1a4ddf79d3353ecc1c7e7a25c7e249cb78" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="a01400_1af33f3862045be96e92dd09a954260857" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="a01400_1a77afedeea7ca3cc8ee541aade55e859b" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="a01400_1a0db3eb266a56bb16e2f4fbd22a66b14d" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="a01400_1ac47436d94620129966977ae11667d89d" prot="private" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solverimpl</name></member>
      <member refid="a01400_1adbf34cc94e01a4613bd55b922722fe5e" prot="private" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solverTypeTag</name></member>
      <member refid="a01400_1a374226b59baa30615d574bdd7ec230c8" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>SparseMatrixType</name></member>
      <member refid="a01400_1af2696f3af9722c49e0a828f2e31d8622" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>~LinearSolverTemplate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
