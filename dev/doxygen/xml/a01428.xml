<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01428" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::LinearSolverTemplate</compoundname>
    <includes refid="a00242" local="no">ikarus/solver/linearsolver/linearsolver.hh</includes>
    <innerclass refid="a01432" prot="private">Ikarus::LinearSolverTemplate::SolverBase</innerclass>
    <innerclass refid="a01436" prot="private">Ikarus::LinearSolverTemplate::SolverImpl</innerclass>
    <templateparamlist>
      <param>
        <type>typename ST</type>
        <defval>double</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a01428_1ab222fb68571b860471b41e2c707d5637" prot="public" static="no">
        <type>ST</type>
        <definition>using Ikarus::LinearSolverTemplate&lt; ST &gt;::ScalarType =  ST</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::ScalarType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="70" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01428_1ab653f5550c90008600c77abe785963a0" prot="public" static="no">
        <type>Eigen::SparseMatrix&lt; <ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt;</type>
        <definition>using Ikarus::LinearSolverTemplate&lt; ST &gt;::SparseMatrixType =  Eigen::SparseMatrix&lt;ScalarType&gt;</definition>
        <argsstring></argsstring>
        <name>SparseMatrixType</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SparseMatrixType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="71" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01428_1a9f52825b9226c080976fa759fc0f5a1b" prot="public" static="no">
        <type>Eigen::MatrixX&lt; <ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt;</type>
        <definition>using Ikarus::LinearSolverTemplate&lt; ST &gt;::DenseMatrixType =  Eigen::MatrixX&lt;ScalarType&gt;</definition>
        <argsstring></argsstring>
        <name>DenseMatrixType</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::DenseMatrixType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="72" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01428_1ace118b1230f81ed8bff60e92a1265b24" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; SolverBase &gt;</type>
        <definition>std::unique_ptr&lt;SolverBase&gt; Ikarus::LinearSolverTemplate&lt; ST &gt;::solverimpl_</definition>
        <argsstring></argsstring>
        <name>solverimpl_</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solverimpl_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="178" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01428_1ae91eb6b7878b8f2ab9c9a2d222d454a5" prot="private" static="no" mutable="no">
        <type><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906" kindref="member">SolverTypeTag</ref></type>
        <definition>SolverTypeTag Ikarus::LinearSolverTemplate&lt; ST &gt;::solverTypeTag_</definition>
        <argsstring></argsstring>
        <name>solverTypeTag_</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solverTypeTag_</qualifiedname>
        <initializer>{<ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">SolverTypeTag::none</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="179" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="179" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01428_1a2d2c1ea4b5bdb1642442e94c64e03aef" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ST &gt;::LinearSolverTemplate</definition>
        <argsstring>(const SolverTypeTag &amp;solverTypeTag)</argsstring>
        <name>LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::LinearSolverTemplate</qualifiedname>
        <param>
          <type>const <ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906" kindref="member">SolverTypeTag</ref> &amp;</type>
          <declname>solverTypeTag</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solverTypeTag</parametername>
</parameternamelist>
<parameterdescription>
<para>The solver type tag representing the type of the linear solver. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="78" column="12"/>
      </memberdef>
      <memberdef kind="function" id="a01428_1a683577ea4ceced6e7e74a6a37180c279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ST &gt;::~LinearSolverTemplate</definition>
        <argsstring>()=default</argsstring>
        <name>~LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::~LinearSolverTemplate</qualifiedname>
        <briefdescription>
<para>Destructor for <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="83" column="3"/>
      </memberdef>
      <memberdef kind="function" id="a01428_1ab08cf628010af09d0de6155ac8da25a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
        <definition>LinearSolverTemplate &amp; Ikarus::LinearSolverTemplate&lt; ST &gt;::operator=</definition>
        <argsstring>(const LinearSolverTemplate &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::operator=</qualifiedname>
        <param>
          <type>const <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the assigned <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="90" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="a01428_1a5e6a040954d7452eed8cb74d08b7e1d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ST &gt;::LinearSolverTemplate</definition>
        <argsstring>(const LinearSolverTemplate &amp;other)</argsstring>
        <name>LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::LinearSolverTemplate</qualifiedname>
        <param>
          <type>const <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="99" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="99" bodyend="99"/>
        <referencedby refid="a01428_1a5e6a040954d7452eed8cb74d08b7e1d5" compoundref="a00242" startline="99" endline="99">Ikarus::LinearSolverTemplate&lt; ST &gt;::LinearSolverTemplate</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01428_1a77210b698dab50ebe8a001b5c086ebce" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ST &gt;::LinearSolverTemplate</definition>
        <argsstring>(LinearSolverTemplate &amp;&amp;other) noexcept=default</argsstring>
        <name>LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::LinearSolverTemplate</qualifiedname>
        <param>
          <type><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="104" column="3"/>
      </memberdef>
      <memberdef kind="function" id="a01428_1a38ea395ad12b0d6056a8f5845d483276" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
        <definition>LinearSolverTemplate &amp; Ikarus::LinearSolverTemplate&lt; ST &gt;::operator=</definition>
        <argsstring>(LinearSolverTemplate &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::operator=</qualifiedname>
        <param>
          <type><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the assigned <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="110" column="24"/>
      </memberdef>
      <memberdef kind="function" id="a01428_1a1c92808f8c8139bb32f50740f0bcb783" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
        <definition>LinearSolverTemplate &amp; Ikarus::LinearSolverTemplate&lt; ST &gt;::compute</definition>
        <argsstring>(const MatrixType &amp;A)</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::compute</qualifiedname>
        <param>
          <type>const MatrixType &amp;</type>
          <declname>A</declname>
        </param>
    <requiresclause>std::is_same_v&lt;MatrixType, DenseMatrixType&gt; || std::is_same_v&lt;MatrixType, SparseMatrixType&gt;    </requiresclause>
        <briefdescription>
<para>Compute the factorization of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatrixType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix (DenseMatrixType or SparseMatrixType). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix for factorization. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the <ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="190" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="190" bodyend="193"/>
        <referencedby refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" compoundref="a00242" startline="190" endline="193">Ikarus::LinearSolverTemplate&lt; ST &gt;::compute</referencedby>
        <referencedby refid="a01428_1a38ea395ad12b0d6056a8f5845d483276">Ikarus::LinearSolverTemplate&lt; ST &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01428_1a771b39a199d35745e0a1cbdec03db762" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::analyzePattern</definition>
        <argsstring>(const MatrixType &amp;A)</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::analyzePattern</qualifiedname>
        <param>
          <type>const MatrixType &amp;</type>
          <declname>A</declname>
        </param>
    <requiresclause>std::is_same_v&lt;MatrixType, DenseMatrixType&gt; || std::is_same_v&lt;MatrixType, SparseMatrixType&gt;    </requiresclause>
        <briefdescription>
<para>Analyze the pattern of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatrixType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix (DenseMatrixType or SparseMatrixType). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix for pattern analysis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="202" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="202" bodyend="204"/>
        <referencedby refid="a01428_1a38ea395ad12b0d6056a8f5845d483276">Ikarus::LinearSolverTemplate&lt; ST &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01428_1ad19ae7c98843dd8ecad6586003ed3b5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::factorize</definition>
        <argsstring>(const MatrixType &amp;A)</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::factorize</qualifiedname>
        <param>
          <type>const MatrixType &amp;</type>
          <declname>A</declname>
        </param>
    <requiresclause>std::is_same_v&lt;MatrixType, DenseMatrixType&gt; || std::is_same_v&lt;MatrixType, SparseMatrixType&gt;    </requiresclause>
        <briefdescription>
<para>Factorize the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatrixType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix (DenseMatrixType or SparseMatrixType). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix for factorization. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="213" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="213" bodyend="215"/>
        <referencedby refid="a01428_1a38ea395ad12b0d6056a8f5845d483276">Ikarus::LinearSolverTemplate&lt; ST &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01428_1aee8cb48155fb74e976d6ccdef6313dac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::solve</definition>
        <argsstring>(Eigen::VectorX&lt; ScalarType &gt; &amp;x, const Eigen::VectorX&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::VectorX&lt; <ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorX&lt; <ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solve the linear system for a vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The solution vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand side vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="222" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="222" bodyend="222"/>
        <referencedby refid="a01428_1a38ea395ad12b0d6056a8f5845d483276">Ikarus::LinearSolverTemplate&lt; ST &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01428_1a6313a4e4112c84af47156be3463acabc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX3&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX3&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX3&lt; <ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX3&lt; <ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solve the linear system for a <computeroutput>n</computeroutput> times <computeroutput>3</computeroutput> matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The solution matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand side matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="229" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="a01428_1aef63652936885765e62b9cca984e347a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX2&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX2&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX2&lt; <ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX2&lt; <ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solve the linear system for a <computeroutput>n</computeroutput> times <computeroutput>2</computeroutput> matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The solution matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand side matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="235" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="a01428_1a6cd3b6346a6299ca7e4c77324e271c63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ST &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX&lt; <ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX&lt; <ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solve the linear system for a <computeroutput>n</computeroutput> times <computeroutput>n</computeroutput> matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The solution matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand side matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="242" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="242" bodyend="242"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A type-erased class which wraps most of the linear solvers available in <ref refid="a00338" kindref="compound">Eigen</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ST</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the linear system (default: double). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Ikarus::LinearSolverTemplate&lt; ST &gt;</label>
        <link refid="a01428"/>
      </node>
      <node id="2">
        <label>Ikarus::LinearSolverTemplate&lt; double &gt;</label>
        <link refid="a01428"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="67" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="68" bodyend="243"/>
    <listofallmembers>
      <member refid="a01428_1a771b39a199d35745e0a1cbdec03db762" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>analyzePattern</name></member>
      <member refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>compute</name></member>
      <member refid="a01428_1a9f52825b9226c080976fa759fc0f5a1b" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>DenseMatrixType</name></member>
      <member refid="a01428_1ad19ae7c98843dd8ecad6586003ed3b5d" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>factorize</name></member>
      <member refid="a01428_1a2d2c1ea4b5bdb1642442e94c64e03aef" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>LinearSolverTemplate</name></member>
      <member refid="a01428_1a5e6a040954d7452eed8cb74d08b7e1d5" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>LinearSolverTemplate</name></member>
      <member refid="a01428_1a77210b698dab50ebe8a001b5c086ebce" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>LinearSolverTemplate</name></member>
      <member refid="a01428_1ab08cf628010af09d0de6155ac8da25a6" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>operator=</name></member>
      <member refid="a01428_1a38ea395ad12b0d6056a8f5845d483276" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>operator=</name></member>
      <member refid="a01428_1ab222fb68571b860471b41e2c707d5637" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>ScalarType</name></member>
      <member refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="a01428_1a6313a4e4112c84af47156be3463acabc" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="a01428_1aef63652936885765e62b9cca984e347a" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="a01428_1a6cd3b6346a6299ca7e4c77324e271c63" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="a01428_1ace118b1230f81ed8bff60e92a1265b24" prot="private" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solverimpl_</name></member>
      <member refid="a01428_1ae91eb6b7878b8f2ab9c9a2d222d454a5" prot="private" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solverTypeTag_</name></member>
      <member refid="a01428_1ab653f5550c90008600c77abe785963a0" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>SparseMatrixType</name></member>
      <member refid="a01428_1a683577ea4ceced6e7e74a6a37180c279" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>~LinearSolverTemplate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
