<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01444" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::TrustRegion</compoundname>
    <basecompoundref refid="a01568" prot="public" virt="non-virtual">Ikarus::IObservable&lt; NonLinearSolverMessages &gt;</basecompoundref>
    <includes refid="a00239" local="no">ikarus/solver/nonlinearsolver/trustregion.hh</includes>
    <templateparamlist>
      <param>
        <type>typename NonLinearOperatorImpl</type>
      </param>
      <param>
        <type><ref refid="a00316_1ace28d4868cfc647491f7938f04ef6c66" kindref="member">PreConditioner</ref></type>
        <declname>preConditioner</declname>
        <defname>preConditioner</defname>
        <defval><ref refid="a00316_1ace28d4868cfc647491f7938f04ef6c66a7a24b184ba388b8e327feb98dbe168ff" kindref="member">PreConditioner::IncompleteCholesky</ref></defval>
      </param>
      <param>
        <type>typename UpdateFunctionTypeImpl</type>
        <defval><ref refid="a01484" kindref="compound">utils::UpdateDefault</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a01444_1a8166e85a9638e02fea6da29aba9cce58" prot="public" static="no">
        <type>typename NonLinearOperatorImpl::template ParameterValue&lt; 0 &gt;</type>
        <definition>using Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::ValueType =  typename NonLinearOperatorImpl::template ParameterValue&lt;0&gt;</definition>
        <argsstring></argsstring>
        <name>ValueType</name>
        <qualifiedname>Ikarus::TrustRegion::ValueType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of the parameter vector of the nonlinear operator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="125" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01444_1aadc89cc68a82db3b7e8f25ce032bd71f" prot="public" static="no">
        <type>typename NonLinearOperatorImpl::DerivativeType</type>
        <definition>using Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::CorrectionType =  typename NonLinearOperatorImpl::DerivativeType</definition>
        <argsstring></argsstring>
        <name>CorrectionType</name>
        <qualifiedname>Ikarus::TrustRegion::CorrectionType</qualifiedname>
        <briefdescription>
<para>Type of the correction of x += deltaX. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="127" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01444_1a5609028d2f63488106e6ae4a76b204c3" prot="public" static="no">
        <type>UpdateFunctionTypeImpl</type>
        <definition>using Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::UpdateFunctionType =  UpdateFunctionTypeImpl</definition>
        <argsstring></argsstring>
        <name>UpdateFunctionType</name>
        <qualifiedname>Ikarus::TrustRegion::UpdateFunctionType</qualifiedname>
        <briefdescription>
<para>Type of the update function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="128" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01444_1a9939674ab4cb35d9eaca8130cf9326ac" prot="public" static="no">
        <type>NonLinearOperatorImpl</type>
        <definition>using Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::NonLinearOperator =  NonLinearOperatorImpl</definition>
        <argsstring></argsstring>
        <name>NonLinearOperator</name>
        <qualifiedname>Ikarus::TrustRegion::NonLinearOperator</qualifiedname>
        <briefdescription>
<para>Type of the non-linear operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="130" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01444_1a9dfa2682ded15aa0978bfd927ca7b2a8" prot="public" static="no">
        <type>std::remove_cvref_t&lt; typename NonLinearOperatorImpl::template FunctionReturnType&lt; 0 &gt; &gt;</type>
        <definition>using Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::ScalarType =  std::remove_cvref_t&lt;typename NonLinearOperatorImpl::template FunctionReturnType&lt;0&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <qualifiedname>Ikarus::TrustRegion::ScalarType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of the scalar cost </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="132" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01444_1aeaeb46919450dd6c83bec63deb3d9568" prot="public" static="no">
        <type>std::remove_cvref_t&lt; typename NonLinearOperatorImpl::template FunctionReturnType&lt; 2 &gt; &gt;</type>
        <definition>using Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::MatrixType =  std::remove_cvref_t&lt;typename NonLinearOperatorImpl::template FunctionReturnType&lt;2&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>MatrixType</name>
        <qualifiedname>Ikarus::TrustRegion::MatrixType</qualifiedname>
        <briefdescription>
<para>Type of the Hessian. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="136" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="a01444_1afe2d72092b206b2a73d5147e624028e0" prot="private" static="no">
        <type>std::conditional_t&lt; preConditioner==<ref refid="a00316_1ace28d4868cfc647491f7938f04ef6c66a7a93111b975ec3c3824eab230f3ec608" kindref="member">PreConditioner::IdentityPreconditioner</ref>, Eigen::IdentityPreconditioner, std::conditional_t&lt; preConditioner==<ref refid="a00316_1ace28d4868cfc647491f7938f04ef6c66a3c6b5404db3b7bf45a0302f376a53afc" kindref="member">PreConditioner::DiagonalPreconditioner</ref>, typename Eigen::DiagonalPreconditioner&lt; <ref refid="a01444_1a9dfa2682ded15aa0978bfd927ca7b2a8" kindref="member">ScalarType</ref> &gt;, typename Eigen::IncompleteCholesky&lt; <ref refid="a01444_1a9dfa2682ded15aa0978bfd927ca7b2a8" kindref="member">ScalarType</ref> &gt; &gt; &gt;</type>
        <definition>using Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::PreConditionerType =  std::conditional_t&lt;preConditioner == PreConditioner::IdentityPreconditioner, Eigen::IdentityPreconditioner, std::conditional_t&lt;preConditioner == PreConditioner::DiagonalPreconditioner, typename Eigen::DiagonalPreconditioner&lt;ScalarType&gt;, typename Eigen::IncompleteCholesky&lt;ScalarType&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>PreConditionerType</name>
        <qualifiedname>Ikarus::TrustRegion::PreConditionerType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="469" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="473" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01444_1aeb6c45e1b33d704a4be08d4510f6370d" prot="private" static="no" mutable="no">
        <type>NonLinearOperatorImpl</type>
        <definition>NonLinearOperatorImpl Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::nonLinearOperator_</definition>
        <argsstring></argsstring>
        <name>nonLinearOperator_</name>
        <qualifiedname>Ikarus::TrustRegion::nonLinearOperator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="453" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1a1b22fe5c73085804e28df9574b32e034" prot="private" static="no" mutable="no">
        <type><ref refid="a01444_1a5609028d2f63488106e6ae4a76b204c3" kindref="member">UpdateFunctionType</ref></type>
        <definition>UpdateFunctionType Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::updateFunction</definition>
        <argsstring></argsstring>
        <name>updateFunction</name>
        <qualifiedname>Ikarus::TrustRegion::updateFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="454" column="22" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1ad356769f1bcfa5f6c5fcfe6866666fe6" prot="private" static="no" mutable="no">
        <type>NonLinearOperatorImpl::template ParameterValue&lt; 0 &gt;</type>
        <definition>NonLinearOperatorImpl::template ParameterValue&lt;0&gt; Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::xOld</definition>
        <argsstring></argsstring>
        <name>xOld</name>
        <qualifiedname>Ikarus::TrustRegion::xOld</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="455" column="59" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1a43c884b26c1c79882e6386f3ed2ae2fb" prot="private" static="no" mutable="no">
        <type><ref refid="a01444_1aadc89cc68a82db3b7e8f25ce032bd71f" kindref="member">CorrectionType</ref></type>
        <definition>CorrectionType Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::eta</definition>
        <argsstring></argsstring>
        <name>eta</name>
        <qualifiedname>Ikarus::TrustRegion::eta</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="456" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1a609ae95d103a52f2233db6550c98b4ac" prot="private" static="no" mutable="no">
        <type><ref refid="a01444_1aadc89cc68a82db3b7e8f25ce032bd71f" kindref="member">CorrectionType</ref></type>
        <definition>CorrectionType Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::Heta</definition>
        <argsstring></argsstring>
        <name>Heta</name>
        <qualifiedname>Ikarus::TrustRegion::Heta</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="457" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1a7d13c783e5d2191f92b6198f1483f49c" prot="private" static="no" mutable="no">
        <type><ref refid="a01432" kindref="compound">TrustRegionSettings</ref></type>
        <definition>TrustRegionSettings Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::options</definition>
        <argsstring></argsstring>
        <name>options</name>
        <qualifiedname>Ikarus::TrustRegion::options</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="458" column="23" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1a73474ac21f328b71c7c222e582847df9" prot="private" static="no" mutable="no">
        <type><ref refid="a01436" kindref="compound">AlgoInfo</ref></type>
        <definition>AlgoInfo Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::info</definition>
        <argsstring></argsstring>
        <name>info</name>
        <qualifiedname>Ikarus::TrustRegion::info</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="459" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1a062751abe14e57b07c2c6c5341739892" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::choleskyInitialShift</definition>
        <argsstring></argsstring>
        <name>choleskyInitialShift</name>
        <qualifiedname>Ikarus::TrustRegion::choleskyInitialShift</qualifiedname>
        <initializer>= 1e-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="460" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1a4047428f1732b053005ff1b01187714b" prot="private" static="no" mutable="no">
        <type><ref refid="a01388" kindref="compound">Eigen::TCGInfo</ref>&lt; double &gt;</type>
        <definition>Eigen::TCGInfo&lt;double&gt; Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::innerInfo</definition>
        <argsstring></argsstring>
        <name>innerInfo</name>
        <qualifiedname>Ikarus::TrustRegion::innerInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="461" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1ac022e2dc3e922732045e5072a2c2d5ac" prot="private" static="no" mutable="no">
        <type><ref refid="a01440" kindref="compound">Stats</ref></type>
        <definition>Stats Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::stats</definition>
        <argsstring></argsstring>
        <name>stats</name>
        <qualifiedname>Ikarus::TrustRegion::stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="462" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1a7022c74bd4a9594da5c7b52a5c13860b" prot="private" static="no" mutable="no">
        <type>std::array&lt; std::string, 6 &gt;</type>
        <definition>std::array&lt;std::string, 6&gt; Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::tcg_stop_reason</definition>
        <argsstring></argsstring>
        <name>tcg_stop_reason</name>
        <qualifiedname>Ikarus::TrustRegion::tcg_stop_reason</qualifiedname>
        <initializer>{
      {&quot;negative curvature&quot;, &quot;exceeded trust region&quot;, &quot;reached target residual-kappa (linear)&quot;,
       &quot;reached target residual-theta (superlinear)&quot;, &quot;maximum inner iterations&quot;, &quot;model increased&quot;}
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="464" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01444_1a9404dd7ddd92ce621b3758780a0a19ba" prot="private" static="no" mutable="no">
        <type><ref refid="a01392" kindref="compound">Eigen::TruncatedConjugateGradient</ref>&lt; <ref refid="a01444_1aeaeb46919450dd6c83bec63deb3d9568" kindref="member">MatrixType</ref>, Eigen::Lower|Eigen::Upper, PreConditionerType &gt;</type>
        <definition>Eigen::TruncatedConjugateGradient&lt;MatrixType, Eigen::Lower | Eigen::Upper, PreConditionerType&gt; Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::truncatedConjugateGradient</definition>
        <argsstring></argsstring>
        <name>truncatedConjugateGradient</name>
        <qualifiedname>Ikarus::TrustRegion::truncatedConjugateGradient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="475" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="475" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="a01444_1a67534933555e880ca6979e50e7bf7395" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::eps</definition>
        <argsstring></argsstring>
        <name>eps</name>
        <qualifiedname>Ikarus::TrustRegion::eps</qualifiedname>
        <initializer>= 0.0001220703125</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="463" column="27" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="463" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01444_1af8b7745d1eea75d39e30c5e0a9f37865" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::TrustRegion</definition>
        <argsstring>(const NonLinearOperatorImpl &amp;p_nonLinearOperator, UpdateFunctionTypeImpl p_updateFunction={})</argsstring>
        <name>TrustRegion</name>
        <qualifiedname>Ikarus::TrustRegion::TrustRegion</qualifiedname>
        <param>
          <type>const NonLinearOperatorImpl &amp;</type>
          <declname>p_nonLinearOperator</declname>
        </param>
        <param>
          <type>UpdateFunctionTypeImpl</type>
          <declname>p_updateFunction</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="a01444" kindref="compound">TrustRegion</ref> solver instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_nonLinearOperator</parametername>
</parameternamelist>
<parameterdescription>
<para>Nonlinear operator to solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_updateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Update function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="144" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="144" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="a01444_1a1f238e6b0544ef8dc6f1dc3661cbc333" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::setup</definition>
        <argsstring>(const TrustRegionSettings &amp;p_settings)</argsstring>
        <name>setup</name>
        <qualifiedname>Ikarus::TrustRegion::setup</qualifiedname>
        <param>
          <type>const <ref refid="a01432" kindref="compound">TrustRegionSettings</ref> &amp;</type>
          <declname>p_settings</declname>
        </param>
        <briefdescription>
<para>Sets up the <ref refid="a01444" kindref="compound">TrustRegion</ref> solver with the provided settings and checks feasibility. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_settings</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a01432" kindref="compound">TrustRegionSettings</ref> containing the solver configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="156" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="a01444_1a48fe86e2f5de6676bcebe8ffd8a8feeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SolutionType</type>
            <defval>NoPredictor</defval>
          </param>
        </templateparamlist>
        <type><ref refid="a01428" kindref="compound">NonLinearSolverInformation</ref></type>
        <definition>NonLinearSolverInformation Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::solve</definition>
        <argsstring>(const SolutionType &amp;dx_predictor=NoPredictor{})</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::TrustRegion::solve</qualifiedname>
        <param>
          <type>const SolutionType &amp;</type>
          <declname>dx_predictor</declname>
          <defval>NoPredictor{}</defval>
        </param>
    <requiresclause>std::is_same_v&lt;SolutionType, NoPredictor&gt; || std::is_convertible_v&lt;SolutionType, CorrectionType&gt;    </requiresclause>
        <briefdescription>
<para>Solves the nonlinear optimization problem using the <ref refid="a01444" kindref="compound">TrustRegion</ref> algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SolutionType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the solution predictor (default is NoPredictor). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dx_predictor</parametername>
</parameternamelist>
<parameterdescription>
<para>Solution predictor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="a01428" kindref="compound">NonLinearSolverInformation</ref> containing information about the solver result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="177" column="30" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="177" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="a01444_1a0948ebd7e2302b96192e3bc47fd419e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto &amp; Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::nonLinearOperator</definition>
        <argsstring>()</argsstring>
        <name>nonLinearOperator</name>
        <qualifiedname>Ikarus::TrustRegion::nonLinearOperator</qualifiedname>
        <briefdescription>
<para>Access the nonlinear operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to the nonlinear operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="364" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="364" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1ae182a206a72de6bc4585152d32332349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::subscribe</definition>
        <argsstring>(NonLinearSolverMessages message, std::shared_ptr&lt; IObserver&lt; NonLinearSolverMessages &gt; &gt; observer)</argsstring>
        <name>subscribe</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::subscribe</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01564" kindref="compound">IObserver</ref>&lt; <ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to subscribe to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="140" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a13bd8d73b485186680f640786e2682e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::subscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; NonLinearSolverMessages &gt; &gt; observer)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::subscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01564" kindref="compound">IObserver</ref>&lt; <ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="145" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a026462a1a050728e37bc24e33d2edd9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::subscribeAll</definition>
        <argsstring>(std::initializer_list&lt; std::shared_ptr&lt; IObserver&lt; NonLinearSolverMessages &gt; &gt; &gt; observers)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::subscribeAll</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::shared_ptr&lt; <ref refid="a01564" kindref="compound">IObserver</ref>&lt; <ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref> &gt; &gt; &gt;</type>
          <declname>observers</declname>
        </param>
        <briefdescription>
<para>Subscribe multiple observers to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observers to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="150" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="237" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a49622286d2b15f0b8a2b25275e6bc771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::unSubscribe</definition>
        <argsstring>(NonLinearSolverMessages message, std::shared_ptr&lt; IObserver&lt; NonLinearSolverMessages &gt; &gt; observer)</argsstring>
        <name>unSubscribe</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::unSubscribe</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01564" kindref="compound">IObserver</ref>&lt; <ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to unsubscribe from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="156" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a5c20f7eab2233d085071a4fd3b44cbda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::unSubscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; NonLinearSolverMessages &gt; &gt; observer)</argsstring>
        <name>unSubscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::unSubscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01564" kindref="compound">IObserver</ref>&lt; <ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="161" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="166" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1ac035ba934c33e090c4a45128ac13f190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, ScalarType val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="a01444_1a9dfa2682ded15aa0978bfd927ca7b2a8" kindref="member">ScalarType</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a floating-point value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the floating-point value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating-point value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="175" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, int val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="182" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="271" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a2f93322aa7327069dd4469983933bd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, const std::string &amp;val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="189" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="278" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1ae0c6cec757e540f22b65fce1f782e380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, int val1, double val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer and a double value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="197" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a72e3156874ce81a1c7548b9f74db522c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, int val1, const std::string &amp;val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value and a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="205" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="292" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1ac72b261cd2af7f59e98f1504814bc785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; NonLinearSolverMessages  &gt;::notify</definition>
        <argsstring>(NonLinearSolverMessages message, Eigen::VectorX&lt; ScalarType &gt; vec)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga662b2b6a80547adf4b9ce8b30d87fab5" kindref="member">NonLinearSolverMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>Eigen::VectorX&lt; <ref refid="a01444_1a9dfa2682ded15aa0978bfd927ca7b2a8" kindref="member">ScalarType</ref> &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an Eigen::VectorX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements in the Eigen::VectorX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::VectorX to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="214" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="300" bodyend="304"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="a01444_1a9b73f3d66abf57c3fcd12ea777285541" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::logState</definition>
        <argsstring>() const</argsstring>
        <name>logState</name>
        <qualifiedname>Ikarus::TrustRegion::logState</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="367" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="367" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="a01444_1a4fe154da268b6833e08952bf2a09130b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::logFinalState</definition>
        <argsstring>()</argsstring>
        <name>logFinalState</name>
        <qualifiedname>Ikarus::TrustRegion::logFinalState</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="376" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="376" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="a01444_1aeae974e7ae4b77c0e70a8a92e961e315" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const auto &amp;</type>
        <definition>const auto &amp; Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::energy</definition>
        <argsstring>()</argsstring>
        <name>energy</name>
        <qualifiedname>Ikarus::TrustRegion::energy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="382" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="a01444_1acf5c9e8072acf0f5eda58de1b90693db" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const auto &amp;</type>
        <definition>const auto &amp; Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::gradient</definition>
        <argsstring>()</argsstring>
        <name>gradient</name>
        <qualifiedname>Ikarus::TrustRegion::gradient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="383" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="383" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="a01444_1accd42eb44cd997ad092f89ffe8be8590" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const auto &amp;</type>
        <definition>const auto &amp; Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::hessian</definition>
        <argsstring>()</argsstring>
        <name>hessian</name>
        <qualifiedname>Ikarus::TrustRegion::hessian</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="384" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="384" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="a01444_1a62180469d8f77fb493ba2be07b48931d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::stoppingCriterion</definition>
        <argsstring>()</argsstring>
        <name>stoppingCriterion</name>
        <qualifiedname>Ikarus::TrustRegion::stoppingCriterion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Gradient correction tolerance reached <linebreak/>
</para>
<para>Maximum Time reached <linebreak/>
</para>
<para>Maximum Iterations reached <linebreak/>
</para>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="386" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="386" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="a01444_1a9ec4827184af85f0098e776060f480e6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;::solveInnerProblem</definition>
        <argsstring>()</argsstring>
        <name>solveInnerProblem</name>
        <qualifiedname>Ikarus::TrustRegion::solveInnerProblem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="430" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="430" bodyend="451"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Trust Region solver for non-linear optimization problems. </para>
    </briefdescription>
    <detaileddescription>
<para>Refer to <ref refid="a02526_1CITEREF_trustregion" kindref="member">[2]</ref> for details of the algorithm.</para>
<para>This code is heavily inspired by the trust-region implementation of <ulink url="https://github.com/NicolasBoumal/manopt/blob/master/manopt/solvers/trustregions/trustregions.m">Manopt</ulink>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NonLinearOperatorImpl</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the nonlinear operator to solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preConditioner</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of preconditioner to use (default is IncompleteCholesky). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>UpdateFunctionTypeImpl</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the update function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;</label>
        <link refid="a01568"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; NonLinearSolverMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a01568"/>
      </node>
      <node id="1">
        <label>Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;</label>
        <link refid="a01444"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; NonLinearSolverMessages &gt;</label>
        <link refid="a01568"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; NonLinearSolverMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a01568"/>
      </node>
      <node id="1">
        <label>Ikarus::TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateFunctionTypeImpl &gt;</label>
        <link refid="a01444"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="122" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="123" bodyend="476"/>
    <listofallmembers>
      <member refid="a01444_1a062751abe14e57b07c2c6c5341739892" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>choleskyInitialShift</name></member>
      <member refid="a01444_1aadc89cc68a82db3b7e8f25ce032bd71f" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>CorrectionType</name></member>
      <member refid="a01444_1aeae974e7ae4b77c0e70a8a92e961e315" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>energy</name></member>
      <member refid="a01444_1a67534933555e880ca6979e50e7bf7395" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>eps</name></member>
      <member refid="a01444_1a43c884b26c1c79882e6386f3ed2ae2fb" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>eta</name></member>
      <member refid="a01444_1acf5c9e8072acf0f5eda58de1b90693db" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>gradient</name></member>
      <member refid="a01444_1accd42eb44cd997ad092f89ffe8be8590" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>hessian</name></member>
      <member refid="a01444_1a609ae95d103a52f2233db6550c98b4ac" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>Heta</name></member>
      <member refid="a01444_1a73474ac21f328b71c7c222e582847df9" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>info</name></member>
      <member refid="a01444_1a4047428f1732b053005ff1b01187714b" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>innerInfo</name></member>
      <member refid="a01568_1ac8058d5b1ebb462a10712ba598154e23" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>IObservable</name></member>
      <member refid="a01444_1a4fe154da268b6833e08952bf2a09130b" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>logFinalState</name></member>
      <member refid="a01444_1a9b73f3d66abf57c3fcd12ea777285541" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>logState</name></member>
      <member refid="a01444_1aeaeb46919450dd6c83bec63deb3d9568" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>MatrixType</name></member>
      <member refid="a01444_1a9939674ab4cb35d9eaca8130cf9326ac" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>NonLinearOperator</name></member>
      <member refid="a01444_1a0948ebd7e2302b96192e3bc47fd419e5" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>nonLinearOperator</name></member>
      <member refid="a01444_1aeb6c45e1b33d704a4be08d4510f6370d" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>nonLinearOperator_</name></member>
      <member refid="a01568_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>notify</name></member>
      <member refid="a01568_1ac035ba934c33e090c4a45128ac13f190" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>notify</name></member>
      <member refid="a01568_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>notify</name></member>
      <member refid="a01568_1a2f93322aa7327069dd4469983933bd16" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>notify</name></member>
      <member refid="a01568_1ae0c6cec757e540f22b65fce1f782e380" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>notify</name></member>
      <member refid="a01568_1a72e3156874ce81a1c7548b9f74db522c" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>notify</name></member>
      <member refid="a01568_1ac72b261cd2af7f59e98f1504814bc785" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>notify</name></member>
      <member refid="a01444_1a7d13c783e5d2191f92b6198f1483f49c" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>options</name></member>
      <member refid="a01444_1afe2d72092b206b2a73d5147e624028e0" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>PreConditionerType</name></member>
      <member refid="a01444_1a9dfa2682ded15aa0978bfd927ca7b2a8" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>ScalarType</name></member>
      <member refid="a01444_1a1f238e6b0544ef8dc6f1dc3661cbc333" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>setup</name></member>
      <member refid="a01444_1a48fe86e2f5de6676bcebe8ffd8a8feeb" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>solve</name></member>
      <member refid="a01444_1a9ec4827184af85f0098e776060f480e6" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>solveInnerProblem</name></member>
      <member refid="a01444_1ac022e2dc3e922732045e5072a2c2d5ac" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>stats</name></member>
      <member refid="a01444_1a62180469d8f77fb493ba2be07b48931d" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>stoppingCriterion</name></member>
      <member refid="a01568_1ae182a206a72de6bc4585152d32332349" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>subscribe</name></member>
      <member refid="a01568_1a13bd8d73b485186680f640786e2682e5" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>subscribeAll</name></member>
      <member refid="a01568_1a026462a1a050728e37bc24e33d2edd9c" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>subscribeAll</name></member>
      <member refid="a01444_1a7022c74bd4a9594da5c7b52a5c13860b" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>tcg_stop_reason</name></member>
      <member refid="a01444_1a9404dd7ddd92ce621b3758780a0a19ba" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>truncatedConjugateGradient</name></member>
      <member refid="a01444_1af8b7745d1eea75d39e30c5e0a9f37865" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>TrustRegion</name></member>
      <member refid="a01568_1a49622286d2b15f0b8a2b25275e6bc771" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>unSubscribe</name></member>
      <member refid="a01568_1a5c20f7eab2233d085071a4fd3b44cbda" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>unSubscribeAll</name></member>
      <member refid="a01444_1a1b22fe5c73085804e28df9574b32e034" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>updateFunction</name></member>
      <member refid="a01444_1a5609028d2f63488106e6ae4a76b204c3" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>UpdateFunctionType</name></member>
      <member refid="a01444_1a8166e85a9638e02fea6da29aba9cce58" prot="public" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>ValueType</name></member>
      <member refid="a01444_1ad356769f1bcfa5f6c5fcfe6866666fe6" prot="private" virt="non-virtual"><scope>Ikarus::TrustRegion</scope><name>xOld</name></member>
      <member refid="a01568_1ad1fe15b31cccec8e44c695af550938ed" prot="public" virt="virtual"><scope>Ikarus::TrustRegion</scope><name>~IObservable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
