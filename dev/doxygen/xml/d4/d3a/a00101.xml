<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="d4/d3a/a00101" kind="file" language="C++">
    <compoundname>concepts.hh</compoundname>
    <includes local="no">concepts</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">dune/functions/functionspacebases/basistags.hh</includes>
    <includes local="no">Eigen/Sparse</includes>
    <includes refid="da/d1e/a00149" local="no">ikarus/utils/traits.hh</includes>
    <includedby refid="d5/dcb/a02456" local="no">dirichletvalues.hh</includedby>
    <includedby refid="d4/d51/a00017" local="no">fetraits.hh</includedby>
    <includedby refid="d8/d41/a00038" local="no">interface.hh</includedby>
    <includedby refid="d3/df8/a00155" local="yes">linearalgebrahelper.hh</includedby>
    <includedby refid="da/dec/a00080" local="no">material.hh</includedby>
    <includedby refid="d5/dcb/a00170" local="no">newtonraphson.hh</includedby>
    <includedby refid="d5/de9/a00176" local="no">newtonraphsonwithscalarsubsidiaryfunction.hh</includedby>
    <includedby refid="da/d15/a00188" local="no">pathfollowingfunctions.hh</includedby>
    <includedby refid="de/de1/a00065" local="no">simpleassemblers.hh</includedby>
    <includedby refid="d1/d44/a00098" local="no">tensorutils.hh</includedby>
    <incdepgraph>
      <node id="1">
        <label>concepts.hh</label>
        <link refid="d4/d3a/a00101"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ikarus/utils/traits.hh</label>
        <link refid="da/d1e/a00149"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Eigen/Sparse</label>
      </node>
      <node id="2">
        <label>concepts</label>
      </node>
      <node id="12">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="6">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="9">
        <label>functional</label>
      </node>
      <node id="10">
        <label>optional</label>
      </node>
      <node id="11">
        <label>tuple</label>
      </node>
      <node id="3">
        <label>type_traits</label>
      </node>
      <node id="4">
        <label>utility</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>simpleassemblers.hh</label>
        <link refid="de/de1/a00065"/>
      </node>
      <node id="24">
        <label>adaptivestepsizing.hh</label>
        <link refid="de/df3/a00185"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>loadcontrol.hh</label>
        <link refid="d7/d25/a00182"/>
      </node>
      <node id="23">
        <label>pathfollowingfunctions.hh</label>
        <link refid="da/d15/a00188"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>pathfollowingtechnique.hh</label>
        <link refid="d9/dd0/a00191"/>
      </node>
      <node id="7">
        <label>powerbasisfe.hh</label>
        <link refid="dd/dad/a00005"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>scalarfe.hh</label>
        <link refid="d4/dee/a00008"/>
      </node>
      <node id="4">
        <label>fetraits.hh</label>
        <link refid="d4/d51/a00017"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>kirchhoffloveshell.hh</label>
        <link refid="da/d6b/a02438"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>materials.hh</label>
        <link refid="dc/dee/a00053"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>interface.hh</label>
        <link refid="d8/d41/a00038"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>linearelasticity.hh</label>
        <link refid="d5/df9/a00044"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>neohooke.hh</label>
        <link refid="d6/d2d/a00047"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>strainconversions.hh</label>
        <link refid="d4/d8c/a00035"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>svk.hh</label>
        <link refid="d5/d16/a00029"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>vanishingstress.hh</label>
        <link refid="dc/d87/a00032"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>dirichletvalues.hh</label>
        <link refid="d5/dcb/a02456"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>kirchhoffloveshell.hh</label>
        <link refid="d9/dd6/a02441"/>
      </node>
      <node id="12">
        <label>material.hh</label>
        <link refid="da/dec/a00080"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>newtonraphson.hh</label>
        <link refid="d5/dcb/a00170"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>newtonraphsonwithscalarsubsidiaryfunction.hh</label>
        <link refid="d5/de9/a00176"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>trustregion.hh</label>
        <link refid="d7/d3f/a00173"/>
      </node>
      <node id="1">
        <label>concepts.hh</label>
        <link refid="d4/d3a/a00101"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>linearalgebrahelper.hh</label>
        <link refid="d3/df8/a00155"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>tensorutils.hh</label>
        <link refid="d1/d44/a00098"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>_ikarus.cc</label>
        <link refid="de/d79/a00203"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="dc/d98/a00225">Eigen</innernamespace>
    <innernamespace refid="dd/df3/a00219">Ikarus</innernamespace>
    <innernamespace refid="dd/d2d/a00229">Ikarus::Concepts</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="d4/d3a/a00101_1ac8757039febcebb4741b376dc8258d6d" prot="public" static="no">
        <name>MAKE_EIGEN_FIXED_VECTOR_CONCEPT</name>
        <param><defname>Size</defname></param>
        <initializer>  template &lt;typename V&gt;                       \
  concept EigenVector##Size                   \
      = static_cast&lt;bool&gt;(V::IsVectorAtCompileTime) and static_cast&lt;bool&gt;(V::SizeAtCompileTime == Size);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="167" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" prot="public" static="no">
        <name>MAKE_EIGEN_FIXED_MATRIX_CONCEPT</name>
        <param><defname>Size1</defname></param>
        <param><defname>Size2</defname></param>
        <initializer>  template &lt;typename M&gt;                                                                                     \
  concept EigenMatrix##Size1##Size2 = static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::RowsAtCompileTime == Size1) \
                                      and static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::ColsAtCompileTime == Size2);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="179" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d4/d3a/a00101_1aba360f830591dbc713b7fa692d614101" prot="public" static="no">
        <name>MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</name>
        <param><defname>Size1</defname></param>
        <param><defname>Size2</defname></param>
        <initializer>  template &lt;typename M&gt;                                        \
  concept EigenMatrixOrVoigtNotation##Size1 = EigenMatrix##Size1##Size1&lt;M&gt; or EigenVector##Size2&lt;M&gt;;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="221" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/basistags.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Sparse&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="da/d1e/a00149" kindref="compound">ikarus/utils/traits.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="dc/d98/a00225" kindref="compound">Eigen</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="19" refid="db/dec/a01337" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/dec/a01337" kindref="compound">EigenBase</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="dd/df3/a00219" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>stressIndexPair,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MaterialImpl&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VanishingStress;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dd/df3/a00219_1ac2c6469be19ce4ef2e630bfa1c5a5e24" kindref="member">transpose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/dec/a01337" kindref="compound">Eigen::EigenBase&lt;Derived&gt;</ref>&amp;<sp/>A);</highlight></codeline>
<codeline lineno="28" refid="dd/d2d/a00229" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Concepts<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="31" refid="da/dcf/a01558" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="da/dcf/a01558" kindref="compound">FlatInterLeavedBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>Basis::PreBasis::IndexMergingStrategy,<sp/>Dune::Functions::BasisFactory::FlatInterleaved&gt;;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="36" refid="de/d1a/a01559" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="de/d1a/a01559" kindref="compound">FlatLexicographicBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>Basis::PreBasis::IndexMergingStrategy,<sp/>Dune::Functions::BasisFactory::FlatLexicographic&gt;;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="41" refid="de/d89/a01560" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="de/d89/a01560" kindref="compound">FlatIndexBasis</ref><sp/>=<sp/><ref refid="de/d1a/a01559" kindref="compound">FlatLexicographicBasis&lt;Basis&gt;</ref><sp/>or<sp/><ref refid="da/dcf/a01558" kindref="compound">FlatInterLeavedBasis&lt;Basis&gt;</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="44" refid="d2/d49/a01561" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d2/d49/a01561" kindref="compound">BlockedInterLeavedBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>Basis::PreBasis::IndexMergingStrategy,<sp/>Dune::Functions::BasisFactory::BlockedInterleaved&gt;;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="49" refid="d2/dc1/a01562" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d2/dc1/a01562" kindref="compound">BlockedLexicographicBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::PreBasis::IndexMergingStrategy,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Functions::BasisFactory::BlockedLexicographic&gt;;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl&gt;</highlight></codeline>
<codeline lineno="55" refid="d8/d6c/a01563" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d8/d6c/a01563" kindref="compound">DuneLocalBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(DuneLocalBasisImpl&amp;<sp/>duneLocalBasis)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl::Traits::RangeType;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl::Traits::JacobianType;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DuneLocalBasisImpl::Traits::dimDomain;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl::Traits::DomainType;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl::Traits::DomainFieldType;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl::Traits::RangeFieldType;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>duneLocalBasis.evaluateFunction(std::declval&lt;typename<sp/>DuneLocalBasisImpl::Traits::DomainType&gt;(),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;std::vector&lt;typename<sp/>DuneLocalBasisImpl::Traits::RangeType&gt;&amp;&gt;());</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>duneLocalBasis.evaluateJacobian(std::declval&lt;typename<sp/>DuneLocalBasisImpl::Traits::DomainType&gt;(),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;std::vector&lt;typename<sp/>DuneLocalBasisImpl::Traits::JacobianType&gt;&amp;&gt;());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="71" refid="de/dd5/a01564" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="de/dd5/a01564" kindref="compound">BlockedIndexBasis</ref><sp/>=<sp/><ref refid="d2/dc1/a01562" kindref="compound">BlockedLexicographicBasis&lt;Basis&gt;</ref><sp/>or<sp/><ref refid="d2/d49/a01561" kindref="compound">BlockedInterLeavedBasis&lt;Basis&gt;</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="74" refid="d6/d82/a01565" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d6/d82/a01565" kindref="compound">PowerBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Basis::PreBasis::Node::isPower<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PathFollowingImpl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Subs</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">iaryArgs&gt;</highlight></codeline>
<codeline lineno="79" refid="d1/d9b/a01566" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d1/d9b/a01566" kindref="compound">PathFollowingStrategy</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(PathFollowingImpl<sp/>pft,<sp/>NonLinearOperator<sp/>nop,<sp/>SubsidiaryArgs<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>pft.evaluateSubsidiaryFunction(args)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>pft.initialPrediction(nop,<sp/>args)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>pft.intermediatePrediction(nop,<sp/>args)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AdaptiveStepSizing,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/d4b/a01309" kindref="compound">NonLinearSolverInformation</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref>,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d3/d0b/a01253" kindref="compound">NonLinearOperator</ref>&gt;</highlight></codeline>
<codeline lineno="87" refid="d7/d57/a01567" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d7/d57/a01567" kindref="compound">AdaptiveStepSizingStrategy</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(AdaptiveStepSizing<sp/>adaptiveSS,<sp/>NonLinearSolverInformation<sp/>info,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubsidiaryArgs<sp/>args,<sp/>NonLinearOperator<sp/>nop)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>adaptiveSS(info,<sp/>args,<sp/>nop)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>adaptiveSS.targetIterations()<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;int&gt;;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>adaptiveSS.setTargetIterations(std::declval&lt;int&gt;())<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LinearSolver,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatrixType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VectorType&gt;</highlight></codeline>
<codeline lineno="95" refid="da/daf/a01568" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="da/daf/a01568" kindref="compound">LinearSolverCheck</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(<ref refid="dd/df3/a00219_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">LinearSolver</ref>&amp;<sp/>linearSolver,<sp/>MatrixType&amp;<sp/>Ax,<sp/>VectorType&amp;<sp/>vec)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.analyzePattern(Ax);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.factorize(Ax);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.solve(vec,<sp/>vec);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearSolver&gt;</highlight></codeline>
<codeline lineno="102" refid="d9/d32/a01569" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d9/d32/a01569" kindref="compound">NonLinearSolverCheckForPathFollowing</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple_size&lt;typename<sp/>NonLinearSolver::NonLinearOperator::ParameterValues&gt;::value<sp/>==<sp/>2;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>not(std::is_same_v&lt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearSolver::NonLinearOperator::ValueType,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>and<sp/>((<ref refid="d9/dae/a01453" kindref="compound">Ikarus::Std::isSpecializationTypeAndNonTypes&lt;Eigen::Matrix, typename NonLinearSolver::NonLinearOperator::DerivativeType&gt;::value</ref>)<sp/>or<sp/>(<ref refid="d9/d8b/a01469" kindref="compound">Ikarus::Std::isSpecializationTypeNonTypeAndType&lt;Eigen::SparseMatrix, typename NonLinearSolver::NonLinearOperator::DerivativeType&gt;::value</ref>)));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="110" refid="d5/d75/a01570" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d5/d75/a01570" kindref="compound">MultiplyAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x*<sp/>y;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="115" refid="d5/d10/a01571" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d5/d10/a01571" kindref="compound">AddAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+<sp/>y;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="120" refid="d3/d22/a01572" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d3/d22/a01572" kindref="compound">SubstractAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="125" refid="d6/db5/a01573" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d6/db5/a01573" kindref="compound">MultiplyAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/>y;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="130" refid="d9/df5/a01574" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d9/df5/a01574" kindref="compound">DivideAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>/=<sp/>y;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="135" refid="d4/d2c/a01575" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d4/d2c/a01575" kindref="compound">AddAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="140" refid="db/dfd/a01576" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="db/dfd/a01576" kindref="compound">SubstractAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>y;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="145" refid="d3/daa/a01577" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d3/daa/a01577" kindref="compound">DivideAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>/<sp/>y;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="150" refid="d1/d88/a01578" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d1/d88/a01578" kindref="compound">NegateAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-x;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="155" refid="d5/d81/a01579" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d5/d81/a01579" kindref="compound">TransposeAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/df3/a00219_1ac2c6469be19ce4ef2e630bfa1c5a5e24" kindref="member">transpose</ref>(x);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Op,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="160" refid="da/dd5/a01580" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="da/dd5/a01580" kindref="compound">IsFunctorWithArgs</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(Op<sp/>op,<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>op(args...);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="165" refid="da/df3/a01581" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="da/df3/a01581" kindref="compound">EigenVector</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(V::IsVectorAtCompileTime);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="d4/d3a/a00101_1ac8757039febcebb4741b376dc8258d6d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_EIGEN_FIXED_VECTOR_CONCEPT(Size)<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>V&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/>concept<sp/>EigenVector##Size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>static_cast&lt;bool&gt;(V::IsVectorAtCompileTime)<sp/>and<sp/>static_cast&lt;bool&gt;(V::SizeAtCompileTime<sp/>==<sp/>Size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(1)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(2)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(3)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(4)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(5)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(6)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_EIGEN_FIXED_MATRIX_CONCEPT(Size1,<sp/>Size2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>M&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/>concept<sp/>EigenMatrix##Size1##Size2<sp/>=<sp/>static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::RowsAtCompileTime<sp/>==<sp/>Size1)<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::ColsAtCompileTime<sp/>==<sp/>Size2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>1)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>2)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>2)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>3)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>3)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>2)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>3)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>4)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>4)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>4)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>2)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>3)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>4)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>5)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>5)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>5)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>5)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>2)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>3)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>4)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>5)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>6)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>6)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>6)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>6)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>6)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>2)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>3)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>4)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>5)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>6)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="d4/d3a/a00101_1aba360f830591dbc713b7fa692d614101" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT(Size1,<sp/>Size2)<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>M&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/>concept<sp/>EigenMatrixOrVoigtNotation##Size1<sp/>=<sp/>EigenMatrix##Size1##Size1&lt;M&gt;<sp/>or<sp/>EigenVector##Size2&lt;M&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1aba360f830591dbc713b7fa692d614101" kindref="member">MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</ref>(1,<sp/>1)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1aba360f830591dbc713b7fa692d614101" kindref="member">MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</ref>(2,<sp/>3)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d3a/a00101_1aba360f830591dbc713b7fa692d614101" kindref="member">MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</ref>(3,<sp/>6)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;template<sp/>&lt;typename...&gt;<sp/>class<sp/>MaterialToCheck,<sp/>typename<sp/>Material&gt;</highlight></codeline>
<codeline lineno="230" refid="dd/d2d/a00229_1a942a5f4e2e5fc6420ccb270414423fc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>consteval<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dd/d2d/a00229_1a942a5f4e2e5fc6420ccb270414423fc0" kindref="member">isMaterial</ref>()<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="d9/d6f/a01445" kindref="compound">Std::isSpecialization&lt;MaterialToCheck, Material&gt;::value</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="dc/d60/a01461" kindref="compound">Std::isSpecializationNonTypeAndTypes&lt;VanishingStress, Material&gt;::value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="d9/d6f/a01445" kindref="compound">Std::isSpecialization&lt;MaterialToCheck, typename Material::Underlying&gt;::value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MaterialToCheck,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="dc/d81/a01161" kindref="compound">Material</ref>&gt;</highlight></codeline>
<codeline lineno="244" refid="d0/d21/a01582" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d0/d21/a01582" kindref="compound">IsMaterial</ref><sp/>=<sp/>isMaterial&lt;MaterialToCheck,<sp/>Material&gt;();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Concepts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh"/>
  </compounddef>
</doxygen>
