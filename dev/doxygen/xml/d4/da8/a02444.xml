<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="d4/da8/a02444" kind="file" language="C++">
    <compoundname>finiteelements/mechanics/nonlinearelastic.hh</compoundname>
    <includes local="no">dune/fufem/boundarypatch.hh</includes>
    <includes local="no">dune/geometry/quadraturerules.hh</includes>
    <includes local="no">dune/geometry/type.hh</includes>
    <includes local="no">dune/localfefunctions/cachedlocalBasis/cachedlocalBasis.hh</includes>
    <includes local="no">dune/localfefunctions/expressions/greenLagrangeStrains.hh</includes>
    <includes local="no">dune/localfefunctions/impl/standardLocalFunction.hh</includes>
    <includes local="no">dune/localfefunctions/manifolds/realTuple.hh</includes>
    <includes refid="d3/d00/a00113" local="no">ikarus/finiteelements/febases/powerbasisfe.hh</includes>
    <includes refid="dc/dfe/a00125" local="no">ikarus/finiteelements/ferequirements.hh</includes>
    <includes refid="df/dc8/a00122" local="no">ikarus/finiteelements/fetraits.hh</includes>
    <includes refid="d9/db6/a00146" local="no">ikarus/finiteelements/mechanics/materials/tags.hh</includes>
    <includes refid="df/d6a/a00119" local="no">ikarus/finiteelements/physicshelper.hh</includes>
    <includes refid="d5/d16/a00029" local="no">ikarus/utils/defaultfunctions.hh</includes>
    <includes refid="d4/d8c/a00035" local="no">ikarus/utils/eigendunetransformations.hh</includes>
    <includes refid="df/d03/a00062" local="no">ikarus/utils/linearalgebrahelper.hh</includes>
    <includedby refid="d8/d9a/a02447" local="no">nonlinearelastic.hh</includedby>
    <incdepgraph>
      <node id="9">
        <label>ikarus/finiteelements/febases/powerbasisfe.hh</label>
        <link refid="d3/d00/a00113"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ikarus/finiteelements/ferequirements.hh</label>
        <link refid="dc/dfe/a00125"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ikarus/finiteelements/fetraits.hh</label>
        <link refid="df/dc8/a00122"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>ikarus/finiteelements/mechanics/materials/tags.hh</label>
        <link refid="d9/db6/a00146"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>nonlinearelastic.hh</label>
        <link refid="d4/da8/a02444"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>ikarus/finiteelements/physicshelper.hh</label>
        <link refid="df/d6a/a00119"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="db/db2/a00020"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>ikarus/utils/defaultfunctions.hh</label>
        <link refid="d5/d16/a00029"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>ikarus/utils/eigendunetransformations.hh</label>
        <link refid="d4/d8c/a00035"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>linearalgebrahelper.hh</label>
        <link refid="df/d03/a00062"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="d4/dee/a00008"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ikarus/utils/traits.hh</label>
        <link refid="d9/d2e/a00056"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Eigen/Core</label>
      </node>
      <node id="18">
        <label>Eigen/Sparse</label>
      </node>
      <node id="41">
        <label>assert.h</label>
      </node>
      <node id="39">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="12">
        <label>concepts</label>
      </node>
      <node id="42">
        <label>dune/common/diagonalmatrix.hh</label>
      </node>
      <node id="27">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="32">
        <label>dune/common/float_cmp.hh</label>
      </node>
      <node id="43">
        <label>dune/common/fmatrix.hh</label>
      </node>
      <node id="44">
        <label>dune/common/fvector.hh</label>
      </node>
      <node id="22">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="37">
        <label>dune/common/tuplevector.hh</label>
      </node>
      <node id="2">
        <label>dune/fufem/boundarypatch.hh</label>
      </node>
      <node id="16">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="17">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="3">
        <label>dune/geometry/quadraturerules.hh</label>
      </node>
      <node id="4">
        <label>dune/geometry/type.hh</label>
      </node>
      <node id="38">
        <label>dune/istl/bvector.hh</label>
      </node>
      <node id="45">
        <label>dune/istl/scaledidmatrix.hh</label>
      </node>
      <node id="5">
        <label>dune/localfefunctions/cachedlocalBasis/cachedlocalBasis.hh</label>
      </node>
      <node id="6">
        <label>dune/localfefunctions/expressions/greenLagrangeStrains.hh</label>
      </node>
      <node id="7">
        <label>dune/localfefunctions/impl/standardLocalFunction.hh</label>
      </node>
      <node id="8">
        <label>dune/localfefunctions/manifolds/realTuple.hh</label>
      </node>
      <node id="24">
        <label>iosfwd</label>
      </node>
      <node id="25">
        <label>map</label>
      </node>
      <node id="20">
        <label>optional</label>
      </node>
      <node id="35">
        <label>random</label>
      </node>
      <node id="36">
        <label>ranges</label>
      </node>
      <node id="26">
        <label>set</label>
      </node>
      <node id="21">
        <label>tuple</label>
      </node>
      <node id="13">
        <label>type_traits</label>
      </node>
      <node id="14">
        <label>utility</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>nonlinearelastic.hh</label>
        <link refid="d4/da8/a02444"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nonlinearelastic.hh</label>
        <link refid="d8/d9a/a02447"/>
      </node>
    </invincdepgraph>
    <innerclass refid="dc/d9e/a01305" prot="public">Ikarus::NonLinearElastic</innerclass>
    <innernamespace refid="d9/d0d/a00298">Ikarus</innernamespace>
    <briefdescription>
<para>Definition of the NonLinearElastic class for finite element mechanics computations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_DUNE_LOCALFEFUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;dune/fufem/boundarypatch.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;dune/geometry/quadraturerules.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;dune/geometry/type.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;dune/localfefunctions/cachedlocalBasis/cachedlocalBasis.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;dune/localfefunctions/expressions/greenLagrangeStrains.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;dune/localfefunctions/impl/standardLocalFunction.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;dune/localfefunctions/manifolds/realTuple.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;<ref refid="d3/d00/a00113" kindref="compound">ikarus/finiteelements/febases/powerbasisfe.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;<ref refid="dc/dfe/a00125" kindref="compound">ikarus/finiteelements/ferequirements.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;<ref refid="df/dc8/a00122" kindref="compound">ikarus/finiteelements/fetraits.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;<ref refid="d9/db6/a00146" kindref="compound">ikarus/finiteelements/mechanics/materials/tags.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;<ref refid="df/d6a/a00119" kindref="compound">ikarus/finiteelements/physicshelper.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;<ref refid="d5/d16/a00029" kindref="compound">ikarus/utils/defaultfunctions.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;<ref refid="d4/d8c/a00035" kindref="compound">ikarus/utils/eigendunetransformations.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;<ref refid="df/d03/a00062" kindref="compound">ikarus/utils/linearalgebrahelper.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d9/d0d/a00298" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Material_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FERequirements_<sp/>=<sp/>FERequirements&lt;&gt;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useEigenRef<sp/>=<sp/>false&gt;</highlight></codeline>
<codeline lineno="43" refid="dc/d9e/a01305" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dc/d9e/a01305" kindref="compound">NonLinearElastic</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d4/d10/a01197" kindref="compound">PowerBasisFE</ref>&lt;typename<sp/>Basis_::FlatBasis&gt;<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45" refid="dc/d9e/a01305_1a35ac696022a324503a5b95fc5453498c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/d9e/a01305_1a35ac696022a324503a5b95fc5453498c" kindref="member">Basis</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Basis_;</highlight></codeline>
<codeline lineno="46" refid="dc/d9e/a01305_1ac44404a0f9d5ee9c786775dc0b8ef760" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/d9e/a01305_1ac44404a0f9d5ee9c786775dc0b8ef760" kindref="member">Material</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Material_;</highlight></codeline>
<codeline lineno="47" refid="dc/d9e/a01305_1add3d82673a057463efdd636c7509accd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/d9e/a01305_1add3d82673a057463efdd636c7509accd" kindref="member">FlatBasis</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/a01429_1ab9e57abdb5f4abeb030f6122df75849e" kindref="member">Basis::FlatBasis</ref>;</highlight></codeline>
<codeline lineno="48" refid="dc/d9e/a01305_1a40a4c51d68b06cefe120b931a6fb8647" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="d4/d10/a01197" kindref="compound">BasePowerFE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d4/d10/a01197" kindref="compound">PowerBasisFE&lt;FlatBasis&gt;</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Handles<sp/>globalIndices<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="dc/d9e/a01305_1aaf1802dd03278847b036a00cc9577ed5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/d9e/a01305_1aaf1802dd03278847b036a00cc9577ed5" kindref="member">FERequirementType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>FERequirements_;</highlight></codeline>
<codeline lineno="50" refid="dc/d9e/a01305_1ab98893c89ad3d1b7a51819c50d5b9849" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="d6/da1/a01233" kindref="compound">ResultRequirementsType</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d6/da1/a01233" kindref="compound">ResultRequirements&lt;FERequirementType&gt;</ref>;</highlight></codeline>
<codeline lineno="51" refid="dc/d9e/a01305_1ae342975d162e693d1bbd6a57198651b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/d9e/a01305_1ae342975d162e693d1bbd6a57198651b3" kindref="member">LocalView</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FlatBasis::LocalView;</highlight></codeline>
<codeline lineno="52" refid="dc/d9e/a01305_1a08fd6a09968386069f41de2703d11aba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/d9e/a01305_1a08fd6a09968386069f41de2703d11aba" kindref="member">Element</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LocalView::Element;</highlight></codeline>
<codeline lineno="53" refid="dc/d9e/a01305_1a915946640658946999ff0a2f8058e059" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/d9e/a01305_1a915946640658946999ff0a2f8058e059" kindref="member">Geometry</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element::Geometry;</highlight></codeline>
<codeline lineno="54" refid="dc/d9e/a01305_1a7fdd426490c280dbef9647b5a991dead" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/d9e/a01305_1a7fdd426490c280dbef9647b5a991dead" kindref="member">GridView</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FlatBasis::GridView;</highlight></codeline>
<codeline lineno="55" refid="dc/d9e/a01305_1a1585e90e9b65b2b5aab1e2ec6749edcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="db/d4b/a01309" kindref="compound">Traits</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="db/d4b/a01309" kindref="compound">TraitsFromLocalView&lt;LocalView, useEigenRef&gt;</ref>;</highlight></codeline>
<codeline lineno="56" refid="dc/d9e/a01305_1a089f6bc160374739a5111aa99e2f4b95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1a089f6bc160374739a5111aa99e2f4b95" kindref="member">myDim</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="db/d4b/a01309_1ab29f61e7d71697962fe41642d683f9f5" kindref="member">Traits::mydim</ref>;</highlight></codeline>
<codeline lineno="57" refid="dc/d9e/a01305_1a2b89a8d5f5b634b295327b9cdbf8579d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1a2b89a8d5f5b634b295327b9cdbf8579d" kindref="member">strainType</ref><sp/>=<sp/><ref refid="d5/d7b/a00286_1ggacef1e451de1a99845c59d7391064fb8faca3f1e4bb21fd00a3d29c5d8aff8e11e" kindref="member">StrainTags::greenLagrangian</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VolumeLoad<sp/>=<sp/>utils::LoadDefault,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NeumannBoundaryLoad<sp/>=<sp/>utils::LoadDefault&gt;</highlight></codeline>
<codeline lineno="72" refid="dc/d9e/a01305_1afcba98cc2fcdf140b11fd652dcc7d361" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1afcba98cc2fcdf140b11fd652dcc7d361" kindref="member">NonLinearElastic</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1a35ac696022a324503a5b95fc5453498c" kindref="member">Basis</ref>&amp;<sp/>globalBasis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LocalView::Element&amp;<sp/>element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1ac44404a0f9d5ee9c786775dc0b8ef760" kindref="member">Material</ref>&amp;<sp/>p_mat,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VolumeLoad<sp/>p_volumeLoad<sp/>=<sp/>{},<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoundaryPatch&lt;GridView&gt;*<sp/>p_neumannBoundary<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NeumannBoundaryLoad<sp/>p_neumannBoundaryLoad<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="dc/d9e/a01305_1a40a4c51d68b06cefe120b931a6fb8647" kindref="member">BasePowerFE</ref>(globalBasis.flat(),<sp/>element),<sp/><ref refid="dc/d9e/a01305_1ad719bcc95293fbe32f399a782bebd684" kindref="member">neumannBoundary</ref>{p_neumannBoundary},<sp/><ref refid="dc/d9e/a01305_1ab44e1c23e8a91a5e9faceed55a1149b1" kindref="member">mat</ref>{p_mat}<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().bind(element);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>first_child<sp/>=<sp/>this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().tree().child(0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fe<sp/><sp/><sp/><sp/>=<sp/>first_child.finiteElement();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1abad7fc68b05918d1fa3dac025de1eefe" kindref="member">numberOfNodes</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>fe.size();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1a9ae2f9f738e47d048de93246ca1a6a69" kindref="member">dispAtNodes</ref>.resize(<ref refid="dc/d9e/a01305_1abad7fc68b05918d1fa3dac025de1eefe" kindref="member">numberOfNodes</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1af22294395e75ecd2bba06e5716215605" kindref="member">order</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2<sp/>*<sp/>(this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().tree().child(0).finiteElement().localBasis().order());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1a4b6bdc9d6579c0805d05f4fe9fdd7679" kindref="member">localBasis</ref><sp/>=<sp/>Dune::CachedLocalBasis(this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().tree().child(0).finiteElement().<ref refid="dc/d9e/a01305_1a4b6bdc9d6579c0805d05f4fe9fdd7679" kindref="member">localBasis</ref>());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{<sp/>this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().element().impl().getQuadratureRule(<ref refid="dc/d9e/a01305_1af22294395e75ecd2bba06e5716215605" kindref="member">order</ref>);<sp/>})</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().element().impl().isTrimmed())</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1a4b6bdc9d6579c0805d05f4fe9fdd7679" kindref="member">localBasis</ref>.bind(this-&gt;localView().element().impl().getQuadratureRule(<ref refid="dc/d9e/a01305_1af22294395e75ecd2bba06e5716215605" kindref="member">order</ref>),<sp/>Dune::bindDerivatives(0,<sp/>1));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1a4b6bdc9d6579c0805d05f4fe9fdd7679" kindref="member">localBasis</ref>.bind(Dune::QuadratureRules&lt;double,<sp/>myDim&gt;::rule(this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().element().type(),<sp/><ref refid="dc/d9e/a01305_1af22294395e75ecd2bba06e5716215605" kindref="member">order</ref>),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dune::bindDerivatives(0,<sp/>1));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1a4b6bdc9d6579c0805d05f4fe9fdd7679" kindref="member">localBasis</ref>.bind(Dune::QuadratureRules&lt;double,<sp/>myDim&gt;::rule(this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().element().type(),<sp/><ref refid="dc/d9e/a01305_1af22294395e75ecd2bba06e5716215605" kindref="member">order</ref>),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dune::bindDerivatives(0,<sp/>1));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(!std::is_same_v&lt;VolumeLoad,<sp/>utils::LoadDefault&gt;)<sp/><ref refid="dc/d9e/a01305_1aae99f9efb5c0cd2609f3ee7b5ff5e5c6" kindref="member">volumeLoad</ref><sp/>=<sp/>p_volumeLoad;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(!std::is_same_v&lt;NeumannBoundaryLoad,<sp/>utils::LoadDefault&gt;)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1ae7c7cf234fdfd2b1e5e4b851449ae72d" kindref="member">neumannBoundaryLoad</ref><sp/>=<sp/>p_neumannBoundaryLoad;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(((not<sp/>p_neumannBoundary<sp/>and<sp/>not<sp/><ref refid="dc/d9e/a01305_1ae7c7cf234fdfd2b1e5e4b851449ae72d" kindref="member">neumannBoundaryLoad</ref>)<sp/>or<sp/>(p_neumannBoundary<sp/>and<sp/><ref refid="dc/d9e/a01305_1ae7c7cf234fdfd2b1e5e4b851449ae72d" kindref="member">neumannBoundaryLoad</ref>))</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;If<sp/>you<sp/>pass<sp/>a<sp/>Neumann<sp/>boundary<sp/>you<sp/>should<sp/>also<sp/>pass<sp/>the<sp/>function<sp/>for<sp/>the<sp/>Neumann<sp/>load!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="110" refid="dc/d9e/a01305_1a89b811cd039a701d8a1d2c5b8796c50f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1a89b811cd039a701d8a1d2c5b8796c50f" kindref="member">displacementFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1aaf1802dd03278847b036a00cc9577ed5" kindref="member">FERequirementType</ref>&amp;<sp/>par,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&gt;&amp;<sp/>dx<sp/>=<sp/>std::nullopt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>d<sp/>=<sp/>par.getGlobalSolution(<ref refid="d3/d58/a00285_1ggaea763c94a1cecbeefc4f8661debcc5a3a0c2d35f5f278a229db5ba41d40120f1c" kindref="member">Ikarus::FESolutions::displacement</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::BlockVector&lt;Dune::RealTuple&lt;ScalarType,<sp/>Traits::dimension&gt;&gt;<sp/>disp(<ref refid="dc/d9e/a01305_1a9ae2f9f738e47d048de93246ca1a6a69" kindref="member">dispAtNodes</ref>.size());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>optional<sp/>displacement<sp/>vector<sp/>is<sp/>provided,<sp/>apply<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>disp.size();<sp/>++i)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>k2<sp/>=<sp/>0U;<sp/>k2<sp/>&lt;<sp/><ref refid="dc/d9e/a01305_1a089f6bc160374739a5111aa99e2f4b95" kindref="member">myDim</ref>;<sp/>++k2)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp[i][k2]<sp/>=<sp/>dx.value()[i<sp/>*<sp/><ref refid="dc/d9e/a01305_1a089f6bc160374739a5111aa99e2f4b95" kindref="member">myDim</ref><sp/>+<sp/>k2]</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>d[this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().index(this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().tree().child(k2).localIndex(i))[0]];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>disp.size();<sp/>++i)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>k2<sp/>=<sp/>0U;<sp/>k2<sp/>&lt;<sp/><ref refid="dc/d9e/a01305_1a089f6bc160374739a5111aa99e2f4b95" kindref="member">myDim</ref>;<sp/>++k2)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp[i][k2]<sp/>=<sp/>d[this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().index(this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().tree().child(k2).localIndex(i))[0]];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>geo<sp/>=<sp/>std::make_shared&lt;const<sp/>typename<sp/>GridView::GridView::template<sp/>Codim&lt;0&gt;::Entity::Geometry&gt;(</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().element().geometry());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::StandardLocalFunction<sp/>uFunction(<ref refid="dc/d9e/a01305_1a4b6bdc9d6579c0805d05f4fe9fdd7679" kindref="member">localBasis</ref>,<sp/>disp,<sp/>geo);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uFunction;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="141" refid="dc/d9e/a01305_1ae258d2211b130b7b6f167aa86ac1fab7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1ae258d2211b130b7b6f167aa86ac1fab7" kindref="member">strainFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1aaf1802dd03278847b036a00cc9577ed5" kindref="member">FERequirementType</ref>&amp;<sp/>par,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&gt;&amp;<sp/>dx<sp/>=<sp/>std::nullopt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>greenLagrangeStrains(<ref refid="dc/d9e/a01305_1a89b811cd039a701d8a1d2c5b8796c50f" kindref="member">displacementFunction</ref>(par,<sp/>dx));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strainDim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>voigt<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="156" refid="dc/d9e/a01305_1a736488f3521743c9916b3c2570f92a2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1a736488f3521743c9916b3c2570f92a2f" kindref="member">getMaterialTangent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector&lt;ScalarType,<sp/>strainDim&gt;&amp;<sp/>strain)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;ScalarType,<sp/>double&gt;)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1ab44e1c23e8a91a5e9faceed55a1149b1" kindref="member">mat</ref>.template<sp/>tangentModuli&lt;strainType,<sp/>voigt&gt;(strain);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>matAD<sp/>=<sp/><ref refid="dc/d9e/a01305_1ab44e1c23e8a91a5e9faceed55a1149b1" kindref="member">mat</ref>.template<sp/>rebind&lt;ScalarType&gt;();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matAD.template<sp/>tangentModuli&lt;strainType,<sp/>voigt&gt;(strain);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strainDim&gt;</highlight></codeline>
<codeline lineno="174" refid="dc/d9e/a01305_1a5e139eb8977fd8a47656dc680ac15214" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1a5e139eb8977fd8a47656dc680ac15214" kindref="member">getInternalEnergy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector&lt;ScalarType,<sp/>strainDim&gt;&amp;<sp/>strain)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;ScalarType,<sp/>double&gt;)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1ab44e1c23e8a91a5e9faceed55a1149b1" kindref="member">mat</ref>.template<sp/>storedEnergy&lt;strainType&gt;(strain);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>matAD<sp/>=<sp/><ref refid="dc/d9e/a01305_1ab44e1c23e8a91a5e9faceed55a1149b1" kindref="member">mat</ref>.template<sp/>rebind&lt;ScalarType&gt;();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matAD.template<sp/>storedEnergy&lt;strainType&gt;(strain);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strainDim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>voigt<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="193" refid="dc/d9e/a01305_1ad86ce202de620c405536c11514a0f6db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1ad86ce202de620c405536c11514a0f6db" kindref="member">getStress</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector&lt;ScalarType,<sp/>strainDim&gt;&amp;<sp/>strain)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;ScalarType,<sp/>double&gt;)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1ab44e1c23e8a91a5e9faceed55a1149b1" kindref="member">mat</ref>.template<sp/>stresses&lt;strainType,<sp/>voigt&gt;(strain);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>matAD<sp/>=<sp/><ref refid="dc/d9e/a01305_1ab44e1c23e8a91a5e9faceed55a1149b1" kindref="member">mat</ref>.template<sp/>rebind&lt;ScalarType&gt;();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matAD.template<sp/>stresses&lt;strainType,<sp/>voigt&gt;(strain);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="dc/d9e/a01305_1a744057f5543df5a612211f6fb1acbd7c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1a744057f5543df5a612211f6fb1acbd7c" kindref="member">calculateScalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1aaf1802dd03278847b036a00cc9577ed5" kindref="member">FERequirementType</ref>&amp;<sp/>par)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calculateScalarImpl&lt;double&gt;(par);<sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="dc/d9e/a01305_1affd164f3f82e4856e5fea2cf9479324c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1affd164f3f82e4856e5fea2cf9479324c" kindref="member">calculateVector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1aaf1802dd03278847b036a00cc9577ed5" kindref="member">FERequirementType</ref>&amp;<sp/>par,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>VectorType&lt;&gt;<sp/>force)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calculateVectorImpl&lt;double&gt;(par,<sp/>force);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="dc/d9e/a01305_1a4cdd78cc86c784202967911c9953e667" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1a4cdd78cc86c784202967911c9953e667" kindref="member">calculateMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1aaf1802dd03278847b036a00cc9577ed5" kindref="member">FERequirementType</ref>&amp;<sp/>par,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>MatrixType&lt;&gt;<sp/>K)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Dune::DerivativeDirections;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d0/d61/a00302" kindref="compound">Dune</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eps<sp/>=<sp/><ref refid="dc/d9e/a01305_1ae258d2211b130b7b6f167aa86ac1fab7" kindref="member">strainFunction</ref>(par);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>geo<sp/>=<sp/>this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().element().geometry();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[gpIndex,<sp/>gp]<sp/>:<sp/>eps.viewOverIntegrationPoints())<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>intElement<sp/>=<sp/>geo.integrationElement(gp.position())<sp/>*<sp/>gp.weight();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EVoigt<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(eps.evaluate(gpIndex,<sp/>on(<ref refid="d4/d10/a01197_1a0fe5d4e10f331905629351786c72ce6a" kindref="member">gridElement</ref>))).eval();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="dc/d9e/a01305_1a736488f3521743c9916b3c2570f92a2f" kindref="member">getMaterialTangent</ref>(EVoigt);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stresses<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="dc/d9e/a01305_1ad86ce202de620c405536c11514a0f6db" kindref="member">getStress</ref>(EVoigt);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="dc/d9e/a01305_1abad7fc68b05918d1fa3dac025de1eefe" kindref="member">numberOfNodes</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bopI<sp/>=<sp/>eps.evaluateDerivative(gpIndex,<sp/>wrt(coeff(i)),<sp/>on(<ref refid="d4/d10/a01197_1a0fe5d4e10f331905629351786c72ce6a" kindref="member">gridElement</ref>));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="dc/d9e/a01305_1abad7fc68b05918d1fa3dac025de1eefe" kindref="member">numberOfNodes</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bopJ<sp/>=<sp/>eps.evaluateDerivative(gpIndex,<sp/>wrt(coeff(j)),<sp/>on(<ref refid="d4/d10/a01197_1a0fe5d4e10f331905629351786c72ce6a" kindref="member">gridElement</ref>));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kgIJ<sp/>=<sp/>eps.evaluateDerivative(gpIndex,<sp/>wrt(coeff(i,<sp/>j)),<sp/>along(stresses),<sp/>on(<ref refid="d4/d10/a01197_1a0fe5d4e10f331905629351786c72ce6a" kindref="member">gridElement</ref>));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K.template<sp/>block&lt;myDim,<sp/>myDim&gt;(i<sp/>*<sp/><ref refid="dc/d9e/a01305_1a089f6bc160374739a5111aa99e2f4b95" kindref="member">myDim</ref>,<sp/>j<sp/>*<sp/><ref refid="dc/d9e/a01305_1a089f6bc160374739a5111aa99e2f4b95" kindref="member">myDim</ref>)<sp/>+=<sp/>(bopI.transpose()<sp/>*<sp/>C<sp/>*<sp/>bopJ<sp/>+<sp/>kgIJ)<sp/>*<sp/>intElement;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="dc/d9e/a01305_1afc5090fbbd1054eaa33932e88f2fdb42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1afc5090fbbd1054eaa33932e88f2fdb42" kindref="member">calculateAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/da1/a01233" kindref="compound">ResultRequirementsType</ref>&amp;<sp/>req,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/da0/a01341" kindref="compound">Dune::FieldVector&lt;double, Traits::mydim&gt;</ref>&amp;<sp/>local,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d1c/a01229" kindref="compound">ResultTypeMap&lt;double&gt;</ref>&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Dune::DerivativeDirections;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d0/d61/a00302" kindref="compound">Dune</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uFunction<sp/>=<sp/><ref refid="dc/d9e/a01305_1a89b811cd039a701d8a1d2c5b8796c50f" kindref="member">displacementFunction</ref>(req.<ref refid="d6/da1/a01233_1a55da3509459a63cd2ffcb20df9039d0d" kindref="member">getFERequirements</ref>());</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>H<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>uFunction.evaluateDerivative(local,<sp/>Dune::wrt(spatialAll),<sp/>Dune::on(<ref refid="d4/d10/a01197_1a0fe5d4e10f331905629351786c72ce6a" kindref="member">gridElement</ref>));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>E<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(0.5<sp/>*<sp/>(H.transpose()<sp/>+<sp/>H<sp/>+<sp/>H.transpose()<sp/>*<sp/>H)).eval();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EVoigt<sp/><sp/><sp/><sp/>=<sp/><ref refid="d4/d5b/a00294_1ga4304655095296ce9283e012587817a51" kindref="member">toVoigt</ref>(E);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="d5/d7b/a00286_1gga70b4ce43c53cc5e949d49919f437501eab13248d68ac5516c015337b68346fc21" kindref="member">PK2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="dc/d9e/a01305_1ab44e1c23e8a91a5e9faceed55a1149b1" kindref="member">mat</ref>.template<sp/>stresses&lt;StrainTags::greenLagrangian&gt;(EVoigt);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req.<ref refid="d6/da1/a01233_1aa75a1bfbcca39d7c30d1b1141eae4795" kindref="member">isResultRequested</ref>(<ref refid="d3/d58/a00285_1gga531be167e924b749eb8b4ccc7f1c18c9afa06a140291f2b4bc25c81e5e6bac241" kindref="member">ResultType::PK2Stress</ref>))</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="db/d1c/a01229_1aa399a96000daf40950e388eb0b23a7c0" kindref="member">insertOrAssignResult</ref>(<ref refid="d3/d58/a00285_1gga531be167e924b749eb8b4ccc7f1c18c9afa06a140291f2b4bc25c81e5e6bac241" kindref="member">ResultType::PK2Stress</ref>,<sp/><ref refid="d5/d7b/a00286_1gga70b4ce43c53cc5e949d49919f437501eab13248d68ac5516c015337b68346fc21" kindref="member">PK2</ref>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::NotImplemented,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>requested<sp/>result<sp/>type<sp/>is<sp/>NOT<sp/>implemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>Dune::CachedLocalBasis&lt;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_cvref_t&lt;decltype(std::declval&lt;LocalView&gt;().tree().child(0).finiteElement().localBasis())&gt;&gt;</highlight></codeline>
<codeline lineno="277" refid="dc/d9e/a01305_1a4b6bdc9d6579c0805d05f4fe9fdd7679" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1a4b6bdc9d6579c0805d05f4fe9fdd7679" kindref="member">localBasis</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;Eigen::Vector&lt;double,<sp/>Traits::worlddim&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/da0/a01341" kindref="compound">Dune::FieldVector&lt;double, Traits::worlddim&gt;</ref>&amp;,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)&gt;</highlight></codeline>
<codeline lineno="280" refid="dc/d9e/a01305_1aae99f9efb5c0cd2609f3ee7b5ff5e5c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1aae99f9efb5c0cd2609f3ee7b5ff5e5c6" kindref="member">volumeLoad</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;Eigen::Vector&lt;double,<sp/>Traits::worlddim&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/da0/a01341" kindref="compound">Dune::FieldVector&lt;double, Traits::worlddim&gt;</ref>&amp;,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)&gt;</highlight></codeline>
<codeline lineno="283" refid="dc/d9e/a01305_1ae7c7cf234fdfd2b1e5e4b851449ae72d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1ae7c7cf234fdfd2b1e5e4b851449ae72d" kindref="member">neumannBoundaryLoad</ref>;</highlight></codeline>
<codeline lineno="284" refid="dc/d9e/a01305_1ad719bcc95293fbe32f399a782bebd684" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoundaryPatch&lt;GridView&gt;*<sp/><ref refid="dc/d9e/a01305_1ad719bcc95293fbe32f399a782bebd684" kindref="member">neumannBoundary</ref>;</highlight></codeline>
<codeline lineno="285" refid="dc/d9e/a01305_1ab44e1c23e8a91a5e9faceed55a1149b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d9e/a01305_1ac44404a0f9d5ee9c786775dc0b8ef760" kindref="member">Material</ref><sp/><ref refid="dc/d9e/a01305_1ab44e1c23e8a91a5e9faceed55a1149b1" kindref="member">mat</ref>;</highlight></codeline>
<codeline lineno="286" refid="dc/d9e/a01305_1a9ae2f9f738e47d048de93246ca1a6a69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>Dune::BlockVector&lt;Dune::RealTuple&lt;double,<sp/>Traits::dimension&gt;&gt;<sp/><ref refid="dc/d9e/a01305_1a9ae2f9f738e47d048de93246ca1a6a69" kindref="member">dispAtNodes</ref>;</highlight></codeline>
<codeline lineno="287" refid="dc/d9e/a01305_1abad7fc68b05918d1fa3dac025de1eefe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1abad7fc68b05918d1fa3dac025de1eefe" kindref="member">numberOfNodes</ref>{0};</highlight></codeline>
<codeline lineno="288" refid="dc/d9e/a01305_1af22294395e75ecd2bba06e5716215605" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1af22294395e75ecd2bba06e5716215605" kindref="member">order</ref>{};</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="292" refid="dc/d9e/a01305_1aa5bba94f05661386e4e62d6c74889490" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1aa5bba94f05661386e4e62d6c74889490" kindref="member">calculateScalarImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1aaf1802dd03278847b036a00cc9577ed5" kindref="member">FERequirementType</ref>&amp;<sp/>par,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&gt;&amp;<sp/>dx</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::nullopt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>ScalarType<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Dune::DerivativeDirections;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d0/d61/a00302" kindref="compound">Dune</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uFunction<sp/>=<sp/><ref refid="dc/d9e/a01305_1a89b811cd039a701d8a1d2c5b8796c50f" kindref="member">displacementFunction</ref>(par,<sp/>dx);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eps<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="dc/d9e/a01305_1ae258d2211b130b7b6f167aa86ac1fab7" kindref="member">strainFunction</ref>(par,<sp/>dx);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lambda<sp/><sp/><sp/>=<sp/>par.getParameter(<ref refid="d3/d58/a00285_1gga0c1577fd05efee8475b0f7fef795bbbeaf72bac0ac84c0315e7bcbb8aa84b2ff8" kindref="member">Ikarus::FEParameter::loadfactor</ref>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>geo<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().element().geometry();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ScalarType<sp/>energy<sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[gpIndex,<sp/>gp]<sp/>:<sp/>uFunction.viewOverIntegrationPoints())<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EVoigt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(eps.evaluate(gpIndex,<sp/>on(<ref refid="d4/d10/a01197_1a0fe5d4e10f331905629351786c72ce6a" kindref="member">gridElement</ref>))).eval();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>internalEnergy<sp/>=<sp/><ref refid="dc/d9e/a01305_1a5e139eb8977fd8a47656dc680ac15214" kindref="member">getInternalEnergy</ref>(EVoigt);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy<sp/>+=<sp/>internalEnergy<sp/>*<sp/>geo.integrationElement(gp.position())<sp/>*<sp/>gp.weight();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dc/d9e/a01305_1aae99f9efb5c0cd2609f3ee7b5ff5e5c6" kindref="member">volumeLoad</ref>)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[gpIndex,<sp/>gp]<sp/>:<sp/>uFunction.viewOverIntegrationPoints())<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>uFunction.evaluate(gpIndex);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector&lt;double,<sp/>Traits::worlddim&gt;<sp/>fExt<sp/>=<sp/><ref refid="dc/d9e/a01305_1aae99f9efb5c0cd2609f3ee7b5ff5e5c6" kindref="member">volumeLoad</ref>(geo.global(gp.position()),<sp/>lambda);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy<sp/>-=<sp/>u.dot(fExt)<sp/>*<sp/>geo.integrationElement(gp.position())<sp/>*<sp/>gp.weight();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>line<sp/>or<sp/>surface<sp/>loads,<sp/>i.e.,<sp/>neumann<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/><ref refid="dc/d9e/a01305_1ad719bcc95293fbe32f399a782bebd684" kindref="member">neumannBoundary</ref><sp/>and<sp/>not<sp/><ref refid="dc/d9e/a01305_1ae7c7cf234fdfd2b1e5e4b851449ae72d" kindref="member">neumannBoundaryLoad</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>energy;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element<sp/>=<sp/>this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().element();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>intersection<sp/>:<sp/>intersections(<ref refid="dc/d9e/a01305_1ad719bcc95293fbe32f399a782bebd684" kindref="member">neumannBoundary</ref>-&gt;gridView(),<sp/>element))<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/><ref refid="dc/d9e/a01305_1ad719bcc95293fbe32f399a782bebd684" kindref="member">neumannBoundary</ref><sp/>or<sp/>not<sp/><ref refid="dc/d9e/a01305_1ad719bcc95293fbe32f399a782bebd684" kindref="member">neumannBoundary</ref>-&gt;contains(intersection))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>quadLine<sp/>=<sp/>Dune::QuadratureRules&lt;double,<sp/>Traits::mydim<sp/>-<sp/>1&gt;::rule(intersection.type(),<sp/><ref refid="dc/d9e/a01305_1af22294395e75ecd2bba06e5716215605" kindref="member">order</ref>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curQuad<sp/>:<sp/>quadLine)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Local<sp/>position<sp/>of<sp/>the<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/da0/a01341" kindref="compound">Dune::FieldVector&lt;double, Traits::mydim&gt;</ref>&amp;<sp/>quadPos</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>intersection.geometryInInside().global(curQuad.position());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>intElement<sp/>=<sp/>intersection.geometry().integrationElement(curQuad.position());</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>of<sp/>the<sp/>local<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>uFunction.evaluate(quadPos);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>of<sp/>the<sp/>Neumann<sp/>data<sp/>at<sp/>the<sp/>current<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>neumannValue<sp/>=<sp/><ref refid="dc/d9e/a01305_1ae7c7cf234fdfd2b1e5e4b851449ae72d" kindref="member">neumannBoundaryLoad</ref>(intersection.geometry().global(curQuad.position()),<sp/>lambda);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy<sp/>-=<sp/>neumannValue.dot(u)<sp/>*<sp/>curQuad.weight()<sp/>*<sp/>intElement;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>energy;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="344" refid="dc/d9e/a01305_1ab3328f45d8603589239dcea4c86a745b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1ab3328f45d8603589239dcea4c86a745b" kindref="member">calculateVectorImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d9e/a01305_1aaf1802dd03278847b036a00cc9577ed5" kindref="member">FERequirementType</ref>&amp;<sp/>par,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>VectorType&lt;ScalarType&gt;<sp/>force,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&gt;&amp;<sp/>dx<sp/>=<sp/>std::nullopt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Dune::DerivativeDirections;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d0/d61/a00302" kindref="compound">Dune</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lambda<sp/>=<sp/>par.getParameter(<ref refid="d3/d58/a00285_1gga0c1577fd05efee8475b0f7fef795bbbeaf72bac0ac84c0315e7bcbb8aa84b2ff8" kindref="member">Ikarus::FEParameter::loadfactor</ref>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eps<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="dc/d9e/a01305_1ae258d2211b130b7b6f167aa86ac1fab7" kindref="member">strainFunction</ref>(par,<sp/>dx);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>geo<sp/><sp/><sp/><sp/><sp/>=<sp/>this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().element().geometry();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[gpIndex,<sp/>gp]<sp/>:<sp/>eps.viewOverIntegrationPoints())<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>intElement<sp/>=<sp/>geo.integrationElement(gp.position())<sp/>*<sp/>gp.weight();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EVoigt<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(eps.evaluate(gpIndex,<sp/>on(<ref refid="d4/d10/a01197_1a0fe5d4e10f331905629351786c72ce6a" kindref="member">gridElement</ref>))).eval();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stresses<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="dc/d9e/a01305_1ad86ce202de620c405536c11514a0f6db" kindref="member">getStress</ref>(EVoigt);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="dc/d9e/a01305_1abad7fc68b05918d1fa3dac025de1eefe" kindref="member">numberOfNodes</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bopI<sp/>=<sp/>eps.evaluateDerivative(gpIndex,<sp/>wrt(coeff(i)),<sp/>on(<ref refid="d4/d10/a01197_1a0fe5d4e10f331905629351786c72ce6a" kindref="member">gridElement</ref>));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force.template<sp/>segment&lt;myDim&gt;(<ref refid="dc/d9e/a01305_1a089f6bc160374739a5111aa99e2f4b95" kindref="member">myDim</ref><sp/>*<sp/>i)<sp/>+=<sp/>bopI.transpose()<sp/>*<sp/>stresses<sp/>*<sp/>intElement;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>External<sp/>forces<sp/>volume<sp/>forces<sp/>over<sp/>the<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dc/d9e/a01305_1aae99f9efb5c0cd2609f3ee7b5ff5e5c6" kindref="member">volumeLoad</ref>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>=<sp/><ref refid="dc/d9e/a01305_1a89b811cd039a701d8a1d2c5b8796c50f" kindref="member">displacementFunction</ref>(par,<sp/>dx);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[gpIndex,<sp/>gp]<sp/>:<sp/>u.viewOverIntegrationPoints())<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>intElement<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>geo.integrationElement(gp.position())<sp/>*<sp/>gp.weight();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector&lt;double,<sp/>Traits::worlddim&gt;<sp/>fExt<sp/>=<sp/><ref refid="dc/d9e/a01305_1aae99f9efb5c0cd2609f3ee7b5ff5e5c6" kindref="member">volumeLoad</ref>(geo.global(gp.position()),<sp/>lambda);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="dc/d9e/a01305_1abad7fc68b05918d1fa3dac025de1eefe" kindref="member">numberOfNodes</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>udCi<sp/>=<sp/>u.evaluateDerivative(gpIndex,<sp/>wrt(coeff(i)));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force.template<sp/>segment&lt;myDim&gt;(<ref refid="dc/d9e/a01305_1a089f6bc160374739a5111aa99e2f4b95" kindref="member">myDim</ref><sp/>*<sp/>i)<sp/>-=<sp/>udCi<sp/>*<sp/>fExt<sp/>*<sp/>intElement;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>External<sp/>forces,<sp/>boundary<sp/>forces,<sp/>i.e.,<sp/>at<sp/>the<sp/>Neumann<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/><ref refid="dc/d9e/a01305_1ad719bcc95293fbe32f399a782bebd684" kindref="member">neumannBoundary</ref><sp/>and<sp/>not<sp/><ref refid="dc/d9e/a01305_1ae7c7cf234fdfd2b1e5e4b851449ae72d" kindref="member">neumannBoundaryLoad</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="dc/d9e/a01305_1a89b811cd039a701d8a1d2c5b8796c50f" kindref="member">displacementFunction</ref>(par,<sp/>dx);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element<sp/>=<sp/>this-&gt;<ref refid="d4/d10/a01197_1a4b49c02de08fb5c115affa646c5f249a" kindref="member">localView</ref>().element();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>intersection<sp/>:<sp/>intersections(<ref refid="dc/d9e/a01305_1ad719bcc95293fbe32f399a782bebd684" kindref="member">neumannBoundary</ref>-&gt;gridView(),<sp/>element))<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/><ref refid="dc/d9e/a01305_1ad719bcc95293fbe32f399a782bebd684" kindref="member">neumannBoundary</ref>-&gt;contains(intersection))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Integration<sp/>rule<sp/>along<sp/>the<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>quadLine<sp/>=<sp/>Dune::QuadratureRules&lt;double,<sp/>myDim<sp/>-<sp/>1&gt;::rule(intersection.type(),<sp/><ref refid="dc/d9e/a01305_1af22294395e75ecd2bba06e5716215605" kindref="member">order</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curQuad<sp/>:<sp/>quadLine)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/da0/a01341" kindref="compound">Dune::FieldVector&lt;double, myDim&gt;</ref>&amp;<sp/>quadPos<sp/>=<sp/>intersection.geometryInInside().global(curQuad.position());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>intElement<sp/>=<sp/>intersection.geometry().integrationElement(curQuad.position());</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>of<sp/>the<sp/>local<sp/>function<sp/>wrt<sp/>the<sp/>i-th<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="dc/d9e/a01305_1abad7fc68b05918d1fa3dac025de1eefe" kindref="member">numberOfNodes</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>udCi<sp/>=<sp/>u.evaluateDerivative(quadPos,<sp/>wrt(coeff(i)));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>of<sp/>the<sp/>Neumann<sp/>data<sp/>at<sp/>the<sp/>current<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>neumannValue<sp/>=<sp/><ref refid="dc/d9e/a01305_1ae7c7cf234fdfd2b1e5e4b851449ae72d" kindref="member">neumannBoundaryLoad</ref>(intersection.geometry().global(curQuad.position()),<sp/>lambda);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force.template<sp/>segment&lt;myDim&gt;(<ref refid="dc/d9e/a01305_1a089f6bc160374739a5111aa99e2f4b95" kindref="member">myDim</ref><sp/>*<sp/>i)<sp/>-=<sp/>udCi<sp/>*<sp/>neumannValue<sp/>*<sp/>curQuad.weight()<sp/>*<sp/>intElement;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>error<sp/>NonLinearElastic<sp/>depends<sp/>on<sp/>dune-localfefunctions,<sp/>which<sp/>is<sp/>not<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh"/>
  </compounddef>
</doxygen>
