<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00029" kind="file" language="C++">
    <compoundname>functionhelper.hh</compoundname>
    <includes local="no">ranges</includes>
    <incdepgraph>
      <node id="1">
        <label>functionhelper.hh</label>
        <link refid="a00029"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ranges</label>
      </node>
    </incdepgraph>
    <innernamespace refid="a00351">Ikarus</innernamespace>
    <innernamespace refid="a00364">Ikarus::utils</innernamespace>
    <briefdescription>
<para>Helper for dune-functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ranges&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00364" kindref="compound">Ikarus::utils</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LV&gt;</highlight></codeline>
<codeline lineno="25" refid="a00346_1gac0aa110e209c93e655de9df0915c2fcc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00346_1gac0aa110e209c93e655de9df0915c2fcc" kindref="member">obtainLagrangeNodePositions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LV&amp;<sp/>localView,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<ref refid="a01619" kindref="compound">Dune::FieldVector&lt;double, size&gt;</ref>&gt;&amp;<sp/>lagrangeNodeCoords)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="a01756" kindref="compound">Concepts::LagrangeNode</ref>&lt;std::remove_cvref_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(localView.tree().child(0))&gt;&gt;,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>function<sp/>is<sp/>only<sp/>supported<sp/>for<sp/>Lagrange<sp/>basis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>assert(localView.bound()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>local<sp/>view<sp/>must<sp/>be<sp/>bound<sp/>to<sp/>an<sp/>element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>localFE<sp/>=<sp/>localView.tree().child(0).finiteElement();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>lagrangeNodeCoords.resize(localFE.size());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>out;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ithCoord<sp/>=<sp/>[&amp;i](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01619" kindref="compound">Dune::FieldVector&lt;double, size&gt;</ref>&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x[i];<sp/>};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>localFE.localInterpolation().interpolate(ithCoord,<sp/>out);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>out.size();<sp/>j++)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodeCoords[j][i]<sp/>=<sp/>out[j];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>nCoord<sp/>:<sp/>lagrangeNodeCoords)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>nCoord<sp/>=<sp/>localView.element().geometry().global(nCoord);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FE&gt;</highlight></codeline>
<codeline lineno="51" refid="a00346_1ga30df35336d19b00bc5db2a0b52ce650e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00346_1ga30df35336d19b00bc5db2a0b52ce650e" kindref="member">referenceElementSubEntityPositions</ref>(<ref refid="a01255" kindref="compound">FE</ref>&amp;<sp/>fe,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codim)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a01315_1ae15b8efa9f66a3caee81d99dd5c648de" kindref="member">FE::Traits::mydim</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>fe.<ref refid="a01255_1ae84fc54bd26077a2edb0ec07361d0716" kindref="member">gridElement</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>referenceElement<sp/>=<sp/>Dune::referenceElement&lt;double,<sp/>dim&gt;(element.type());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberOfVertices<sp/><sp/><sp/>=<sp/>referenceElement.size(codim);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getPosition<sp/>=<sp/>[=](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>referenceElement.position(i,<sp/>codim);<sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::views::transform(std::views::iota(0,<sp/>numberOfVertices),<sp/>getPosition);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FE&gt;</highlight></codeline>
<codeline lineno="69" refid="a00346_1ga8c05dce8a66fc4efbe31674b87d18298" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00346_1ga8c05dce8a66fc4efbe31674b87d18298" kindref="member">referenceElementVertexPositions</ref>(<ref refid="a01255" kindref="compound">FE</ref>&amp;<sp/>fe)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a00346_1ga30df35336d19b00bc5db2a0b52ce650e" kindref="member">referenceElementSubEntityPositions</ref>(fe,<sp/><ref refid="a01315_1ae15b8efa9f66a3caee81d99dd5c648de" kindref="member">FE::Traits::mydim</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::utils</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/functionhelper.hh"/>
  </compounddef>
</doxygen>
