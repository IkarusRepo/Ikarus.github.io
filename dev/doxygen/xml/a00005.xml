<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00005" kind="file" language="C++">
    <compoundname>traversal.hh</compoundname>
    <includedby refid="a00263" local="no">fehelper.hh</includedby>
    <invincdepgraph>
      <node id="11">
        <label>simpleassemblers.hh</label>
        <link refid="a00188"/>
      </node>
      <node id="2">
        <label>fehelper.hh</label>
        <link refid="a00263"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>enhancedassumedstrains.hh</label>
        <link refid="a00245"/>
      </node>
      <node id="4">
        <label>kirchhoffloveshell.hh</label>
        <link refid="a02449"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>linearelastic.hh</label>
        <link refid="a02455"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>nonlinearelastic.hh</label>
        <link refid="a02461"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>kirchhoffloveshell.hh</label>
        <link refid="a02452"/>
      </node>
      <node id="7">
        <label>linearelastic.hh</label>
        <link refid="a02458"/>
      </node>
      <node id="10">
        <label>nonlinearelastic.hh</label>
        <link refid="a02464"/>
      </node>
      <node id="8">
        <label>registerelement.hh</label>
        <link refid="a00275"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>traversal.hh</label>
        <link refid="a00005"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="a00325">Ikarus</innernamespace>
    <innernamespace refid="a00336">Ikarus::utils</innernamespace>
    <briefdescription>
<para>Contains functions to traverse through a tree to its different nodes. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00336" kindref="compound">Ikarus::utils</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TreePath,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PowerFunc,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LeafFunc&gt;</highlight></codeline>
<codeline lineno="30" refid="a00336_1a63742d75d099b93da7ddf6e78a3c1f56" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a00336_1a63742d75d099b93da7ddf6e78a3c1f56" kindref="member">forEachLeafOrPowerLeafNode</ref>(T&amp;&amp;<sp/>tree,<sp/>TreePath&amp;&amp;<sp/>treePath,<sp/>PowerFunc&amp;&amp;<sp/>powerFunc,<sp/>LeafFunc&amp;&amp;<sp/>leafFunc)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Tree<sp/>=<sp/>std::decay_t&lt;T&gt;;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(Tree::isLeaf)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>leafFunc(tree,<sp/>treePath);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(Tree::isPower)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(Tree::template<sp/>Child&lt;Dune::Indices::_0&gt;::Type::isLeaf)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>powerFunc(tree,<sp/>treePath);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tree.degree();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childTreePath<sp/>=<sp/>Dune::TypeTree::push_back(treePath,<sp/>i);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00336_1a63742d75d099b93da7ddf6e78a3c1f56" kindref="member">forEachLeafOrPowerLeafNode</ref>(tree.child(i),<sp/>childTreePath,<sp/>powerFunc,<sp/>leafFunc);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indices<sp/>=<sp/>std::make_index_sequence&lt;Tree::degree()&gt;{};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>Dune::Hybrid::forEach(indices,<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childTreePath<sp/>=<sp/>Dune::TypeTree::push_back(treePath,<sp/>i);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00336_1a63742d75d099b93da7ddf6e78a3c1f56" kindref="member">forEachLeafOrPowerLeafNode</ref>(tree.child(i),<sp/>childTreePath,<sp/>powerFunc,<sp/>leafFunc);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::utils</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traversal.hh"/>
  </compounddef>
</doxygen>
