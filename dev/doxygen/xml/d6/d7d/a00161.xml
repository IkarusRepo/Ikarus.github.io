<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="d6/d7d/a00161" kind="file" language="C++">
    <compoundname>resultevaluators.hh</compoundname>
    <includes local="no">dune/common/math.hh</includes>
    <includes refid="df/dc8/a00122" local="no">ikarus/finiteelements/ferequirements.hh</includes>
    <includedby refid="db/ddf/a00164" local="no">resultfunction.hh</includedby>
    <incdepgraph>
      <node id="3">
        <label>ikarus/finiteelements/ferequirements.hh</label>
        <link refid="df/dc8/a00122"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>resultevaluators.hh</label>
        <link refid="d6/d7d/a00161"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="d4/dee/a00008"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Eigen/Core</label>
      </node>
      <node id="8">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="2">
        <label>dune/common/math.hh</label>
      </node>
      <node id="4">
        <label>iosfwd</label>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="6">
        <label>set</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>resultevaluators.hh</label>
        <link refid="d6/d7d/a00161"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>resultfunction.hh</label>
        <link refid="db/ddf/a00164"/>
      </node>
    </invincdepgraph>
    <innerclass refid="d4/d2c/a01327" prot="public">Ikarus::ResultEvaluators::VonMises</innerclass>
    <innerclass refid="dc/d8e/a01331" prot="public">Ikarus::ResultEvaluators::PrincipalStress</innerclass>
    <innernamespace refid="db/d7b/a00296">Dune</innernamespace>
    <innernamespace refid="d8/d0a/a00292">Ikarus</innernamespace>
    <innernamespace refid="d3/d4a/a00297">Ikarus::ResultEvaluators</innernamespace>
    <briefdescription>
<para><ref refid="d8/d0a/a00292" kindref="compound">Ikarus</ref> Result Evaluators for Stress Analysis. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/common/math.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="df/dc8/a00122" kindref="compound">ikarus/finiteelements/ferequirements.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="db/d7b/a00296" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="db/d7b/a00296" kindref="compound">Dune</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Forward<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="20" refid="db/da8/a01323" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="db/da8/a01323" kindref="compound">FieldVector</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Dune</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="d3/d4a/a00297" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d3/d4a/a00297" kindref="compound">Ikarus::ResultEvaluators</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="d4/d2c/a01327" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d2c/a01327" kindref="compound">VonMises</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ElementType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FERequirements,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="37" refid="d4/d2c/a01327_1a1cf7d88462db0aba4e49e6c635269c46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d4/d2c/a01327_1a1cf7d88462db0aba4e49e6c635269c46" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ElementType&amp;<sp/>fe,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements&lt;FERequirements&gt;</ref>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/da8/a01323" kindref="compound">Dune::FieldVector&lt;ScalarType, size&gt;</ref>&amp;<sp/>pos,<sp/>[[maybe_unused]]<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(size<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d39/a01219" kindref="compound">ResultTypeMap&lt;ScalarType&gt;</ref><sp/>res_;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fe.calculateAt(req,<sp/>pos,<sp/>res_);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[resultType,<sp/>sigma]<sp/>=<sp/>res_.<ref refid="d5/d39/a01219_1a6c2c52fc90ff0af02def08b0c8f5deb2" kindref="member">getSingleResult</ref>();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(resultType<sp/>==<sp/><ref refid="d2/d82/a00279_1gga531be167e924b749eb8b4ccc7f1c18c9a823b6a2b943cfaf747fe3b45bd1a5f02" kindref="member">ResultType::cauchyStress</ref><sp/>or<sp/>resultType<sp/>==<sp/><ref refid="d2/d82/a00279_1gga531be167e924b749eb8b4ccc7f1c18c9afa06a140291f2b4bc25c81e5e6bac241" kindref="member">ResultType::PK2Stress</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_x<sp/><sp/>=<sp/>sigma(0,<sp/>0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_y<sp/><sp/>=<sp/>sigma(1,<sp/>0);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_xy<sp/>=<sp/>sigma(2,<sp/>0);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(std::pow(s_x,<sp/>2)<sp/>+<sp/>Dune::power(s_y,<sp/>2)<sp/>-<sp/>s_x<sp/>*<sp/>s_y<sp/>+<sp/>3<sp/>*<sp/>Dune::power(s_xy,<sp/>2));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="d4/d2c/a01327_1a60952d65a227074bcb68af8ed78d4129" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="d4/d2c/a01327_1a60952d65a227074bcb68af8ed78d4129" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;VonMises&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="d4/d2c/a01327_1acdfd2226b12f3819350f4ea231e337bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/d2c/a01327_1acdfd2226b12f3819350f4ea231e337bf" kindref="member">ncomps</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="dc/d8e/a01331" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/d8e/a01331" kindref="compound">PrincipalStress</ref><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ElementType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FERequirements,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="78" refid="dc/d8e/a01331_1a30ccc009cdf990e107cb807f769bbc5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/d8e/a01331_1a30ccc009cdf990e107cb807f769bbc5b" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ElementType&amp;<sp/>fe,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements&lt;FERequirements&gt;</ref>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/da8/a01323" kindref="compound">Dune::FieldVector&lt;ScalarType, size&gt;</ref>&amp;<sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(size<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d39/a01219" kindref="compound">ResultTypeMap&lt;ScalarType&gt;</ref><sp/>res_;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fe.calculateAt(req,<sp/>pos,<sp/>res_);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[resultType,<sp/>sigma]<sp/>=<sp/>res_.<ref refid="d5/d39/a01219_1a6c2c52fc90ff0af02def08b0c8f5deb2" kindref="member">getSingleResult</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(resultType<sp/>==<sp/><ref refid="d2/d82/a00279_1gga531be167e924b749eb8b4ccc7f1c18c9a823b6a2b943cfaf747fe3b45bd1a5f02" kindref="member">ResultType::cauchyStress</ref><sp/>or<sp/>resultType<sp/>==<sp/><ref refid="d2/d82/a00279_1gga531be167e924b749eb8b4ccc7f1c18c9afa06a140291f2b4bc25c81e5e6bac241" kindref="member">ResultType::PK2Stress</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_x<sp/><sp/>=<sp/>sigma(0,<sp/>0);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_y<sp/><sp/>=<sp/>sigma(1,<sp/>0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_xy<sp/>=<sp/>sigma(2,<sp/>0);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t1<sp/>=<sp/>(s_x<sp/>+<sp/>s_y)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t2<sp/>=<sp/>std::sqrt(Dune::power((s_x<sp/>-<sp/>s_y)<sp/>/<sp/>2,<sp/>2)<sp/>+<sp/>Dune::power(s_xy,<sp/>2));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp<sp/>==<sp/>0<sp/>?<sp/>t1<sp/>+<sp/>t2<sp/>:<sp/>t1<sp/>-<sp/>t2;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="dc/d8e/a01331_1a3bf1a9009747f7fe1e645192bcf6350d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="dc/d8e/a01331_1a3bf1a9009747f7fe1e645192bcf6350d" kindref="member">name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;PrincipalStress&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="dc/d8e/a01331_1a5f3b81a2fcecace3ee76bff9acee54d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dc/d8e/a01331_1a5f3b81a2fcecace3ee76bff9acee54d3" kindref="member">ncomps</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus::ResultEvaluators</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/io/resultevaluators.hh"/>
  </compounddef>
</doxygen>
