<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00278" kind="file" language="C++">
    <compoundname>_ikarus.cc</compoundname>
    <includes local="no">dune/common/float_cmp.hh</includes>
    <includes local="no">dune/python/common/typeregistry.hh</includes>
    <includes local="no">dune/python/pybind11/eigen.h</includes>
    <includes local="no">dune/python/pybind11/operators.h</includes>
    <includes local="no">dune/python/pybind11/pybind11.h</includes>
    <includes refid="a00131" local="no">ikarus/finiteelements/ferequirements.hh</includes>
    <includes refid="a00203" local="no">ikarus/python/finiteelements/materials/material.hh</includes>
    <incdepgraph>
      <node id="7">
        <label>ikarus/finiteelements/ferequirements.hh</label>
        <link refid="a00131"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ikarus/finiteelements/mechanics/materials.hh</label>
        <link refid="a00170"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ikarus/finiteelements/mechanics/materials/interface.hh</label>
        <link refid="a00155"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ikarus/finiteelements/mechanics/materials/linearelasticity.hh</label>
        <link refid="a00161"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>ikarus/finiteelements/mechanics/materials/neohooke.hh</label>
        <link refid="a00164"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ikarus/finiteelements/mechanics/materials/strainconversions.hh</label>
        <link refid="a00152"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>svk.hh</label>
        <link refid="a00146"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>tags.hh</label>
        <link refid="a00158"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>ikarus/finiteelements/mechanics/materials/vanishingstress.hh</label>
        <link refid="a00149"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>ikarus/finiteelements/physicshelper.hh</label>
        <link refid="a00125"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ikarus/python/finiteelements/materials/material.hh</label>
        <link refid="a00203"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>ikarus/solver/linearsolver/linearsolver.hh</label>
        <link refid="a00248"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>ikarus/solver/nonlinearsolver/newtonraphson.hh</label>
        <link refid="a00239"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>ikarus/solver/nonlinearsolver/solverinfos.hh</label>
        <link refid="a00236"/>
      </node>
      <node id="30">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a00020"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>ikarus/utils/defaultfunctions.hh</label>
        <link refid="a00029"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>ikarus/utils/linearalgebrahelper.hh</label>
        <link refid="a00065"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00008"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>ikarus/utils/math.hh</label>
        <link refid="a00044"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>ikarus/utils/nonlinearoperator.hh</label>
        <link refid="a00011"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>ikarus/utils/observer/observer.hh</label>
        <link refid="a00224"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>ikarus/utils/observer/observermessages.hh</label>
        <link refid="a00212"/>
      </node>
      <node id="25">
        <label>ikarus/utils/tensorutils.hh</label>
        <link refid="a00017"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00059"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>_ikarus.cc</label>
        <link refid="a00278"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Eigen/Core</label>
      </node>
      <node id="36">
        <label>Eigen/Sparse</label>
      </node>
      <node id="54">
        <label>Eigen/SparseCore</label>
      </node>
      <node id="47">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="31">
        <label>concepts</label>
      </node>
      <node id="16">
        <label>dune/common/classname.hh</label>
      </node>
      <node id="12">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="2">
        <label>dune/common/float_cmp.hh</label>
      </node>
      <node id="40">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="29">
        <label>dune/common/promotiontraits.hh</label>
      </node>
      <node id="45">
        <label>dune/common/tuplevector.hh</label>
      </node>
      <node id="34">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="35">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="46">
        <label>dune/istl/bvector.hh</label>
      </node>
      <node id="3">
        <label>dune/python/common/typeregistry.hh</label>
      </node>
      <node id="4">
        <label>dune/python/pybind11/eigen.h</label>
      </node>
      <node id="5">
        <label>dune/python/pybind11/operators.h</label>
      </node>
      <node id="6">
        <label>dune/python/pybind11/pybind11.h</label>
      </node>
      <node id="17">
        <label>dune/python/pybind11/stl.h</label>
      </node>
      <node id="60">
        <label>functional</label>
      </node>
      <node id="8">
        <label>iosfwd</label>
      </node>
      <node id="9">
        <label>map</label>
      </node>
      <node id="52">
        <label>memory</label>
      </node>
      <node id="26">
        <label>numeric</label>
      </node>
      <node id="38">
        <label>optional</label>
      </node>
      <node id="44">
        <label>random</label>
      </node>
      <node id="27">
        <label>ranges</label>
      </node>
      <node id="10">
        <label>set</label>
      </node>
      <node id="39">
        <label>tuple</label>
      </node>
      <node id="32">
        <label>type_traits</label>
      </node>
      <node id="28">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
      <node id="24">
        <label>unsupported/Eigen/MatrixFunctions</label>
      </node>
      <node id="33">
        <label>utility</label>
      </node>
      <node id="53">
        <label>variant</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="a01612" prot="public">ValueWrapper</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00278_1a0e4f7cface71bec1c24bbed3aaa798d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PYBIND11_MODULE</definition>
        <argsstring>(_ikarus, m)</argsstring>
        <name>PYBIND11_MODULE</name>
        <param>
          <type>_ikarus</type>
        </param>
        <param>
          <type>m</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/python/ikarus/_ikarus.cc" line="35" column="1" bodyfile="/__w/ikarus/ikarus/repo/python/ikarus/_ikarus.cc" bodystart="35" bodyend="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/common/float_cmp.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/common/typeregistry.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/eigen.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/operators.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/python/pybind11/pybind11.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00131" kindref="compound">ikarus/finiteelements/ferequirements.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00203" kindref="compound">ikarus/python/finiteelements/materials/material.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>since<sp/>python<sp/>does<sp/>not<sp/>support<sp/>passing<sp/>python<sp/>float<sp/>by<sp/>reference<sp/>to<sp/>a<sp/>double&amp;,<sp/>we<sp/>have<sp/>to<sp/>wrap<sp/>everything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>also<sp/>https://pybind11.readthedocs.io/en/stable/faq.html#limitations-involving-reference-arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="16" refid="a01612" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01612" kindref="compound">ValueWrapper</ref></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18" refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="19" refid="a01612_1a840cbb7a2fa7a70861260c860b2c0f1c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref><sp/><ref refid="a01612_1a840cbb7a2fa7a70861260c860b2c0f1c" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>{<ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref><sp/>+<sp/>v.<ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>};<sp/>}</highlight></codeline>
<codeline lineno="20" refid="a01612_1a62fc0039be5a1f0ea0400b5304adbc5b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref><sp/><ref refid="a01612_1a62fc0039be5a1f0ea0400b5304adbc5b" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>{<ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref><sp/>-<sp/>v.<ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>};<sp/>}</highlight></codeline>
<codeline lineno="21" refid="a01612_1a629052781251a1175f8f4b1ed06450c7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref><sp/><ref refid="a01612_1a629052781251a1175f8f4b1ed06450c7" kindref="member">operator-</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>{-<ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>};<sp/>}</highlight></codeline>
<codeline lineno="22" refid="a01612_1a2037771be99237c1bd6e4f0a5a6f2bcd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref><sp/><ref refid="a01612_1a2037771be99237c1bd6e4f0a5a6f2bcd" kindref="member">operator*</ref>(T<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>{<ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref><sp/>*<sp/>value};<sp/>}</highlight></codeline>
<codeline lineno="23" refid="a01612_1a05a02467be4d07a44de78537554ac857" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>&amp;<sp/><ref refid="a01612_1a05a02467be4d07a44de78537554ac857" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref><sp/>+=<sp/>v.<ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="27" refid="a01612_1a88e341a6b09b7e508b5c108c3f9bab73" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>&amp;<sp/><ref refid="a01612_1a88e341a6b09b7e508b5c108c3f9bab73" kindref="member">operator*=</ref>(T<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref><sp/>*=<sp/>v;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="a01612_1af5de129784d0aad83c2d7c1d0a6effaa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref><sp/><ref refid="a01612_1af5de129784d0aad83c2d7c1d0a6effaa" kindref="member">operator*</ref>(T<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>&amp;<sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="a01612" kindref="compound">ValueWrapper</ref>{f<sp/>*<sp/>v.<ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>};<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="a00278_1a0e4f7cface71bec1c24bbed3aaa798d8" refkind="member"><highlight class="normal"><ref refid="a00278_1a0e4f7cface71bec1c24bbed3aaa798d8" kindref="member">PYBIND11_MODULE</ref>(_ikarus,<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">py<sp/>=<sp/>pybind11;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">pybind11::literals;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="a00316" kindref="compound">Ikarus</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="a00323" kindref="compound">Eigen</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>py::enum_&lt;ScalarAffordances&gt;<sp/>enumSA(m,<sp/></highlight><highlight class="stringliteral">&quot;ScalarAffordances&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>enumSA.value(</highlight><highlight class="stringliteral">&quot;noAffordance&quot;</highlight><highlight class="normal">,<sp/>ScalarAffordances::noAffordance);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>enumSA.value(</highlight><highlight class="stringliteral">&quot;mechanicalPotentialEnergy&quot;</highlight><highlight class="normal">,<sp/>ScalarAffordances::mechanicalPotentialEnergy);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>enumSA.value(</highlight><highlight class="stringliteral">&quot;microMagneticPotentialEnergy&quot;</highlight><highlight class="normal">,<sp/>ScalarAffordances::microMagneticPotentialEnergy);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>py::enum_&lt;VectorAffordances&gt;<sp/>enumVA(m,<sp/></highlight><highlight class="stringliteral">&quot;VectorAffordances&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>enumVA.value(</highlight><highlight class="stringliteral">&quot;noAffordance&quot;</highlight><highlight class="normal">,<sp/>VectorAffordances::noAffordance);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>enumVA.value(</highlight><highlight class="stringliteral">&quot;forces&quot;</highlight><highlight class="normal">,<sp/><ref refid="a00316_1a8d0ca59930b7ae15351497bd14319d1d" kindref="member">VectorAffordances::forces</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>enumVA.value(</highlight><highlight class="stringliteral">&quot;microMagneticForces&quot;</highlight><highlight class="normal">,<sp/>VectorAffordances::microMagneticForces);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>py::enum_&lt;MatrixAffordances&gt;<sp/>enumMA(m,<sp/></highlight><highlight class="stringliteral">&quot;MatrixAffordances&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>enumMA.value(</highlight><highlight class="stringliteral">&quot;noAffordance&quot;</highlight><highlight class="normal">,<sp/>MatrixAffordances::noAffordance);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>enumMA.value(</highlight><highlight class="stringliteral">&quot;geometricstiffness&quot;</highlight><highlight class="normal">,<sp/>MatrixAffordances::geometricstiffness);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>enumMA.value(</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/><ref refid="a00316_1a7e05e861b25ca636c1ccba4b8d2a3831" kindref="member">MatrixAffordances::mass</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>enumMA.value(</highlight><highlight class="stringliteral">&quot;materialstiffness&quot;</highlight><highlight class="normal">,<sp/>MatrixAffordances::materialstiffness);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>enumMA.value(</highlight><highlight class="stringliteral">&quot;stiffness&quot;</highlight><highlight class="normal">,<sp/><ref refid="a00316_1a5185740b975fb7539a6e07553a061b26" kindref="member">MatrixAffordances::stiffness</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>enumMA.value(</highlight><highlight class="stringliteral">&quot;microMagneticHessian&quot;</highlight><highlight class="normal">,<sp/>MatrixAffordances::microMagneticHessian);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>enumMA.value(</highlight><highlight class="stringliteral">&quot;stiffnessdiffBucklingVector&quot;</highlight><highlight class="normal">,<sp/><ref refid="a00316_1a8191d0e317e1bea2a35d6c8a8f20750f" kindref="member">MatrixAffordances::stiffnessdiffBucklingVector</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>py::enum_&lt;FESolutions&gt;<sp/>feSol(m,<sp/></highlight><highlight class="stringliteral">&quot;FESolutions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>feSol.value(</highlight><highlight class="stringliteral">&quot;noSolution&quot;</highlight><highlight class="normal">,<sp/>FESolutions::noSolution);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>feSol.value(</highlight><highlight class="stringliteral">&quot;displacement&quot;</highlight><highlight class="normal">,<sp/>FESolutions::displacement);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>feSol.value(</highlight><highlight class="stringliteral">&quot;velocity&quot;</highlight><highlight class="normal">,<sp/>FESolutions::velocity);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>feSol.value(</highlight><highlight class="stringliteral">&quot;director&quot;</highlight><highlight class="normal">,<sp/>FESolutions::director);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>feSol.value(</highlight><highlight class="stringliteral">&quot;magnetizationAndVectorPotential&quot;</highlight><highlight class="normal">,<sp/>FESolutions::magnetizationAndVectorPotential);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>py::enum_&lt;FEParameter&gt;<sp/>fePar(m,<sp/></highlight><highlight class="stringliteral">&quot;FEParameter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>fePar.value(</highlight><highlight class="stringliteral">&quot;noParameter&quot;</highlight><highlight class="normal">,<sp/>FEParameter::noParameter);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>fePar.value(</highlight><highlight class="stringliteral">&quot;loadfactor&quot;</highlight><highlight class="normal">,<sp/>FEParameter::loadfactor);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>fePar.value(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>FEParameter::time);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>py::enum_&lt;ResultType&gt;<sp/>resType(m,<sp/></highlight><highlight class="stringliteral">&quot;ResultType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;noType&quot;</highlight><highlight class="normal">,<sp/>ResultType::noType);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;magnetization&quot;</highlight><highlight class="normal">,<sp/>ResultType::magnetization);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;gradientNormOfMagnetization&quot;</highlight><highlight class="normal">,<sp/>ResultType::gradientNormOfMagnetization);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;vectorPotential&quot;</highlight><highlight class="normal">,<sp/>ResultType::vectorPotential);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;divergenceOfVectorPotential&quot;</highlight><highlight class="normal">,<sp/>ResultType::divergenceOfVectorPotential);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;BField&quot;</highlight><highlight class="normal">,<sp/>ResultType::BField);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;HField&quot;</highlight><highlight class="normal">,<sp/>ResultType::HField);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;cauchyStress&quot;</highlight><highlight class="normal">,<sp/>ResultType::cauchyStress);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;PK2Stress&quot;</highlight><highlight class="normal">,<sp/>ResultType::PK2Stress);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;linearStress&quot;</highlight><highlight class="normal">,<sp/>ResultType::linearStress);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>resType.value(</highlight><highlight class="stringliteral">&quot;director&quot;</highlight><highlight class="normal">,<sp/>ResultType::director);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">VWd<sp/>=<sp/><ref refid="a01612" kindref="compound">ValueWrapper&lt;double&gt;</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>valueWrapperDouble<sp/>=</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Python::insertClass&lt;VWd&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ValueWrapper&quot;</highlight><highlight class="normal">,<sp/>Dune::Python::GenerateTypeName(</highlight><highlight class="stringliteral">&quot;ValueWrapper&lt;double&gt;&quot;</highlight><highlight class="normal">)).first;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>valueWrapperDouble.def(py::init&lt;double&gt;());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>valueWrapperDouble.def(</highlight><highlight class="stringliteral">&quot;__repr__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VWd&amp;<sp/>d)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::to_string(d.val);<sp/>});</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>valueWrapperDouble.def(</highlight><highlight class="stringliteral">&quot;__eq__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VWd&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VWd&amp;<sp/>y)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Dune::FloatCmp::eq(x.val,<sp/>y.val);<sp/>});</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>valueWrapperDouble.def(</highlight><highlight class="stringliteral">&quot;__eq__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VWd&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>y)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Dune::FloatCmp::eq(x.val,<sp/>y);<sp/>});</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>valueWrapperDouble.def(</highlight><highlight class="stringliteral">&quot;__eq__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VWd&amp;<sp/>y)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Dune::FloatCmp::eq(x,<sp/>y.val);<sp/>});</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>valueWrapperDouble.def(py::self<sp/>+<sp/>py::self)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::self<sp/>-<sp/>py::self)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::self<sp/>+=<sp/>py::self)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def(-py::self)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::self<sp/>*=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">())</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">()<sp/>*<sp/>py::self)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::self<sp/>*<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">FEreq<sp/><sp/><sp/>=<sp/><ref refid="a01240" kindref="compound">FERequirements&lt;Ref&lt;VectorXd&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>includes<sp/>=<sp/>Dune::Python::IncludeFiles{</highlight><highlight class="stringliteral">&quot;ikarus/finiteelements/ferequirements.hh&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lv<sp/>=</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Python::insertClass&lt;FEreq&gt;(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;FERequirements&quot;</highlight><highlight class="normal">,<sp/>Dune::Python::GenerateTypeName(</highlight><highlight class="stringliteral">&quot;FERequirements&lt;Eigen::Ref&lt;Eigen::VectorXd&gt;&gt;&quot;</highlight><highlight class="normal">),<sp/>includes)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.first;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>lv.def(<ref refid="a00316_1ac8243891c1b961e50a066140ab79a142" kindref="member">py::init</ref>());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;addAffordance&quot;</highlight><highlight class="normal">,<sp/>[](FEreq&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga8a33210894e12be4feb3d96fdfde215c" kindref="member">ScalarAffordances</ref>&amp;<sp/>affordances)<sp/>{<sp/>self.addAffordance(affordances);<sp/>});</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;addAffordance&quot;</highlight><highlight class="normal">,<sp/>[](FEreq&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga122268ff4d2c0beee58799d85ba5e52a" kindref="member">VectorAffordances</ref>&amp;<sp/>affordances)<sp/>{<sp/>self.addAffordance(affordances);<sp/>});</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;addAffordance&quot;</highlight><highlight class="normal">,<sp/>[](FEreq&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref>&amp;<sp/>affordances)<sp/>{<sp/>self.addAffordance(affordances);<sp/>});</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>lv.def(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;insertGlobalSolution&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](FEreq&amp;<sp/>self,<sp/><ref refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref><sp/>solType,<sp/>Ref&lt;VectorXd&gt;<sp/>solVec)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.insertGlobalSolution(std::move(solType),<sp/>solVec);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;solutionType&quot;</highlight><highlight class="normal">_a,<sp/></highlight><highlight class="stringliteral">&quot;solutionVector&quot;</highlight><highlight class="normal">_a.noconvert());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>lv.def(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;getGlobalSolution&quot;</highlight><highlight class="normal">,<sp/>[](FEreq&amp;<sp/>self,<sp/><ref refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref><sp/>solType)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getGlobalSolution(std::move(solType));<sp/>},</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>py::return_value_policy::reference_internal);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>lv.def(</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;insertParameter&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](FEreq&amp;<sp/>self,<sp/><ref refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref><sp/>parType,<sp/><ref refid="a01612" kindref="compound">ValueWrapper&lt;double&gt;</ref>&amp;<sp/>parVal)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.insertParameter(std::move(parType),<sp/>parVal.<ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>py::keep_alive&lt;1,<sp/>3&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;FEParameter&quot;</highlight><highlight class="normal">_a,<sp/></highlight><highlight class="stringliteral">&quot;parameterValue&quot;</highlight><highlight class="normal">_a.noconvert());</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>lv.def(</highlight><highlight class="stringliteral">&quot;getParameter&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FEreq&amp;<sp/>self,<sp/><ref refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref><sp/>parType)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getParameter(std::move(parType));<sp/>});</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ResReq<sp/>=<sp/><ref refid="a01252" kindref="compound">ResultRequirements&lt;FEreq&gt;</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resReq<sp/>=<sp/>Dune::Python::insertClass&lt;ResReq&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ResultRequirements&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Python::GenerateTypeName(</highlight><highlight class="stringliteral">&quot;ResultRequirements&lt;FEreq&gt;&quot;</highlight><highlight class="normal">),<sp/>includes)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.first;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>resReq.def(<ref refid="a00316_1ac8243891c1b961e50a066140ab79a142" kindref="member">py::init</ref>());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>resReq.def(</highlight><highlight class="stringliteral">&quot;addAffordance&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](ResReq&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga8a33210894e12be4feb3d96fdfde215c" kindref="member">ScalarAffordances</ref>&amp;<sp/>affordances)<sp/>{<sp/>self.addAffordance(affordances);<sp/>});</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>resReq.def(</highlight><highlight class="stringliteral">&quot;addAffordance&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](ResReq&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga122268ff4d2c0beee58799d85ba5e52a" kindref="member">VectorAffordances</ref>&amp;<sp/>affordances)<sp/>{<sp/>self.addAffordance(affordances);<sp/>});</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>resReq.def(</highlight><highlight class="stringliteral">&quot;addAffordance&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](ResReq&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref>&amp;<sp/>affordances)<sp/>{<sp/>self.addAffordance(affordances);<sp/>});</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>resReq.def(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;insertGlobalSolution&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](ResReq&amp;<sp/>self,<sp/><ref refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref><sp/>solType,<sp/>Ref&lt;VectorXd&gt;<sp/>solVec)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.insertGlobalSolution(std::move(solType),<sp/>solVec);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;solutionType&quot;</highlight><highlight class="normal">_a,<sp/></highlight><highlight class="stringliteral">&quot;solutionVector&quot;</highlight><highlight class="normal">_a.noconvert());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>resReq.def(</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;insertParameter&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](ResReq&amp;<sp/>self,<sp/><ref refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref><sp/>parType,<sp/><ref refid="a01612" kindref="compound">ValueWrapper&lt;double&gt;</ref>&amp;<sp/>parVal)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.insertParameter(std::move(parType),<sp/>parVal.<ref refid="a01612_1a3e1a112127fa4c7b3cf7569ebd04251f" kindref="member">val</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>py::keep_alive&lt;1,<sp/>3&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;FEParameter&quot;</highlight><highlight class="normal">_a,<sp/></highlight><highlight class="stringliteral">&quot;parameterValue&quot;</highlight><highlight class="normal">_a.noconvert());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>resReq.def(</highlight><highlight class="stringliteral">&quot;addResultRequest&quot;</highlight><highlight class="normal">,<sp/>[](ResReq&amp;<sp/>self,<sp/><ref refid="a00303_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref><sp/>rType)<sp/>{<sp/>self.addResultRequest(std::move(rType));<sp/>});</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>materials<sp/>=<sp/>m.def_submodule(</highlight><highlight class="stringliteral">&quot;materials&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>submodule<sp/>for<sp/>materials<sp/>in<sp/>Ikarus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>pybind11::class_&lt;LinearElasticity&gt;<sp/>linElastic(materials,<sp/></highlight><highlight class="stringliteral">&quot;LinearElasticity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>Ikarus::Python::registerLinearElasticity(materials,<sp/>linElastic);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>pybind11::class_&lt;StVenantKirchhoff&gt;<sp/>svk(materials,<sp/></highlight><highlight class="stringliteral">&quot;StVenantKirchhoff&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>Ikarus::Python::registerStVenantKirchhoff(materials,<sp/>svk);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>pybind11::class_&lt;NeoHooke&gt;<sp/>nh(materials,<sp/></highlight><highlight class="stringliteral">&quot;NeoHooke&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>Ikarus::Python::registerNeoHooke(materials,<sp/>nh);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/python/ikarus/_ikarus.cc"/>
  </compounddef>
</doxygen>
