<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00340" kind="namespace" language="C++">
    <compoundname>Ikarus::Python</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00320_1gaeab1c5f959a22f95b40b0a7576f9c896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Assembler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerSparseFlatAssembler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Assembler, options... &gt; cls)</argsstring>
        <name>registerSparseFlatAssembler</name>
        <qualifiedname>Ikarus::Python::registerSparseFlatAssembler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Assembler, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00340" kindref="compound">Python</ref> bindings for a <ref refid="a01184" kindref="compound">SparseFlatAssembler</ref> class. <linebreak/>
. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00340" kindref="compound">Python</ref> bindings for a <ref refid="a01184" kindref="compound">SparseFlatAssembler</ref> class, allowing it to be used in <ref refid="a00340" kindref="compound">Python</ref> scripts. <linebreak/>
 This function is a result of the macro <computeroutput><ref refid="a00272_1adda74d8564a01c0a9851a4379308a8b2" kindref="member">MAKE_ASSEMBLER_REGISTERY_FUNCTION( SparseFlatAssembler )</ref></computeroutput>. <linebreak/>
 <linebreak/>
 The registered class will have an initializer that takes a list of finite elements (<computeroutput>fes</computeroutput>) and a <computeroutput>DirichletValuesType</computeroutput> object. <linebreak/>
 It exposes several member functions to <ref refid="a00340" kindref="compound">Python</ref>: <linebreak/>
 <itemizedlist>
<listitem>
<para><computeroutput>getMatrix(req)</computeroutput>: Returns a dense matrix based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getReducedMatrix(req)</computeroutput>: Returns a reduced dense matrix based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getVector(req)</computeroutput>: Returns a vector based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getScalar(req)</computeroutput>: Returns a scalar based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getReducedVector(req)</computeroutput>: Returns a reduced vector based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>createFullVector(redVec)</computeroutput>: Creates a full vector from a reduced vector. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>reducedSize()</computeroutput>: Returns the size of the reduced space. <linebreak/>
 </para>
</listitem>
</itemizedlist>
<linebreak/>
 <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Assembler</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01184" kindref="compound">SparseFlatAssembler</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00340" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00340" kindref="compound">Python</ref> scope where the class should be registered.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01184" kindref="compound">SparseFlatAssembler</ref> class. &lt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" line="69" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="a00320_1ga2b0faffde20690631657489c79ec809b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Assembler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerDenseFlatAssembler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; Assembler, options... &gt; cls)</argsstring>
        <name>registerDenseFlatAssembler</name>
        <qualifiedname>Ikarus::Python::registerDenseFlatAssembler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; Assembler, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00340" kindref="compound">Python</ref> bindings for a <ref refid="a01188" kindref="compound">DenseFlatAssembler</ref> class. <linebreak/>
. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00340" kindref="compound">Python</ref> bindings for a <ref refid="a01188" kindref="compound">DenseFlatAssembler</ref> class, allowing it to be used in <ref refid="a00340" kindref="compound">Python</ref> scripts. <linebreak/>
 This function is a result of the macro <computeroutput><ref refid="a00272_1adda74d8564a01c0a9851a4379308a8b2" kindref="member">MAKE_ASSEMBLER_REGISTERY_FUNCTION( DenseFlatAssembler )</ref></computeroutput>. <linebreak/>
 <linebreak/>
 The registered class will have an initializer that takes a list of finite elements (<computeroutput>fes</computeroutput>) and a <computeroutput>DirichletValuesType</computeroutput> object. <linebreak/>
 It exposes several member functions to <ref refid="a00340" kindref="compound">Python</ref>: <linebreak/>
 <itemizedlist>
<listitem>
<para><computeroutput>getMatrix(req)</computeroutput>: Returns a dense matrix based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getReducedMatrix(req)</computeroutput>: Returns a reduced dense matrix based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getVector(req)</computeroutput>: Returns a vector based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getScalar(req)</computeroutput>: Returns a scalar based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>getReducedVector(req)</computeroutput>: Returns a reduced vector based on the specified <computeroutput>FERequirementType</computeroutput>. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>createFullVector(redVec)</computeroutput>: Creates a full vector from a reduced vector. <linebreak/>
 </para>
</listitem>
<listitem>
<para><computeroutput>reducedSize()</computeroutput>: Returns the size of the reduced space. <linebreak/>
 </para>
</listitem>
</itemizedlist>
<linebreak/>
 <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Assembler</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01188" kindref="compound">DenseFlatAssembler</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00340" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00340" kindref="compound">Python</ref> scope where the class should be registered.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01188" kindref="compound">DenseFlatAssembler</ref> class. &lt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" line="70" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="a00320_1ga2f6146bb687ad25cfb413fbcfd470788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BasisHandler</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerBasisHandler</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; BasisHandler, options... &gt; cls)</argsstring>
        <name>registerBasisHandler</name>
        <qualifiedname>Ikarus::Python::registerBasisHandler</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01484" kindref="compound">BasisHandler</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register a <ref refid="a00340" kindref="compound">Python</ref> wrapper for an <ref refid="a00328" kindref="compound">Ikarus</ref> basis class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01484" kindref="compound">BasisHandler</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a00328" kindref="compound">Ikarus</ref> handler basis class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00340" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00340" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a00328" kindref="compound">Ikarus</ref> basis handler class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/basis/basis.hh" line="37" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/basis/basis.hh" bodystart="37" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="a00320_1ga39b6df6adfe4858b13ac71f5830f29f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DirichletValues</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerDirichletValues</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; DirichletValues, options... &gt; cls)</argsstring>
        <name>registerDirichletValues</name>
        <qualifiedname>Ikarus::Python::registerDirichletValues</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01524" kindref="compound">DirichletValues</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00340" kindref="compound">Python</ref> bindings for a <ref refid="a01524" kindref="compound">DirichletValues</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00340" kindref="compound">Python</ref> bindings for a <ref refid="a01524" kindref="compound">DirichletValues</ref> class, allowing it to be used in <ref refid="a00340" kindref="compound">Python</ref> scripts. The registered class will have an initializer that takes a <computeroutput>Basis</computeroutput> object. It exposes several member functions to <ref refid="a00340" kindref="compound">Python</ref>:<itemizedlist>
<listitem><para><computeroutput>fixBoundaryDOFs(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput>.</para>
</listitem><listitem><para><computeroutput>fixBoundaryDOFsUsingLocalView(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput> with a <computeroutput>LocalView</computeroutput> argument.</para>
</listitem><listitem><para><computeroutput>fixBoundaryDOFsUsingLocalViewAndIntersection(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput> with <computeroutput>LocalView</computeroutput> and <computeroutput>Intersection</computeroutput> arguments.</para>
</listitem><listitem><para><computeroutput>fixDOFs(f)</computeroutput>: Fixes boundary degrees of freedom using a user-defined function <computeroutput>f</computeroutput> with the boolean vector and the basis as arguments.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01524" kindref="compound">DirichletValues</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01524" kindref="compound">DirichletValues</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00340" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00340" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01524" kindref="compound">DirichletValues</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh" line="49" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/dirichletvalues/dirichletvalues.hh" bodystart="49" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="a00320_1ga31d84874c3995448666f6a1e070647d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KirchhoffLoveShell</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerKirchhoffLoveShell</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; KirchhoffLoveShell, options... &gt; cls)</argsstring>
        <name>registerKirchhoffLoveShell</name>
        <qualifiedname>Ikarus::Python::registerKirchhoffLoveShell</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01320" kindref="compound">KirchhoffLoveShell</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00340" kindref="compound">Python</ref> bindings for a <ref refid="a01320" kindref="compound">KirchhoffLoveShell</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00340" kindref="compound">Python</ref> bindings for a <ref refid="a01320" kindref="compound">KirchhoffLoveShell</ref> class, allowing it to be used in <ref refid="a00340" kindref="compound">Python</ref> scripts. The registered class will have several initializers with different sets of parameters.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01320" kindref="compound">KirchhoffLoveShell</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01320" kindref="compound">KirchhoffLoveShell</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00340" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00340" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01320" kindref="compound">KirchhoffLoveShell</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/kirchhoffloveshell.hh" line="45" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/kirchhoffloveshell.hh" bodystart="45" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="a00320_1ga23554c3ebe7088b79af73584b202eff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class LinearElastic</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerLinearElastic</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; LinearElastic, options... &gt; cls)</argsstring>
        <name>registerLinearElastic</name>
        <qualifiedname>Ikarus::Python::registerLinearElastic</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01328" kindref="compound">LinearElastic</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00340" kindref="compound">Python</ref> bindings for a Linear Elastic class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00340" kindref="compound">Python</ref> bindings for a <ref refid="a01328" kindref="compound">LinearElastic</ref> class, allowing it to be used in <ref refid="a00340" kindref="compound">Python</ref> scripts. The registered class will have several initializers with different sets of parameters.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="a01328" kindref="compound">LinearElastic</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="a01328" kindref="compound">LinearElastic</ref> class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00340" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00340" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the <ref refid="a01328" kindref="compound">LinearElastic</ref> class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/linearelastic.hh" line="46" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/linearelastic.hh" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="a00340_1a2cdc302115d5d01f08f150303127978d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::Python::MAKE_MATERIAL_REGISTERY_FUNCTION</definition>
        <argsstring>(LinearElasticity, 6)</argsstring>
        <name>MAKE_MATERIAL_REGISTERY_FUNCTION</name>
        <qualifiedname>Ikarus::Python::MAKE_MATERIAL_REGISTERY_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="a00328_1a5b06e456a4b64c291dedbcf428026ba7" kindref="member">LinearElasticity</ref></type>
        </param>
        <param>
          <type>6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/materials/material.hh" line="146" column="1" declfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/materials/material.hh" declline="146" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00340_1a3d042e3d4c085fd281a2d263ece077ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::Python::MAKE_MATERIAL_REGISTERY_FUNCTION</definition>
        <argsstring>(StVenantKirchhoff, 6)</argsstring>
        <name>MAKE_MATERIAL_REGISTERY_FUNCTION</name>
        <qualifiedname>Ikarus::Python::MAKE_MATERIAL_REGISTERY_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="a00328_1a965823ec0538ab6b5bdf7f69c33f3910" kindref="member">StVenantKirchhoff</ref></type>
        </param>
        <param>
          <type>6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/materials/material.hh" line="147" column="1" declfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/materials/material.hh" declline="147" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00340_1a20c0ab75a990e72f965df8d8172c99b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::Python::MAKE_MATERIAL_REGISTERY_FUNCTION</definition>
        <argsstring>(NeoHooke, 6)</argsstring>
        <name>MAKE_MATERIAL_REGISTERY_FUNCTION</name>
        <qualifiedname>Ikarus::Python::MAKE_MATERIAL_REGISTERY_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="a00328_1ab764233e8704d8d4462d202a362892c8" kindref="member">NeoHooke</ref></type>
        </param>
        <param>
          <type>6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/materials/material.hh" line="148" column="1" declfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/materials/material.hh" declline="148" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="a00340_1a4124469fcacfc527cb971b40fe86e244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class NonLinearElastic</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerNonLinearElastic</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; NonLinearElastic, options... &gt; cls)</argsstring>
        <name>registerNonLinearElastic</name>
        <qualifiedname>Ikarus::Python::registerNonLinearElastic</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; <ref refid="a01368" kindref="compound">NonLinearElastic</ref>, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/nonlinearelastic.hh" line="26" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/nonlinearelastic.hh" bodystart="26" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="a00320_1ga40f83e4d7b90006b1019add3b1b218b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>defaultInitializers</declname>
            <defname>defaultInitializers</defname>
            <defval>true</defval>
          </param>
          <param>
            <type>class FE</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerElement</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; FE, options... &gt; cls)</argsstring>
        <name>registerElement</name>
        <qualifiedname>Ikarus::Python::registerElement</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; FE, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
<para>Register <ref refid="a00340" kindref="compound">Python</ref> bindings for a generic finite element class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="a00340" kindref="compound">Python</ref> bindings for a generic finite element class, allowing it to be used in <ref refid="a00340" kindref="compound">Python</ref> scripts. The registered class will have multiple initializers with different sets of parameters and member functions to calculate results and access properties.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>defaultInitializers</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, include default initializers for the finite element class. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FE</parametername>
</parameternamelist>
<parameterdescription>
<para>The generic finite element class to be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic template parameters for additional options when defining the <ref refid="a00340" kindref="compound">Python</ref> class.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>A Pybind11 handle representing the <ref refid="a00340" kindref="compound">Python</ref> scope where the class should be registered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cls</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pybind11 class template to be used for registering the finite element class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerelement.hh" line="45" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerelement.hh" bodystart="45" bodyend="123"/>
        <referencedby refid="a00320_1ga31d84874c3995448666f6a1e070647d2" compoundref="a02488" startline="45" endline="72">registerKirchhoffLoveShell</referencedby>
        <referencedby refid="a00320_1ga23554c3ebe7088b79af73584b202eff5" compoundref="a02494" startline="46" endline="51">registerLinearElastic</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00340_1a2dff353f014f93e29c1bdfc0ae239483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>defaultInitializers</declname>
            <defname>defaultInitializers</defname>
            <defval>true</defval>
          </param>
          <param>
            <type>class FE</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerCalculateAt</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; FE, options... &gt; cls, auto restultTypesTuple)</argsstring>
        <name>registerCalculateAt</name>
        <qualifiedname>Ikarus::Python::registerCalculateAt</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; FE, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <param>
          <type>auto</type>
          <declname>restultTypesTuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerelement.hh" line="126" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerelement.hh" bodystart="126" bodyend="146"/>
        <referencedby refid="a00320_1ga23554c3ebe7088b79af73584b202eff5" compoundref="a02494" startline="46" endline="51">registerLinearElastic</referencedby>
        <referencedby refid="a00340_1a4124469fcacfc527cb971b40fe86e244" compoundref="a02500" startline="26" endline="108">registerNonLinearElastic</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00340_1a0c4929e934cac15273062246c33ee83b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename, int, int &gt; class</type>
            <declname>RT</declname>
            <defname>RT</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::Python::makeRT</definition>
        <argsstring>()</argsstring>
        <name>makeRT</name>
        <qualifiedname>Ikarus::Python::makeRT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerelement.hh" line="149" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/finiteelements/registerelement.hh" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="a00340_1a331fd78be5a4155963abe5829282c8f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BoundaryPatch</type>
          </param>
          <param>
            <type>class...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::Python::registerBoundaryPatch</definition>
        <argsstring>(pybind11::handle scope, pybind11::class_&lt; BoundaryPatch, options... &gt; cls)</argsstring>
        <name>registerBoundaryPatch</name>
        <qualifiedname>Ikarus::Python::registerBoundaryPatch</qualifiedname>
        <param>
          <type>pybind11::handle</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>pybind11::class_&lt; BoundaryPatch, options... &gt;</type>
          <declname>cls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/python/utils/boundarypatch.hh" line="17" column="6" bodyfile="/__w/ikarus/ikarus/repo/ikarus/python/utils/boundarypatch.hh" bodystart="17" bodyend="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/python/assembler/flatassembler.hh" line="20" column="1"/>
  </compounddef>
</doxygen>
