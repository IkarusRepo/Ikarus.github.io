<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00152" kind="file" language="C++">
    <compoundname>newtonraphsonwithscalarsubsidiaryfunction.hh</compoundname>
    <includes local="no">iosfwd</includes>
    <includes local="no">utility</includes>
    <includes refid="a00137" local="no">ikarus/controlroutines/pathfollowingfunctions.hh</includes>
    <includes refid="a00146" local="no">ikarus/solver/nonlinearsolver/solverinfos.hh</includes>
    <includes refid="a00038" local="no">ikarus/utils/concepts.hh</includes>
    <includes refid="a00170" local="no">ikarus/utils/observer/observer.hh</includes>
    <includes refid="a00158" local="no">ikarus/utils/observer/observermessages.hh</includes>
    <includedby refid="a00122" local="no">pathfollowing.hh</includedby>
    <includedby refid="a00128" local="no">pathfollowing.inl</includedby>
    <incdepgraph>
      <node id="4">
        <label>ikarus/controlroutines/pathfollowingfunctions.hh</label>
        <link refid="a00137"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ikarus/solver/linearsolver/linearsolver.hh</label>
        <link refid="a00143"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>newtonraphsonwithscalarsubsidiaryfunction.hh</label>
        <link refid="a00152"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>ikarus/solver/nonlinearsolver/solverinfos.hh</label>
        <link refid="a00146"/>
      </node>
      <node id="16">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a00038"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ikarus/utils/defaultfunctions.hh</label>
        <link refid="a00047"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>linearalgebrahelper.hh</label>
        <link refid="a00050"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00056"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>ikarus/utils/observer/observer.hh</label>
        <link refid="a00170"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>ikarus/utils/observer/observermessages.hh</label>
        <link refid="a00158"/>
      </node>
      <node id="21">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00023"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Eigen/Core</label>
      </node>
      <node id="20">
        <label>Eigen/Sparse</label>
      </node>
      <node id="15">
        <label>Eigen/SparseCore</label>
      </node>
      <node id="30">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="17">
        <label>concepts</label>
      </node>
      <node id="9">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="23">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="28">
        <label>dune/common/tuplevector.hh</label>
      </node>
      <node id="18">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="19">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="29">
        <label>dune/istl/bvector.hh</label>
      </node>
      <node id="2">
        <label>iosfwd</label>
      </node>
      <node id="33">
        <label>map</label>
      </node>
      <node id="12">
        <label>memory</label>
      </node>
      <node id="6">
        <label>optional</label>
      </node>
      <node id="26">
        <label>random</label>
      </node>
      <node id="27">
        <label>ranges</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="22">
        <label>tuple</label>
      </node>
      <node id="13">
        <label>type_traits</label>
      </node>
      <node id="3">
        <label>utility</label>
      </node>
      <node id="14">
        <label>variant</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>pathfollowing.hh</label>
        <link refid="a00122"/>
      </node>
      <node id="3">
        <label>pathfollowing.inl</label>
        <link refid="a00128"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>newtonraphsonwithscalarsubsidiaryfunction.hh</label>
        <link refid="a00152"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="a01415" prot="public">Ikarus::NewtonRaphsonWithSubsidiaryFunctionSettings</innerclass>
    <innerclass refid="a01419" prot="public">Ikarus::NewtonRaphsonWithSubsidiaryFunction</innerclass>
    <innernamespace refid="a00325">Ikarus</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00137" kindref="compound">ikarus/controlroutines/pathfollowingfunctions.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00146" kindref="compound">ikarus/solver/nonlinearsolver/solverinfos.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00038" kindref="compound">ikarus/utils/concepts.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00170" kindref="compound">ikarus/utils/observer/observer.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00158" kindref="compound">ikarus/utils/observer/observermessages.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00325" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="25" refid="a01415" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01415" kindref="compound">NewtonRaphsonWithSubsidiaryFunctionSettings</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27" refid="a01415_1a7e8e3668e5eca2b115ec77fcaabc8899" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="a01415_1a7e8e3668e5eca2b115ec77fcaabc8899" kindref="member">tol</ref>{1e-8};</highlight></codeline>
<codeline lineno="28" refid="a01415_1a7ef35a86ec4e9a39bcc54182c5dc17b7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a01415_1a7ef35a86ec4e9a39bcc54182c5dc17b7" kindref="member">maxIter</ref>{20};</highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LS<sp/>=<sp/>utils::SolverDefault,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UF<sp/>=<sp/>utils::UpdateDefault&gt;</highlight></codeline>
<codeline lineno="42" refid="a01419" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01419" kindref="compound">NewtonRaphsonWithSubsidiaryFunction</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="a01567" kindref="compound">IObservable</ref>&lt;NonLinearSolverMessages&gt;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="46" refid="a01419_1a371ae6b37b18c88c4e2c0f14e52eada5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="a01419_1a371ae6b37b18c88c4e2c0f14e52eada5" kindref="member">isLinearSolver</ref><sp/>=</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a01627" kindref="compound">Ikarus::Concepts::LinearSolverCheck&lt;LS, typename NLO::DerivativeType, typename NLO::ValueType&gt;</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="a01419_1a2bfe4785b1216911ef967fea45a4b9e8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01419_1a2bfe4785b1216911ef967fea45a4b9e8" kindref="member">ValueType</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO::template<sp/>ParameterValue&lt;0&gt;;</highlight></codeline>
<codeline lineno="52" refid="a01419_1a129397c33f072adf0a119868280ae165" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01419_1a129397c33f072adf0a119868280ae165" kindref="member">UpdateFunctionType</ref><sp/>=<sp/>UF;</highlight></codeline>
<codeline lineno="53" refid="a01419_1aef79b0fa82503669e86d848d842cf5d8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01419_1aef79b0fa82503669e86d848d842cf5d8" kindref="member">NonLinearOperator</ref><sp/><sp/>=<sp/>NLO;<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="a01419_1a82102504f9b0a43523019304badf74f9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01419_1a82102504f9b0a43523019304badf74f9" kindref="member">NewtonRaphsonWithSubsidiaryFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NLO&amp;<sp/><ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>,<sp/>LS&amp;&amp;<sp/>linearSolver<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a01419_1a129397c33f072adf0a119868280ae165" kindref="member">UpdateFunctionType</ref><sp/>updateFunction<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>nonLinearOperator_{<ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>},</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver_{std::move(linearSolver)},</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateFunction_{updateFunction}<sp/>{}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="a01419_1a608cbd1e584a4bdfe68b14c9609ee30f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01419_1a608cbd1e584a4bdfe68b14c9609ee30f" kindref="member">setup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01415" kindref="compound">NewtonRaphsonWithSubsidiaryFunctionSettings</ref>&amp;<sp/>settings)<sp/>{<sp/>settings_<sp/>=<sp/>settings;<sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOXYGEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NoPredictor</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SolutionType<sp/>=<sp/>NoPredictor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Subs</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">iaryType&gt;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::is_same_v&lt;SolutionType,<sp/>NoPredictor&gt;<sp/>||</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible_v&lt;SolutionType,<sp/>std::remove_cvref_t&lt;typename<sp/>NLO::ValueType&gt;&gt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>[[nodiscard(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>solve<sp/>method<sp/>returns<sp/>information<sp/>of<sp/>the<sp/>solution<sp/>process.<sp/>You<sp/>should<sp/>store<sp/>this<sp/>information<sp/>and<sp/>check<sp/>if<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;it<sp/>was<sp/>successful&quot;</highlight><highlight class="normal">)]]<sp/>NonLinearSolverInformation</highlight></codeline>
<codeline lineno="97" refid="a01419_1a27ce0e601431f3e24998e621be769ed9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01419_1a27ce0e601431f3e24998e621be769ed9" kindref="member">solve</ref>(SubsidiaryType&amp;<sp/>subsidiaryFunction,<sp/><ref refid="a01207" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>subsidiaryArgs,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SolutionType&amp;<sp/>dxPredictor<sp/>=<sp/>NoPredictor{})<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="a01567_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="a00319_1gga662b2b6a80547adf4b9ce8b30d87fab5afaee4ca3c30ee18148ce3ada37466498" kindref="member">NonLinearSolverMessages::INIT</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01423" kindref="compound">Ikarus::NonLinearSolverInformation</ref><sp/>solverInformation;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>solverInformation.<ref refid="a01423_1acb65d72d7b2291a9b0d958ce0e4e0887" kindref="member">success</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>().firstParameter();<sp/></highlight><highlight class="comment">//<sp/>x<sp/>=<sp/>D<sp/>(Displacements)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(not<sp/>std::is_same_v&lt;SolutionType,<sp/>NoPredictor&gt;)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateFunction_(x,<sp/>dxPredictor);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lambda<sp/>=<sp/><ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>().lastParameter();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambdaDummy<sp/>=<sp/>lambda;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>DDummy<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>x.setZero();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>lambda<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>().template<sp/>update&lt;0&gt;();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Fext0<sp/>=<sp/>(-<ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>().value()).eval();<sp/></highlight><highlight class="comment">//<sp/>dRdlambda(lambda)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>lambda<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>lambdaDummy;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DDummy;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixX2&lt;double&gt;<sp/>residual2d,<sp/>sol2d;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>().updateAll();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rx<sp/>=<sp/><ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>().value();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>Ax<sp/>=<sp/><ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>().derivative();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>deltaD;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>deltaD.resizeLike(rx);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>deltaD.setZero();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>subsidiaryArgs.<ref refid="a01207_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>.resizeLike(Fext0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>subsidiaryFunction(subsidiaryArgs);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rNorm<sp/>=<sp/>sqrt(rx.dot(rx));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(rNorm)<sp/>dNorm;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter{0};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="a01419_1a371ae6b37b18c88c4e2c0f14e52eada5" kindref="member">isLinearSolver</ref>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver_.<ref refid="a01395_1a771b39a199d35745e0a1cbdec03db762" kindref="member">analyzePattern</ref>(Ax);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rNorm<sp/>&gt;<sp/>settings_.<ref refid="a01415_1a7e8e3668e5eca2b115ec77fcaabc8899" kindref="member">tol</ref><sp/>&amp;&amp;<sp/>iter<sp/>&lt;<sp/>settings_.<ref refid="a01415_1a7ef35a86ec4e9a39bcc54182c5dc17b7" kindref="member">maxIter</ref>)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="a01567_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="a00319_1gga662b2b6a80547adf4b9ce8b30d87fab5afdb2cb9832d112cd92fb2cda8879c3b4" kindref="member">NonLinearSolverMessages::ITERATION_STARTED</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>residual2d.resize(rx.rows(),<sp/>2);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>residual2d<sp/>&lt;&lt;<sp/>-rx,<sp/>Fext0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sol2d.resize(rx.rows(),<sp/>2);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="a01419_1a371ae6b37b18c88c4e2c0f14e52eada5" kindref="member">isLinearSolver</ref>)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver_.<ref refid="a01395_1ad19ae7c98843dd8ecad6586003ed3b5d" kindref="member">factorize</ref>(Ax);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver_.<ref refid="a01395_1aee8cb48155fb74e976d6ccdef6313dac" kindref="member">solve</ref>(sol2d,<sp/>residual2d);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sol2d<sp/>=<sp/>linearSolver(residual2d,<sp/>Ax);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subsidiaryFunction(subsidiaryArgs);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltalambda<sp/>=<sp/>(-subsidiaryArgs.<ref refid="a01207_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref><sp/>-<sp/>subsidiaryArgs.<ref refid="a01207_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>.dot(sol2d.col(0)))<sp/>/</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(subsidiaryArgs.<ref refid="a01207_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>.dot(sol2d.col(1))<sp/>+<sp/>subsidiaryArgs.<ref refid="a01207_1a198c4e48b353f1ebe5c5922bf51e34e5" kindref="member">dfdDlambda</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deltaD<sp/>=<sp/>sol2d.col(0)<sp/>+<sp/>deltalambda<sp/>*<sp/>sol2d.col(1);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateFunction_(x,<sp/>deltaD);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateFunction_(subsidiaryArgs.<ref refid="a01207_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>,<sp/>deltaD);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lambda<sp/>+=<sp/>deltalambda;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subsidiaryArgs.<ref refid="a01207_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref><sp/>+=<sp/>deltalambda;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dNorm<sp/>=<sp/>sqrt(deltaD.dot(deltaD)<sp/>+<sp/>deltalambda<sp/>*<sp/>deltalambda);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>().updateAll();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rNorm<sp/>=<sp/>sqrt(rx.dot(rx)<sp/>+<sp/>subsidiaryArgs.<ref refid="a01207_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref><sp/>*<sp/>subsidiaryArgs.<ref refid="a01207_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="a01567_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="a00319_1gga662b2b6a80547adf4b9ce8b30d87fab5a0d30d757bf062e88728ebe7f8e2b2577" kindref="member">NonLinearSolverMessages::SOLUTION_CHANGED</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lambda));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="a01567_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="a00319_1gga662b2b6a80547adf4b9ce8b30d87fab5a07a63a77745ab72a7e89fb22a8bcfd78" kindref="member">NonLinearSolverMessages::CORRECTIONNORM_UPDATED</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dNorm));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="a01567_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="a00319_1gga662b2b6a80547adf4b9ce8b30d87fab5a721c68980ba6c47122945477a56d7a14" kindref="member">NonLinearSolverMessages::RESIDUALNORM_UPDATED</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rNorm));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="a01567_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="a00319_1gga662b2b6a80547adf4b9ce8b30d87fab5a073d71a89cce6d4b9775987fdbb22815" kindref="member">NonLinearSolverMessages::ITERATION_ENDED</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iter;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>settings_.<ref refid="a01415_1a7ef35a86ec4e9a39bcc54182c5dc17b7" kindref="member">maxIter</ref>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>solverInformation.<ref refid="a01423_1acb65d72d7b2291a9b0d958ce0e4e0887" kindref="member">success</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>solverInformation.<ref refid="a01423_1a81570cd3d9f6589a4d1ba81211f41b99" kindref="member">iterations</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>iter;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>solverInformation.<ref refid="a01423_1ab09859737734f97734f20624f9f3c934" kindref="member">residualNorm</ref><sp/><sp/><sp/>=<sp/>rNorm;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>solverInformation.<ref refid="a01423_1a66f51414779f3e563557157fb688f18b" kindref="member">correctionNorm</ref><sp/>=<sp/>dNorm;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(solverInformation.<ref refid="a01423_1acb65d72d7b2291a9b0d958ce0e4e0887" kindref="member">success</ref>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="a01567_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="a00319_1gga662b2b6a80547adf4b9ce8b30d87fab5a15380ac35d47cdbcbd64aada4bc21931" kindref="member">NonLinearSolverMessages::FINISHED_SUCESSFULLY</ref>,<sp/>iter);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solverInformation;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="a01419_1ad1e2d29e41b8596d709effc804bc8718" kindref="member">nonLinearOperator</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonLinearOperator_;<sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>NLO<sp/>nonLinearOperator_;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="a01395" kindref="compound">LinearSolver</ref><sp/>linearSolver_;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="a01419_1a129397c33f072adf0a119868280ae165" kindref="member">UpdateFunctionType</ref><sp/>updateFunction_;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="a01415" kindref="compound">NewtonRaphsonWithSubsidiaryFunctionSettings</ref><sp/>settings_;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NLO,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LS<sp/>=<sp/>utils::SolverDefault,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UF<sp/>=<sp/>utils::UpdateDefault&gt;</highlight></codeline>
<codeline lineno="215" refid="a00325_1ade2a979ee79a657c6ab7530ee203056f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a00325_1ade2a979ee79a657c6ab7530ee203056f" kindref="member">makeNewtonRaphsonWithSubsidiaryFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NLO&amp;<sp/>nonLinearOperator,<sp/>LS&amp;&amp;<sp/>linearSolver<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UF&amp;&amp;<sp/>updateFunction<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;NewtonRaphsonWithSubsidiaryFunction&lt;NLO,<sp/>LS,<sp/>UF&gt;&gt;(</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator,<sp/>std::forward&lt;LS&gt;(linearSolver),<sp/>std::move(updateFunction));</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh"/>
  </compounddef>
</doxygen>
