<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="de/d85/a01273" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::LinearSolverTemplate</compoundname>
    <includes refid="db/dd9/a00179" local="no">ikarus/solver/linearsolver/linearsolver.hh</includes>
    <innerclass refid="d2/d1d/a01277" prot="private">Ikarus::LinearSolverTemplate::SolverBase</innerclass>
    <innerclass refid="d5/d6f/a01281" prot="private">Ikarus::LinearSolverTemplate::SolverImpl</innerclass>
    <templateparamlist>
      <param>
        <type>typename ScalarType</type>
        <defval>double</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="de/d85/a01273_1a374226b59baa30615d574bdd7ec230c8" prot="public" static="no">
        <type>Eigen::SparseMatrix&lt; ScalarType &gt;</type>
        <definition>using Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SparseMatrixType =  Eigen::SparseMatrix&lt;ScalarType&gt;</definition>
        <argsstring></argsstring>
        <name>SparseMatrixType</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SparseMatrixType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="44" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="de/d85/a01273_1a878cccde0e595d7b0f7d6a2188aeeb31" prot="public" static="no">
        <type>Eigen::MatrixX&lt; ScalarType &gt;</type>
        <definition>using Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::DenseMatrixType =  Eigen::MatrixX&lt;ScalarType&gt;</definition>
        <argsstring></argsstring>
        <name>DenseMatrixType</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::DenseMatrixType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="45" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="de/d85/a01273_1ac47436d94620129966977ae11667d89d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; SolverBase &gt;</type>
        <definition>std::unique_ptr&lt;SolverBase&gt; Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solverimpl</definition>
        <argsstring></argsstring>
        <name>solverimpl</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solverimpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="124" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d85/a01273_1adbf34cc94e01a4613bd55b922722fe5e" prot="private" static="no" mutable="no">
        <type><ref refid="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906" kindref="member">SolverTypeTag</ref></type>
        <definition>SolverTypeTag Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solverTypeTag</definition>
        <argsstring></argsstring>
        <name>solverTypeTag</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solverTypeTag</qualifiedname>
        <initializer>{<ref refid="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">SolverTypeTag::none</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="125" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="de/d85/a01273_1a477e8cefcd049db15451e765fcef4d76" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::LinearSolverTemplate</definition>
        <argsstring>(const SolverTypeTag &amp;p_solverTypeTag)</argsstring>
        <name>LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::LinearSolverTemplate</qualifiedname>
        <param>
          <type>const <ref refid="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906" kindref="member">SolverTypeTag</ref> &amp;</type>
          <declname>p_solverTypeTag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="46" column="14"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1af2696f3af9722c49e0a828f2e31d8622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::~LinearSolverTemplate</definition>
        <argsstring>()=default</argsstring>
        <name>~LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::~LinearSolverTemplate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="48" column="5"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1ac7a43c5219405e5a5e5295f18525c54e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/d85/a01273" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
        <definition>LinearSolverTemplate &amp; Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::operator=</definition>
        <argsstring>(const LinearSolverTemplate &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::operator=</qualifiedname>
        <param>
          <type>const <ref refid="de/d85/a01273" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="49" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1ab79dba73877784d610d9d0a74acf93f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::LinearSolverTemplate</definition>
        <argsstring>(const LinearSolverTemplate &amp;rhs)</argsstring>
        <name>LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::LinearSolverTemplate</qualifiedname>
        <param>
          <type>const <ref refid="de/d85/a01273" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="54" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1adfd39f1d644239e2bd1febc1d7765944" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::LinearSolverTemplate</definition>
        <argsstring>(LinearSolverTemplate &amp;&amp;) noexcept=default</argsstring>
        <name>LinearSolverTemplate</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::LinearSolverTemplate</qualifiedname>
        <param>
          <type><ref refid="de/d85/a01273" kindref="compound">LinearSolverTemplate</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1a8f9404cb0498f2e48b12312510b2c6fd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="de/d85/a01273" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
        <definition>LinearSolverTemplate &amp; Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::operator=</definition>
        <argsstring>(LinearSolverTemplate &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::operator=</qualifiedname>
        <param>
          <type><ref refid="de/d85/a01273" kindref="compound">LinearSolverTemplate</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="56" column="26"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1a347fcf892a32d3f382cebe8a09fcb86f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/d85/a01273" kindref="compound">LinearSolverTemplate</ref> &amp;</type>
        <definition>LinearSolverTemplate &amp; Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::compute</definition>
        <argsstring>(const MatrixType &amp;A)</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::compute</qualifiedname>
        <param>
          <type>const MatrixType &amp;</type>
          <declname>A</declname>
        </param>
    <requiresclause>std::is_same_v&lt;MatrixType, DenseMatrixType&gt; || std::is_same_v&lt;MatrixType, SparseMatrixType&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="130" column="33" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1a33237d5e237bf2272d2c58c648eda5a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::analyzePattern</definition>
        <argsstring>(const MatrixType &amp;A)</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::analyzePattern</qualifiedname>
        <param>
          <type>const MatrixType &amp;</type>
          <declname>A</declname>
        </param>
    <requiresclause>std::is_same_v&lt;MatrixType, DenseMatrixType&gt; || std::is_same_v&lt;MatrixType, SparseMatrixType&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="136" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1ad9515d35c770a9d2a087a20593af5d85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatrixType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::factorize</definition>
        <argsstring>(const MatrixType &amp;A)</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::factorize</qualifiedname>
        <param>
          <type>const MatrixType &amp;</type>
          <declname>A</declname>
        </param>
    <requiresclause>std::is_same_v&lt;MatrixType, DenseMatrixType&gt; || std::is_same_v&lt;MatrixType, SparseMatrixType&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="140" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1a4ddf79d3353ecc1c7e7a25c7e249cb78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solve</definition>
        <argsstring>(Eigen::VectorX&lt; ScalarType &gt; &amp;x, const Eigen::VectorX&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorX&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="142" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1af33f3862045be96e92dd09a954260857" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX3&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX3&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX3&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX3&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="143" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1a77afedeea7ca3cc8ee541aade55e859b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX2&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX2&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX2&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX2&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="144" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="de/d85/a01273_1a0db3eb266a56bb16e2f4fbd22a66b14d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::solve</definition>
        <argsstring>(Eigen::MatrixX&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX&lt; ScalarType &gt; &amp;b)</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX&lt; ScalarType &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="145" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="145" bodyend="145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A type-erased solver templated with the scalar type of the linear system. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Ikarus::LinearSolverTemplate&lt; ScalarType &gt;</label>
        <link refid="de/d85/a01273"/>
      </node>
      <node id="2">
        <label>Ikarus::LinearSolverTemplate&lt; double &gt;</label>
        <link refid="de/d85/a01273"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="42" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="42" bodyend="146"/>
    <listofallmembers>
      <member refid="de/d85/a01273_1a33237d5e237bf2272d2c58c648eda5a1" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>analyzePattern</name></member>
      <member refid="de/d85/a01273_1a347fcf892a32d3f382cebe8a09fcb86f" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>compute</name></member>
      <member refid="de/d85/a01273_1a878cccde0e595d7b0f7d6a2188aeeb31" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>DenseMatrixType</name></member>
      <member refid="de/d85/a01273_1ad9515d35c770a9d2a087a20593af5d85" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>factorize</name></member>
      <member refid="de/d85/a01273_1a477e8cefcd049db15451e765fcef4d76" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>LinearSolverTemplate</name></member>
      <member refid="de/d85/a01273_1ab79dba73877784d610d9d0a74acf93f1" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>LinearSolverTemplate</name></member>
      <member refid="de/d85/a01273_1adfd39f1d644239e2bd1febc1d7765944" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>LinearSolverTemplate</name></member>
      <member refid="de/d85/a01273_1ac7a43c5219405e5a5e5295f18525c54e" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>operator=</name></member>
      <member refid="de/d85/a01273_1a8f9404cb0498f2e48b12312510b2c6fd" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>operator=</name></member>
      <member refid="de/d85/a01273_1a4ddf79d3353ecc1c7e7a25c7e249cb78" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="de/d85/a01273_1af33f3862045be96e92dd09a954260857" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="de/d85/a01273_1a77afedeea7ca3cc8ee541aade55e859b" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="de/d85/a01273_1a0db3eb266a56bb16e2f4fbd22a66b14d" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solve</name></member>
      <member refid="de/d85/a01273_1ac47436d94620129966977ae11667d89d" prot="private" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solverimpl</name></member>
      <member refid="de/d85/a01273_1adbf34cc94e01a4613bd55b922722fe5e" prot="private" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>solverTypeTag</name></member>
      <member refid="de/d85/a01273_1a374226b59baa30615d574bdd7ec230c8" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>SparseMatrixType</name></member>
      <member refid="de/d85/a01273_1af2696f3af9722c49e0a828f2e31d8622" prot="public" virt="non-virtual"><scope>Ikarus::LinearSolverTemplate</scope><name>~LinearSolverTemplate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
