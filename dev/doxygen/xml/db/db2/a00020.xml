<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="db/db2/a00020" kind="file" language="C++">
    <compoundname>concepts.hh</compoundname>
    <includes local="no">concepts</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">dune/functions/functionspacebases/basistags.hh</includes>
    <includes local="no">dune/functions/functionspacebases/lagrangebasis.hh</includes>
    <includes local="no">Eigen/Sparse</includes>
    <includes refid="d9/d2e/a00056" local="no">ikarus/utils/traits.hh</includes>
    <includedby refid="dc/d5c/a02459" local="no">dirichletvalues.hh</includedby>
    <includedby refid="df/dc8/a00122" local="no">fetraits.hh</includedby>
    <includedby refid="d7/dce/a00143" local="no">interface.hh</includedby>
    <includedby refid="df/d03/a00062" local="yes">linearalgebrahelper.hh</includedby>
    <includedby refid="de/df3/a00185" local="no">material.hh</includedby>
    <includedby refid="dd/d52/a00221" local="no">newtonraphson.hh</includedby>
    <includedby refid="d9/d01/a00227" local="no">newtonraphsonwithscalarsubsidiaryfunction.hh</includedby>
    <includedby refid="dd/dd7/a00248" local="no">pathfollowingfunctions.hh</includedby>
    <includedby refid="d4/d51/a00017" local="no">tensorutils.hh</includedby>
    <incdepgraph>
      <node id="1">
        <label>concepts.hh</label>
        <link refid="db/db2/a00020"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ikarus/utils/traits.hh</label>
        <link refid="d9/d2e/a00056"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Eigen/Sparse</label>
      </node>
      <node id="2">
        <label>concepts</label>
      </node>
      <node id="12">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="6">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="7">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="10">
        <label>optional</label>
      </node>
      <node id="11">
        <label>tuple</label>
      </node>
      <node id="3">
        <label>type_traits</label>
      </node>
      <node id="4">
        <label>utility</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>simpleassemblers.hh</label>
        <link refid="d5/de9/a00176"/>
      </node>
      <node id="26">
        <label>adaptivestepsizing.hh</label>
        <link refid="d7/d40/a00236"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pathfollowing.hh</label>
        <link refid="d0/d27/a00239"/>
      </node>
      <node id="28">
        <label>pathfollowing.inl</label>
        <link refid="d6/d22/a00245"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>pathfollowingfunctions.hh</label>
        <link refid="dd/dd7/a00248"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>powerbasisfe.hh</label>
        <link refid="d3/d00/a00113"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>scalarfe.hh</label>
        <link refid="d4/d3e/a00116"/>
      </node>
      <node id="4">
        <label>fetraits.hh</label>
        <link refid="df/dc8/a00122"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>kirchhoffloveshell.hh</label>
        <link refid="da/d5c/a02432"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>linearelastic.hh</label>
        <link refid="da/d6b/a02438"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>materials.hh</label>
        <link refid="d6/db8/a00158"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>interface.hh</label>
        <link refid="d7/dce/a00143"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>linearelasticity.hh</label>
        <link refid="da/d1e/a00149"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>neohooke.hh</label>
        <link refid="d7/d9a/a00152"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>strainconversions.hh</label>
        <link refid="d5/db1/a00140"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>svk.hh</label>
        <link refid="de/d76/a00134"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>vanishingstress.hh</label>
        <link refid="d2/df5/a00137"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>nonlinearelastic.hh</label>
        <link refid="d4/da8/a02444"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>kirchhoffloveshell.hh</label>
        <link refid="d1/de1/a02435"/>
      </node>
      <node id="11">
        <label>linearelastic.hh</label>
        <link refid="d9/dd6/a02441"/>
      </node>
      <node id="17">
        <label>material.hh</label>
        <link refid="de/df3/a00185"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>nonlinearelastic.hh</label>
        <link refid="d8/d9a/a02447"/>
      </node>
      <node id="12">
        <label>registerelement.hh</label>
        <link refid="d7/d25/a00182"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>newtonraphson.hh</label>
        <link refid="dd/d52/a00221"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>newtonraphsonwithscalarsubsidiaryfunction.hh</label>
        <link refid="d9/d01/a00227"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>trustregion.hh</label>
        <link refid="d5/ddf/a00224"/>
      </node>
      <node id="1">
        <label>concepts.hh</label>
        <link refid="db/db2/a00020"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>defaultfunctions.hh</label>
        <link refid="d5/d16/a00029"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>dirichletvalues.hh</label>
        <link refid="dc/d5c/a02459"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>linearalgebrahelper.hh</label>
        <link refid="df/d03/a00062"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>tensorutils.hh</label>
        <link refid="d4/d51/a00017"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>_ikarus.cc</label>
        <link refid="dd/dd7/a00260"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="d8/d17/a00304">Eigen</innernamespace>
    <innernamespace refid="d9/d0d/a00298">Ikarus</innernamespace>
    <innernamespace refid="d2/d71/a00309">Ikarus::Concepts</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="db/db2/a00020_1ac8757039febcebb4741b376dc8258d6d" prot="public" static="no">
        <name>MAKE_EIGEN_FIXED_VECTOR_CONCEPT</name>
        <param><defname>Size</defname></param>
        <initializer>  template &lt;typename V&gt;                       \
  concept EigenVector##Size                   \
      = static_cast&lt;bool&gt;(V::IsVectorAtCompileTime) and static_cast&lt;bool&gt;(V::SizeAtCompileTime == Size);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="383" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" prot="public" static="no">
        <name>MAKE_EIGEN_FIXED_MATRIX_CONCEPT</name>
        <param><defname>Size1</defname></param>
        <param><defname>Size2</defname></param>
        <initializer>  template &lt;typename M&gt;                                                                                     \
  concept EigenMatrix##Size1##Size2 = static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::RowsAtCompileTime == Size1) \
                                      and static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::ColsAtCompileTime == Size2);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="395" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="db/db2/a00020_1aba360f830591dbc713b7fa692d614101" prot="public" static="no">
        <name>MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</name>
        <param><defname>Size1</defname></param>
        <param><defname>Size2</defname></param>
        <initializer>  template &lt;typename M&gt;                                        \
  concept EigenMatrixOrVoigtNotation##Size1 = EigenMatrix##Size1##Size1&lt;M&gt; or EigenVector##Size2&lt;M&gt;;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="437" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" bodystart="437" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Several concepts. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/basistags.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/lagrangebasis.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Sparse&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="d9/d2e/a00056" kindref="compound">ikarus/utils/traits.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d8/d17/a00304" kindref="compound">Eigen</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="25" refid="d2/d9b/a01433" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d2/d9b/a01433" kindref="compound">EigenBase</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d9/d0d/a00298" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>stressIndexPair,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MaterialImpl&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VanishingStress;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="33" refid="d9/d0d/a00298_1ac2c6469be19ce4ef2e630bfa1c5a5e24" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="d9/d0d/a00298_1ac2c6469be19ce4ef2e630bfa1c5a5e24" kindref="member">transpose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d9b/a01433" kindref="compound">Eigen::EigenBase&lt;Derived&gt;</ref>&amp;<sp/>A);</highlight></codeline>
<codeline lineno="34" refid="d2/d71/a00309" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Concepts<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="45" refid="d4/d49/a01590" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d4/d49/a01590" kindref="compound">FlatInterLeavedBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>Basis::PreBasis::IndexMergingStrategy,<sp/>Dune::Functions::BasisFactory::FlatInterleaved&gt;;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LagrangeNodeHelper<sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LagrangeNodeHelper&lt;U,<sp/>U&lt;GV,<sp/>k,<sp/>R&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LagrangeNodeHelperOfOrder<sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LagrangeNodeHelperOfOrder&lt;U,<sp/>U&lt;GV,<sp/>k,<sp/>R&gt;,<sp/>k&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Node&gt;</highlight></codeline>
<codeline lineno="69" refid="dc/d42/a01591" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="dc/d42/a01591" kindref="compound">LagrangeNode</ref><sp/>=<sp/>Impl::LagrangeNodeHelper&lt;Dune::Functions::LagrangeNode,<sp/>Node&gt;::value;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order&gt;</highlight></codeline>
<codeline lineno="79" refid="de/d40/a01592" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="de/d40/a01592" kindref="compound">LagrangeNodeOfOrder</ref><sp/>=<sp/>Impl::LagrangeNodeHelperOfOrder&lt;Dune::Functions::LagrangeNode,<sp/>Node,<sp/>order&gt;::value;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="90" refid="d9/dc8/a01593" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d9/dc8/a01593" kindref="compound">FlatLexicographicBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>Basis::PreBasis::IndexMergingStrategy,<sp/>Dune::Functions::BasisFactory::FlatLexicographic&gt;;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="103" refid="dc/def/a01594" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="dc/def/a01594" kindref="compound">FlatIndexBasis</ref><sp/>=<sp/><ref refid="d9/dc8/a01593" kindref="compound">FlatLexicographicBasis&lt;Basis&gt;</ref><sp/>or<sp/><ref refid="d4/d49/a01590" kindref="compound">FlatInterLeavedBasis&lt;Basis&gt;</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="114" refid="dc/dbf/a01595" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="dc/dbf/a01595" kindref="compound">BlockedInterLeavedBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;typename<sp/>Basis::PreBasis::IndexMergingStrategy,<sp/>Dune::Functions::BasisFactory::BlockedInterleaved&gt;;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="127" refid="dd/d70/a01596" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="dd/d70/a01596" kindref="compound">BlockedLexicographicBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::PreBasis::IndexMergingStrategy,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Functions::BasisFactory::BlockedLexicographic&gt;;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl&gt;</highlight></codeline>
<codeline lineno="138" refid="d0/d1d/a01597" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d0/d1d/a01597" kindref="compound">DuneLocalBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(DuneLocalBasisImpl&amp;<sp/>duneLocalBasis)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl::Traits::RangeType;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl::Traits::JacobianType;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DuneLocalBasisImpl::Traits::dimDomain;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl::Traits::DomainType;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl::Traits::DomainFieldType;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DuneLocalBasisImpl::Traits::RangeFieldType;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>duneLocalBasis.evaluateFunction(std::declval&lt;typename<sp/>DuneLocalBasisImpl::Traits::DomainType&gt;(),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;std::vector&lt;typename<sp/>DuneLocalBasisImpl::Traits::RangeType&gt;&amp;&gt;());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>duneLocalBasis.evaluateJacobian(std::declval&lt;typename<sp/>DuneLocalBasisImpl::Traits::DomainType&gt;(),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;std::vector&lt;typename<sp/>DuneLocalBasisImpl::Traits::JacobianType&gt;&amp;&gt;());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="163" refid="d3/da5/a01598" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d3/da5/a01598" kindref="compound">BlockedIndexBasis</ref><sp/>=<sp/><ref refid="dd/d70/a01596" kindref="compound">BlockedLexicographicBasis&lt;Basis&gt;</ref><sp/>or<sp/><ref refid="dc/dbf/a01595" kindref="compound">BlockedInterLeavedBasis&lt;Basis&gt;</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis&gt;</highlight></codeline>
<codeline lineno="174" refid="d9/d13/a01599" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d9/d13/a01599" kindref="compound">PowerBasis</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Basis::PreBasis::Node::isPower<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PathFollowingImpl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Subs</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">iaryArgs&gt;</highlight></codeline>
<codeline lineno="186" refid="d4/d3f/a01600" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d4/d3f/a01600" kindref="compound">PathFollowingStrategy</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(PathFollowingImpl<sp/>pft,<sp/>NonLinearOperator<sp/>nop,<sp/>SubsidiaryArgs<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>pft(args)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>pft.initialPrediction(nop,<sp/>args)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>pft.intermediatePrediction(nop,<sp/>args)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AdaptiveStepSizing,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="dc/df4/a01401" kindref="compound">NonLinearSolverInformation</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="dc/d98/a01177" kindref="compound">SubsidiaryArgs</ref>,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d0/d62/a01513" kindref="compound">NonLinearOperator</ref>&gt;</highlight></codeline>
<codeline lineno="202" refid="d7/d82/a01601" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d7/d82/a01601" kindref="compound">AdaptiveStepSizingStrategy</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(AdaptiveStepSizing<sp/>adaptiveSS,<sp/>NonLinearSolverInformation<sp/>info,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubsidiaryArgs<sp/>args,<sp/>NonLinearOperator<sp/>nop)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>adaptiveSS(info,<sp/>args,<sp/>nop)<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>adaptiveSS.targetIterations()<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;int&gt;;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>adaptiveSS.setTargetIterations(std::declval&lt;int&gt;())<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;void&gt;;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LinearSolver,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatrixType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VectorType&gt;</highlight></codeline>
<codeline lineno="218" refid="d5/dcf/a01602" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d5/dcf/a01602" kindref="compound">LinearSolverCheck</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(<ref refid="d9/d0d/a00298_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">LinearSolver</ref>&amp;<sp/>linearSolver,<sp/>MatrixType&amp;<sp/>Ax,<sp/>VectorType&amp;<sp/>vec)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.analyzePattern(Ax);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.factorize(Ax);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.solve(vec,<sp/>vec);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearSolver&gt;</highlight></codeline>
<codeline lineno="232" refid="db/d51/a01603" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="db/d51/a01603" kindref="compound">NonLinearSolverCheckForPathFollowing</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple_size&lt;typename<sp/>NonLinearSolver::NonLinearOperator::ParameterValues&gt;::value<sp/>==<sp/>2;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>not(std::is_same_v&lt;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearSolver::NonLinearOperator::ValueType,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>and<sp/>((traits::isSpecializationTypeAndNonTypes&lt;Eigen::Matrix,<sp/>typename<sp/>NonLinearSolver::NonLinearOperator::DerivativeType&gt;::value)<sp/>or<sp/>(traits::isSpecializationTypeNonTypeAndType&lt;Eigen::SparseMatrix,<sp/>typename<sp/>NonLinearSolver::NonLinearOperator::DerivativeType&gt;::value)));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="247" refid="dc/dd2/a01604" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="dc/dd2/a01604" kindref="compound">MultiplyAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x*<sp/>y;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="259" refid="d5/d75/a01605" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d5/d75/a01605" kindref="compound">AddAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+<sp/>y;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="271" refid="d3/d2d/a01606" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d3/d2d/a01606" kindref="compound">SubstractAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="284" refid="d6/d82/a01607" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d6/d82/a01607" kindref="compound">MultiplyAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/>y;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="297" refid="db/dfd/a01608" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="db/dfd/a01608" kindref="compound">DivideAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>/=<sp/>y;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="310" refid="da/d24/a01609" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="da/d24/a01609" kindref="compound">AddAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="323" refid="d9/dfd/a01610" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d9/dfd/a01610" kindref="compound">SubstractAssignAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>y;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="335" refid="d3/d79/a01611" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d3/d79/a01611" kindref="compound">DivideAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x,<sp/>R<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>/<sp/>y;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="346" refid="d5/d84/a01612" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d5/d84/a01612" kindref="compound">NegateAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-x;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="357" refid="d3/da1/a01613" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d3/da1/a01613" kindref="compound">TransposeAble</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(L<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d0d/a00298_1ac2c6469be19ce4ef2e630bfa1c5a5e24" kindref="member">transpose</ref>(x);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Op,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="369" refid="db/d7c/a01614" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="db/d7c/a01614" kindref="compound">IsFunctorWithArgs</ref><sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(Op<sp/>op,<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>op(args...);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="381" refid="d7/dae/a01615" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="d7/dae/a01615" kindref="compound">EigenVector</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(V::IsVectorAtCompileTime);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="db/db2/a00020_1ac8757039febcebb4741b376dc8258d6d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_EIGEN_FIXED_VECTOR_CONCEPT(Size)<sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>V&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/>concept<sp/>EigenVector##Size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>static_cast&lt;bool&gt;(V::IsVectorAtCompileTime)<sp/>and<sp/>static_cast&lt;bool&gt;(V::SizeAtCompileTime<sp/>==<sp/>Size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(1)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(2)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(3)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(4)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(5)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1ac8757039febcebb4741b376dc8258d6d" kindref="member">MAKE_EIGEN_FIXED_VECTOR_CONCEPT</ref>(6)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_EIGEN_FIXED_MATRIX_CONCEPT(Size1,<sp/>Size2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>M&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor"><sp/><sp/>concept<sp/>EigenMatrix##Size1##Size2<sp/>=<sp/>static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::RowsAtCompileTime<sp/>==<sp/>Size1)<sp/>\</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>static_cast&lt;bool&gt;(std::remove_cvref_t&lt;M&gt;::ColsAtCompileTime<sp/>==<sp/>Size2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>1)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>2)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>2)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>3)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>3)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>2)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>3)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>4)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>4)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>4)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>2)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>3)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>4)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>5)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>5)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>5)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>5)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>2)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>3)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>4)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>5)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(1,<sp/>6)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(2,<sp/>6)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(3,<sp/>6)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(4,<sp/>6)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(5,<sp/>6)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>2)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>3)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>4)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>5)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1a5556bdb5e6cc63333c07f9ef487fb478" kindref="member">MAKE_EIGEN_FIXED_MATRIX_CONCEPT</ref>(6,<sp/>6)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="db/db2/a00020_1aba360f830591dbc713b7fa692d614101" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT(Size1,<sp/>Size2)<sp/>\</highlight></codeline>
<codeline lineno="438"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>M&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="439"><highlight class="preprocessor"><sp/><sp/>concept<sp/>EigenMatrixOrVoigtNotation##Size1<sp/>=<sp/>EigenMatrix##Size1##Size1&lt;M&gt;<sp/>or<sp/>EigenVector##Size2&lt;M&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1aba360f830591dbc713b7fa692d614101" kindref="member">MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</ref>(1,<sp/>1)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1aba360f830591dbc713b7fa692d614101" kindref="member">MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</ref>(2,<sp/>3)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/db2/a00020_1aba360f830591dbc713b7fa692d614101" kindref="member">MAKE_EIGEN_FIXED_MATRIX_OR_VOIGT_CONCEPT</ref>(3,<sp/>6)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>namespace<sp/>Impl<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MaterialToCheck,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Material&gt;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">consteval</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMaterial()<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(traits::isSpecialization&lt;MaterialToCheck,<sp/>Material&gt;::value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(traits::isSpecializationNonTypeAndTypes&lt;VanishingStress,<sp/>Material&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(traits::isSpecialization&lt;MaterialToCheck,<sp/>typename<sp/>Material::Underlying&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight></codeline>
<codeline lineno="472"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MaterialToCheck,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d7b/a00286_1gga05ac785124262c1e323d2f937d520a1bad92a8333dd3ccb895cc65f7455b71206" kindref="member">Material</ref>&gt;</highlight></codeline>
<codeline lineno="473" refid="db/dad/a01616" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="db/dad/a01616" kindref="compound">IsMaterial</ref><sp/>=<sp/>Impl::isMaterial&lt;MaterialToCheck,<sp/>Material&gt;();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Concepts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh"/>
  </compounddef>
</doxygen>
