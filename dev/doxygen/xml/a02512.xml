<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a02512" kind="file" language="C++">
    <compoundname>utils/dirichletvalues.hh</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">concepts</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">functional</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">dune/functions/backends/istlvectorbackend.hh</includes>
    <includes local="no">dune/functions/functionspacebases/boundarydofs.hh</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">autodiff/forward/real/real.hpp</includes>
    <includes refid="a00026" local="no">ikarus/utils/concepts.hh</includes>
    <includedby refid="a00257" local="no">simpleassemblers.hh</includedby>
    <incdepgraph>
      <node id="13">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="a00026"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>dirichletvalues.hh</label>
        <link refid="a02512"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ikarus/utils/traits.hh</label>
        <link refid="a00008"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Eigen/Core</label>
      </node>
      <node id="16">
        <label>Eigen/Sparse</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>autodiff/forward/real/real.hpp</label>
      </node>
      <node id="3">
        <label>concepts</label>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="20">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="9">
        <label>dune/functions/backends/istlvectorbackend.hh</label>
      </node>
      <node id="14">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="10">
        <label>dune/functions/functionspacebases/boundarydofs.hh</label>
      </node>
      <node id="15">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="5">
        <label>functional</label>
      </node>
      <node id="18">
        <label>optional</label>
      </node>
      <node id="19">
        <label>tuple</label>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>simpleassemblers.hh</label>
        <link refid="a00257"/>
      </node>
      <node id="1">
        <label>dirichletvalues.hh</label>
        <link refid="a02512"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="a01524" prot="public">Ikarus::DirichletValues</innerclass>
    <innerclass refid="a01528" prot="private">Ikarus::DirichletValues::DirichletFunctions</innerclass>
    <innernamespace refid="a00345">Dune</innernamespace>
    <innernamespace refid="a00328">Ikarus</innernamespace>
    <briefdescription>
<para>Definition of DirichletValues class for handling Dirichlet boundary conditions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/backends/istlvectorbackend.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/functions/functionspacebases/boundarydofs.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;autodiff/forward/real/real.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00026" kindref="compound">ikarus/utils/concepts.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="a00345" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00345" kindref="compound">Dune</ref><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="30" refid="a01520" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01520" kindref="compound">FieldVector</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00328" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FC<sp/>=<sp/>std::vector&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="46" refid="a01524" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01524" kindref="compound">DirichletValues</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49" refid="a01524_1a2e6f1ef4a810a7269303f54a6f74539f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01524_1a2e6f1ef4a810a7269303f54a6f74539f" kindref="member">Basis</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::remove_cvref_t&lt;B&gt;;</highlight></codeline>
<codeline lineno="50" refid="a01524_1aa71c2b94b37f2b4e83f9f1e059e6fe4c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01524_1aa71c2b94b37f2b4e83f9f1e059e6fe4c" kindref="member">FlagsType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>FC;</highlight></codeline>
<codeline lineno="51" refid="a01524_1a79e90730d4ac67efb5e38590c0429df5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="a01524_1a79e90730d4ac67efb5e38590c0429df5" kindref="member">worldDimension</ref><sp/>=<sp/>Basis::GridView::dimensionworld;</highlight></codeline>
<codeline lineno="52" refid="a01524_1a3db820fbcd2b7edf58ce3b21b261f621" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01524_1a3db820fbcd2b7edf58ce3b21b261f621" kindref="member">BackendType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(Dune::Functions::istlVectorBackend(std::declval&lt;FlagsType&amp;&gt;()));</highlight></codeline>
<codeline lineno="53" refid="a01524_1aeb81ceb2617369a584dd12f4574ab1dc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01524_1aeb81ceb2617369a584dd12f4574ab1dc" kindref="member">DirichletValues</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>B&amp;<sp/><ref refid="a01524_1ae783c95d2e4b55d9d37f4c141b1d719b" kindref="member">basis</ref>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>basis_{<ref refid="a01524_1ae783c95d2e4b55d9d37f4c141b1d719b" kindref="member">basis</ref>},</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirichletFlagsBackend_{dirichletFlags_}<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>dirichletFlagsBackend_.resize(basis_);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill(dirichletFlags_.begin(),<sp/>dirichletFlags_.end(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>inhomogeneousBoundaryVectorDummy_.setZero(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Eigen::Index</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(basis_.size()));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="70" refid="a01524_1a57486778cd8e2e42be337b5d1ff0d564" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01524_1a57486778cd8e2e42be337b5d1ff0d564" kindref="member">fixBoundaryDOFs</ref>(F&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="a01671" kindref="compound">Concepts::IsFunctorWithArgs&lt;F, BackendType, typename Basis::MultiIndex&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>indexGlobal)<sp/>{<sp/>f(dirichletFlagsBackend_,<sp/>indexGlobal);<sp/>};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Functions::forEachBoundaryDOF(basis_,<sp/>lambda);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="a01671" kindref="compound">Concepts::IsFunctorWithArgs&lt;F, BackendType, int, typename Basis::LocalView&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>localIndex,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>localView)<sp/>{<sp/>f(dirichletFlagsBackend_,<sp/>localIndex,<sp/>localView);<sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Functions::forEachBoundaryDOF(basis_,<sp/>lambda);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="a01671" kindref="compound">Concepts::IsFunctorWithArgs</ref>&lt;F,<sp/><ref refid="a01524_1a3db820fbcd2b7edf58ce3b21b261f621" kindref="member">BackendType</ref>,<sp/>int,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::LocalView,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::GridView::Intersection&gt;)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>localIndex,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>localView,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>intersection)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(dirichletFlagsBackend_,<sp/>localIndex,<sp/>localView,<sp/>intersection);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Dune::Functions::forEachBoundaryDOF(basis_,<sp/>lambda);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="95" refid="a01524_1a956ce2cdc09731f001821c7b59d49e85" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01524_1a956ce2cdc09731f001821c7b59d49e85" kindref="member">fixDOFs</ref>(F&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>f(basis_,<sp/>dirichletFlagsBackend_);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="a01524_1a3ccd03313f8c6837b077e14ac9f50d16" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01524_1a3ccd03313f8c6837b077e14ac9f50d16" kindref="member">fixIthDOF</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Basis::MultiIndex<sp/>i)<sp/>{<sp/>dirichletFlagsBackend_[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>the<sp/>local<sp/>basis<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="a01524_1ae783c95d2e4b55d9d37f4c141b1d719b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="a01524_1ae783c95d2e4b55d9d37f4c141b1d719b" kindref="member">basis</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basis_;<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>a<sp/>boolean<sp/>values,<sp/>if<sp/>the<sp/>give<sp/>multiIndex<sp/>is<sp/>constrained<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiIndex&gt;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(not<sp/>std::integral&lt;MultiIndex&gt;)</highlight></codeline>
<codeline lineno="112" refid="a01524_1a1b1fccdb71619c0a49aa24977682d43a" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="a01524_1a1b1fccdb71619c0a49aa24977682d43a" kindref="member">isConstrained</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MultiIndex&amp;<sp/>multiIndex)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dirichletFlagsBackend_[multiIndex];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>a<sp/>boolean<sp/>values,<sp/>if<sp/>the<sp/>i-th<sp/>degree<sp/>of<sp/>freedom<sp/>is<sp/>constrained<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="a01524_1a7c30706789441e0dce7a7c3f80cb6d2e" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="a01524_1a7c30706789441e0dce7a7c3f80cb6d2e" kindref="member">isConstrained</ref>(std::size_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dirichletFlags_[i];<sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>how<sp/>many<sp/>degrees<sp/>of<sp/>freedoms<sp/>are<sp/>fixed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="a01524_1aeb299b04b2777be56012b32a3b2e6a9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01524_1aeb299b04b2777be56012b32a3b2e6a9c" kindref="member">fixedDOFsize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::ranges::count(dirichletFlags_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>how<sp/>many<sp/>degrees<sp/>of<sp/>freedom<sp/>there<sp/>are<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="a01524_1a010fa7b0721c137eb61221493e52dc92" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01524_1a010fa7b0721c137eb61221493e52dc92" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dirichletFlags_.size();<sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>\brief<sp/>Returns<sp/>the<sp/>underlying<sp/>dof<sp/>flag<sp/>container<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="a01524_1af8495b65eac223b7b6c64f07b31cc814" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="a01524_1af8495b65eac223b7b6c64f07b31cc814" kindref="member">container</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dirichletFlags_;<sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="138" refid="a01524_1abc3413114cb9272944e1b44606c6a0a1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01524_1abc3413114cb9272944e1b44606c6a0a1" kindref="member">storeInhomogeneousBoundaryCondition</ref>(F&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>derivativeLambda<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>globalCoord,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>lambda)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>autodiff::real<sp/>lambdaDual<sp/>=<sp/>lambda;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lambdaDual[1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Setting<sp/>the<sp/>derivative<sp/>in<sp/>lambda<sp/>direction<sp/>to<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>derivative(f(globalCoord,<sp/>lambdaDual));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>dirichletFunctions_.push_back({f,<sp/>derivativeLambda});</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="a01524_1ac3950f8821f8e8c1f2a8b8f8a7e86875" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01524_1ac3950f8821f8e8c1f2a8b8f8a7e86875" kindref="member">evaluateInhomogeneousBoundaryCondition</ref>(Eigen::VectorXd&amp;<sp/>xIh,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>lambda)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>inhomogeneousBoundaryVectorDummy_.setZero();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>xIh.resizeLike(inhomogeneousBoundaryVectorDummy_);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>xIh.setZero();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>f<sp/>:<sp/>dirichletFunctions_)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interpolate(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basis_,<sp/>inhomogeneousBoundaryVectorDummy_,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>globalCoord)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f.value(globalCoord,<sp/>lambda);<sp/>},<sp/>dirichletFlagsBackend_);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xIh<sp/>+=<sp/>inhomogeneousBoundaryVectorDummy_;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="a01524_1a5d7fdc80dfd3ebdcb58f0770844f71da" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01524_1a5d7fdc80dfd3ebdcb58f0770844f71da" kindref="member">evaluateInhomogeneousBoundaryConditionDerivative</ref>(Eigen::VectorXd&amp;<sp/>xIh,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>lambda)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>inhomogeneousBoundaryVectorDummy_.setZero();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>xIh.resizeLike(inhomogeneousBoundaryVectorDummy_);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>xIh.setZero();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>f<sp/>:<sp/>dirichletFunctions_)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interpolate(</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basis_,<sp/>inhomogeneousBoundaryVectorDummy_,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>globalCoord)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f.derivative(globalCoord,<sp/>lambda);<sp/>},<sp/>dirichletFlagsBackend_);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xIh<sp/>+=<sp/>inhomogeneousBoundaryVectorDummy_;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>inhomogeneousBoundaryVectorDummy_;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="a01524_1a2e6f1ef4a810a7269303f54a6f74539f" kindref="member">Basis</ref><sp/>basis_;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><ref refid="a01524_1aa71c2b94b37f2b4e83f9f1e059e6fe4c" kindref="member">FlagsType</ref><sp/>dirichletFlags_;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><ref refid="a01524_1a3db820fbcd2b7edf58ce3b21b261f621" kindref="member">BackendType</ref><sp/>dirichletFlagsBackend_;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DirichletFunctions</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Signature<sp/>=<sp/>std::function&lt;Eigen::Vector&lt;double,<sp/>worldDimension&gt;(</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01520" kindref="compound">Dune::FieldVector&lt;double, worldDimension&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)&gt;;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>Signature<sp/>value;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>Signature<sp/>derivative;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>std::vector&lt;DirichletFunctions&gt;<sp/>dirichletFunctions_;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/dirichletvalues.hh"/>
  </compounddef>
</doxygen>
