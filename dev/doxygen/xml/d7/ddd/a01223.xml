<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="d7/ddd/a01223" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::ResultRequirements</compoundname>
    <includes refid="df/dc8/a00122" local="no">ikarus/finiteelements/ferequirements.hh</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref></type>
        <defval><ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref>&lt;&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d7/ddd/a01223_1a249d873676137eb115f5451427f7503e" prot="public" static="no">
        <type>typename <ref refid="da/d3f/a01215_1aa3ecebd0be1a26600e54c0adaa46d74d" kindref="member">FErequirements::ParameterTypeRaw</ref></type>
        <definition>using Ikarus::ResultRequirements&lt; FErequirements &gt;::ParameterTypeRaw =  typename FErequirements::ParameterTypeRaw</definition>
        <argsstring></argsstring>
        <name>ParameterTypeRaw</name>
        <qualifiedname>Ikarus::ResultRequirements::ParameterTypeRaw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="373" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/ddd/a01223_1ade5c36f80718337e7f4ef4ae8b391146" prot="public" static="no">
        <type>typename <ref refid="da/d3f/a01215_1a410aab421a30588621b0186225dbe3bd" kindref="member">FErequirements::SolutionVectorType</ref></type>
        <definition>using Ikarus::ResultRequirements&lt; FErequirements &gt;::SolutionVectorType =  typename FErequirements::SolutionVectorType</definition>
        <argsstring></argsstring>
        <name>SolutionVectorType</name>
        <qualifiedname>Ikarus::ResultRequirements::SolutionVectorType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="374" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/ddd/a01223_1a666b1e8176883471623c42d37211dbbc" prot="public" static="no">
        <type>typename <ref refid="da/d3f/a01215_1afe01a23ad3c9115402dbf4590ace78d9" kindref="member">FErequirements::SolutionVectorTypeRaw</ref></type>
        <definition>using Ikarus::ResultRequirements&lt; FErequirements &gt;::SolutionVectorTypeRaw =  typename FErequirements::SolutionVectorTypeRaw</definition>
        <argsstring></argsstring>
        <name>SolutionVectorTypeRaw</name>
        <qualifiedname>Ikarus::ResultRequirements::SolutionVectorTypeRaw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="375" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="375" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d7/ddd/a01223_1a0a03273c80dad20c112d57d8087eb1d9" prot="private" static="no" mutable="no">
        <type>std::set&lt; <ref refid="d2/d82/a00279_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref> &gt;</type>
        <definition>std::set&lt;ResultType&gt; Ikarus::ResultRequirements&lt; FErequirements &gt;::resType</definition>
        <argsstring></argsstring>
        <name>resType</name>
        <qualifiedname>Ikarus::ResultRequirements::resType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="521" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/ddd/a01223_1adaecec015277d01a3645f755415cea8e" prot="private" static="no" mutable="no">
        <type><ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref></type>
        <definition>FErequirements Ikarus::ResultRequirements&lt; FErequirements &gt;::reqB</definition>
        <argsstring></argsstring>
        <name>reqB</name>
        <qualifiedname>Ikarus::ResultRequirements::reqB</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="522" column="20" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="522" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/ddd/a01223_1ae63816b06a691101db0313dab0d4ce0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::ResultRequirements&lt; FErequirements &gt;::ResultRequirements</definition>
        <argsstring>(FErequirements &amp;&amp;req, std::set&lt; ResultType &gt; &amp;&amp;p_resType)</argsstring>
        <name>ResultRequirements</name>
        <qualifiedname>Ikarus::ResultRequirements::ResultRequirements</qualifiedname>
        <param>
          <type><ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref> &amp;&amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>std::set&lt; <ref refid="d2/d82/a00279_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref> &gt; &amp;&amp;</type>
          <declname>p_resType</declname>
        </param>
        <briefdescription>
<para>Constructor with <ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref> and result types. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs a <ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> object with the given <ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref> and set of result types.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Finite element requirements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_resType</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of result types. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="385" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="385" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1a0c1bc6b4652926a39d20c8488c297317" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::ResultRequirements&lt; FErequirements &gt;::ResultRequirements</definition>
        <argsstring>(const FErequirements &amp;req)</argsstring>
        <name>ResultRequirements</name>
        <qualifiedname>Ikarus::ResultRequirements::ResultRequirements</qualifiedname>
        <param>
          <type>const <ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Constructor with only <ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs a <ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> object with the given <ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref> and an empty set of result types.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>Finite element requirements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="395" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="395" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1a09b6184e9fa1587fd23d29298e1dd15b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::ResultRequirements&lt; FErequirements &gt;::ResultRequirements</definition>
        <argsstring>()=default</argsstring>
        <name>ResultRequirements</name>
        <qualifiedname>Ikarus::ResultRequirements::ResultRequirements</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs an empty <ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="402" column="5"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1a3d41a3aca3b508538bed0246af51e8c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ikarus::ResultRequirements&lt; FErequirements &gt;::isResultRequested</definition>
        <argsstring>(ResultType &amp;&amp;key) const</argsstring>
        <name>isResultRequested</name>
        <qualifiedname>Ikarus::ResultRequirements::isResultRequested</qualifiedname>
        <param>
          <type><ref refid="d2/d82/a00279_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Check if a specific result type is requested. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if the specified result type is requested.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The result type to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the result type is requested, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="412" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="412" bodyend="412"/>
        <referencedby refid="dd/d42/a01259_1a51a4d30fb9b0ee5c2bf7683b69f0eda9" compoundref="dc/d09/a02398" startline="215" endline="231">Ikarus::LinearElastic&lt; Basis_, FERequirements_, useEigenRef &gt;::calculateAt</referencedby>
        <referencedby refid="d7/da4/a01287_1afc5090fbbd1054eaa33932e88f2fdb42" compoundref="db/db1/a02404" startline="258" endline="273">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateAt</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1a766f4be341a9daf3ac3af27888778eeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>FEAffordance</type>
            <declname>Affordance</declname>
            <defname>Affordance</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> &amp;</type>
        <definition>ResultRequirements &amp; Ikarus::ResultRequirements&lt; FErequirements &gt;::addAffordance</definition>
        <argsstring>(Affordance &amp;&amp;affordance)</argsstring>
        <name>addAffordance</name>
        <qualifiedname>Ikarus::ResultRequirements::addAffordance</qualifiedname>
        <param>
          <type>Affordance &amp;&amp;</type>
          <declname>affordance</declname>
        </param>
        <briefdescription>
<para>Add an affordance to the finite element requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds the specified affordance to the finite element requirements.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Affordance</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of affordance to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>affordance</parametername>
</parameternamelist>
<parameterdescription>
<para>The affordance to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the <ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="424" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="424" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1a3fbc8b71e9463eb2aff7afa73db77023" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> &amp;</type>
        <definition>ResultRequirements &amp; Ikarus::ResultRequirements&lt; FErequirements &gt;::insertParameter</definition>
        <argsstring>(FEParameter &amp;&amp;key, ParameterTypeRaw &amp;val)</argsstring>
        <name>insertParameter</name>
        <qualifiedname>Ikarus::ResultRequirements::insertParameter</qualifiedname>
        <param>
          <type><ref refid="d2/d82/a00279_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="d7/ddd/a01223_1a249d873676137eb115f5451427f7503e" kindref="member">ParameterTypeRaw</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Insert a parameter into the finite element requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>Inserts the specified parameter into the finite element requirements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the <ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="438" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="438" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1ac70755df382d8f81da6abbaa1c2e5199" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> &amp;</type>
        <definition>ResultRequirements &amp; Ikarus::ResultRequirements&lt; FErequirements &gt;::insertGlobalSolution</definition>
        <argsstring>(FESolutions &amp;&amp;key, SolutionVectorTypeRaw &amp;sol)</argsstring>
        <name>insertGlobalSolution</name>
        <qualifiedname>Ikarus::ResultRequirements::insertGlobalSolution</qualifiedname>
        <param>
          <type><ref refid="d2/d82/a00279_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="d7/ddd/a01223_1a666b1e8176883471623c42d37211dbbc" kindref="member">SolutionVectorTypeRaw</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
<para>Insert a global solution into the finite element requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>Inserts the specified global solution into the finite element requirements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The global solution key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>The global solution value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the <ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="452" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1a115edf304fdee5346879789896958ed3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ResultTypeConcept...</type>
            <declname>ResultTypes</declname>
            <defname>ResultTypes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> &amp;</type>
        <definition>ResultRequirements &amp; Ikarus::ResultRequirements&lt; FErequirements &gt;::addResultRequest</definition>
        <argsstring>(ResultTypes &amp;&amp;... keys)</argsstring>
        <name>addResultRequest</name>
        <qualifiedname>Ikarus::ResultRequirements::addResultRequest</qualifiedname>
        <param>
          <type>ResultTypes &amp;&amp;...</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
<para>Add one or more result types to the set of requested results. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds the specified result types to the set of requested results.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ResultTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of results to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>The result types to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the <ref refid="d7/ddd/a01223" kindref="compound">ResultRequirements</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="467" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1ad587482320609b1ab17c82b094000d08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d7/ddd/a01223_1a666b1e8176883471623c42d37211dbbc" kindref="member">SolutionVectorTypeRaw</ref> &amp;</type>
        <definition>const SolutionVectorTypeRaw &amp; Ikarus::ResultRequirements&lt; FErequirements &gt;::getGlobalSolution</definition>
        <argsstring>(FESolutions &amp;&amp;key) const</argsstring>
        <name>getGlobalSolution</name>
        <qualifiedname>Ikarus::ResultRequirements::getGlobalSolution</qualifiedname>
        <param>
          <type><ref refid="d2/d82/a00279_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get the global solution for a specific global solution type. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the global solution for the specified global solution type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The global solution type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the global solution value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="480" column="33" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="480" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1a6117237834b64f1ebaecafcd282f4d4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d7/ddd/a01223_1a249d873676137eb115f5451427f7503e" kindref="member">ParameterTypeRaw</ref> &amp;</type>
        <definition>const ParameterTypeRaw &amp; Ikarus::ResultRequirements&lt; FErequirements &gt;::getParameter</definition>
        <argsstring>(FEParameter &amp;&amp;key) const</argsstring>
        <name>getParameter</name>
        <qualifiedname>Ikarus::ResultRequirements::getParameter</qualifiedname>
        <param>
          <type><ref refid="d2/d82/a00279_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref> &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get the value of a specific parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the value of the specified parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter key. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the parameter value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="492" column="28" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="492" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1a84cdc0f3d956bf0f425d0688bfd1e653" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref> &amp;</type>
        <definition>const FErequirements &amp; Ikarus::ResultRequirements&lt; FErequirements &gt;::getFERequirements</definition>
        <argsstring>() const</argsstring>
        <name>getFERequirements</name>
        <qualifiedname>Ikarus::ResultRequirements::getFERequirements</qualifiedname>
        <briefdescription>
<para>Get the associated finite element requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the associated finite element requirements.</para>
<para><simplesect kind="return"><para>Reference to the finite element requirements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="501" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="501" bodyend="501"/>
        <referencedby refid="dd/d42/a01259_1a51a4d30fb9b0ee5c2bf7683b69f0eda9" compoundref="dc/d09/a02398" startline="215" endline="231">Ikarus::LinearElastic&lt; Basis_, FERequirements_, useEigenRef &gt;::calculateAt</referencedby>
        <referencedby refid="d7/da4/a01287_1afc5090fbbd1054eaa33932e88f2fdb42" compoundref="db/db1/a02404" startline="258" endline="273">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateAt</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddd/a01223_1ad622d1a543d8508029519eb401cade0a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::ResultRequirements&lt; FErequirements &gt;::getRequestedResult</definition>
        <argsstring>() const</argsstring>
        <name>getRequestedResult</name>
        <qualifiedname>Ikarus::ResultRequirements::getRequestedResult</qualifiedname>
        <briefdescription>
<para>Get the requested result type. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the requested result type when only a single result type is present in the set of requested results.</para>
<para><simplesect kind="return"><para>Reference to the requested result type.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Dune::InvalidStateException</parametername>
</parameternamelist>
<parameterdescription>
<para>if the set of requested results does not contain a single result type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="512" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="512" bodyend="518"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class representing the requirements for obtaining specific results. </para>
    </briefdescription>
    <detaileddescription>
<para>This class encapsulates the requirements for obtaining results, including the desired result types, associated affordances, and input parameters. It is templated on the type of <ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="da/d3f/a01215" kindref="compound">FErequirements</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type representing the finite element requirements. Default is FErequirements&lt;&gt;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="371" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="371" bodyend="523"/>
    <listofallmembers>
      <member refid="d7/ddd/a01223_1a766f4be341a9daf3ac3af27888778eeb" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>addAffordance</name></member>
      <member refid="d7/ddd/a01223_1a115edf304fdee5346879789896958ed3" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>addResultRequest</name></member>
      <member refid="d7/ddd/a01223_1a84cdc0f3d956bf0f425d0688bfd1e653" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>getFERequirements</name></member>
      <member refid="d7/ddd/a01223_1ad587482320609b1ab17c82b094000d08" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>getGlobalSolution</name></member>
      <member refid="d7/ddd/a01223_1a6117237834b64f1ebaecafcd282f4d4b" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>getParameter</name></member>
      <member refid="d7/ddd/a01223_1ad622d1a543d8508029519eb401cade0a" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>getRequestedResult</name></member>
      <member refid="d7/ddd/a01223_1ac70755df382d8f81da6abbaa1c2e5199" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>insertGlobalSolution</name></member>
      <member refid="d7/ddd/a01223_1a3fbc8b71e9463eb2aff7afa73db77023" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>insertParameter</name></member>
      <member refid="d7/ddd/a01223_1a3d41a3aca3b508538bed0246af51e8c4" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>isResultRequested</name></member>
      <member refid="d7/ddd/a01223_1a249d873676137eb115f5451427f7503e" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>ParameterTypeRaw</name></member>
      <member refid="d7/ddd/a01223_1adaecec015277d01a3645f755415cea8e" prot="private" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>reqB</name></member>
      <member refid="d7/ddd/a01223_1a0a03273c80dad20c112d57d8087eb1d9" prot="private" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>resType</name></member>
      <member refid="d7/ddd/a01223_1ae63816b06a691101db0313dab0d4ce0f" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>ResultRequirements</name></member>
      <member refid="d7/ddd/a01223_1a0c1bc6b4652926a39d20c8488c297317" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>ResultRequirements</name></member>
      <member refid="d7/ddd/a01223_1a09b6184e9fa1587fd23d29298e1dd15b" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>ResultRequirements</name></member>
      <member refid="d7/ddd/a01223_1ade5c36f80718337e7f4ef4ae8b391146" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>SolutionVectorType</name></member>
      <member refid="d7/ddd/a01223_1a666b1e8176883471623c42d37211dbbc" prot="public" virt="non-virtual"><scope>Ikarus::ResultRequirements</scope><name>SolutionVectorTypeRaw</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
