<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00131" kind="file" language="C++">
    <compoundname>ferequirements.hh</compoundname>
    <includes local="no">iosfwd</includes>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">vector</includes>
    <includes local="no">dune/common/exceptions.hh</includes>
    <includes local="no">Eigen/Core</includes>
    <includes refid="a00008" local="no">ikarus/utils/makeenum.hh</includes>
    <includedby refid="a00278" local="no">_ikarus.cc</includedby>
    <includedby refid="a00116" local="no">autodifffe.hh</includedby>
    <includedby refid="a02505" local="no">basis.hh</includedby>
    <includedby refid="a00209" local="no">boundarypatch.hh</includedby>
    <includedby refid="a02511" local="no">dirichletvalues.hh</includedby>
    <includedby refid="a00137" local="no">enhancedassumedstrains.hh</includedby>
    <includedby refid="a00182" local="no">fehelper.hh</includedby>
    <includedby refid="a00206" local="no">flatassembler.hh</includedby>
    <includedby refid="a02490" local="no">kirchhoffloveshell.hh</includedby>
    <includedby refid="a02487" local="no">kirchhoffloveshell.hh</includedby>
    <includedby refid="a02496" local="no">linearelastic.hh</includedby>
    <includedby refid="a02493" local="no">linearelastic.hh</includedby>
    <includedby refid="a02499" local="no">nonlinearelastic.hh</includedby>
    <includedby refid="a02502" local="no">nonlinearelastic.hh</includedby>
    <includedby refid="a00125" local="no">physicshelper.hh</includedby>
    <includedby refid="a00200" local="no">registerelement.hh</includedby>
    <includedby refid="a00185" local="no">resultevaluators.hh</includedby>
    <includedby refid="a00188" local="no">resultfunction.hh</includedby>
    <includedby refid="a00143" local="no">traction.hh</includedby>
    <includedby refid="a00140" local="no">volume.hh</includedby>
    <incdepgraph>
      <node id="1">
        <label>ferequirements.hh</label>
        <link refid="a00131"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="a00008"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Eigen/Core</label>
      </node>
      <node id="6">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="2">
        <label>iosfwd</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="4">
        <label>set</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>autodifffe.hh</label>
        <link refid="a00116"/>
      </node>
      <node id="8">
        <label>fehelper.hh</label>
        <link refid="a00182"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ferequirements.hh</label>
        <link refid="a00131"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>enhancedassumedstrains.hh</label>
        <link refid="a00137"/>
      </node>
      <node id="9">
        <label>kirchhoffloveshell.hh</label>
        <link refid="a02487"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>linearelastic.hh</label>
        <link refid="a02493"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>loads.hh</label>
        <link refid="a00173"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>traction.hh</label>
        <link refid="a00143"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>volume.hh</label>
        <link refid="a00140"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>materials.hh</label>
        <link refid="a00170"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>interface.hh</label>
        <link refid="a00155"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>linearelasticity.hh</label>
        <link refid="a00161"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>neohooke.hh</label>
        <link refid="a00164"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>svk.hh</label>
        <link refid="a00146"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>vanishingstress.hh</label>
        <link refid="a00149"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>nonlinearelastic.hh</label>
        <link refid="a02499"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>physicshelper.hh</label>
        <link refid="a00125"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>resultevaluators.hh</label>
        <link refid="a00185"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>resultfunction.hh</label>
        <link refid="a00188"/>
      </node>
      <node id="16">
        <label>flatassembler.hh</label>
        <link refid="a00206"/>
      </node>
      <node id="4">
        <label>basis.hh</label>
        <link refid="a02505"/>
      </node>
      <node id="6">
        <label>dirichletvalues.hh</label>
        <link refid="a02511"/>
      </node>
      <node id="10">
        <label>kirchhoffloveshell.hh</label>
        <link refid="a02490"/>
      </node>
      <node id="12">
        <label>linearelastic.hh</label>
        <link refid="a02496"/>
      </node>
      <node id="21">
        <label>material.hh</label>
        <link refid="a00203"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>nonlinearelastic.hh</label>
        <link refid="a02502"/>
      </node>
      <node id="13">
        <label>registerelement.hh</label>
        <link refid="a00200"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>boundarypatch.hh</label>
        <link refid="a00209"/>
      </node>
      <node id="2">
        <label>_ikarus.cc</label>
        <link refid="a00278"/>
      </node>
    </invincdepgraph>
    <innerclass refid="a01224" prot="public">Ikarus::AffordanceCollectionImpl</innerclass>
    <innerclass refid="a01240" prot="public">Ikarus::FERequirements</innerclass>
    <innerclass refid="a01244" prot="public">Ikarus::FErequirements</innerclass>
    <innerclass refid="a01248" prot="public">Ikarus::ResultTypeMap</innerclass>
    <innerclass refid="a01252" prot="public">Ikarus::ResultRequirements</innerclass>
    <innernamespace refid="a00316">Ikarus</innernamespace>
    <innernamespace refid="a00320">Ikarus::AffordanceCollections</innernamespace>
    <briefdescription>
<para>Definition of the LinearElastic class for finite element mechanics computations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/common/exceptions.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="a00008" kindref="compound">ikarus/utils/makeenum.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00316" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight></codeline>
<codeline lineno="30"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="a00311_1ga14ad7d33267cea1c93f97f3998081657" kindref="member">MAKE_ENUM</ref>(<ref refid="a00302_1ga8a33210894e12be4feb3d96fdfde215c" kindref="member">ScalarAffordances</ref>,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noAffordance,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mechanicalPotentialEnergy,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>microMagneticPotentialEnergy</highlight></codeline>
<codeline lineno="34" refid="a00302_1ga8a33210894e12be4feb3d96fdfde215c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="a00311_1ga14ad7d33267cea1c93f97f3998081657" kindref="member">MAKE_ENUM</ref>(<ref refid="a00302_1ga122268ff4d2c0beee58799d85ba5e52a" kindref="member">VectorAffordances</ref>,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noAffordance,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00316_1a8d0ca59930b7ae15351497bd14319d1d" kindref="member">forces</ref>,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>microMagneticForces</highlight></codeline>
<codeline lineno="45" refid="a00316_1aea6d8dd57847aa02cfe354d03fb33873" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="a00311_1ga14ad7d33267cea1c93f97f3998081657" kindref="member">MAKE_ENUM</ref>(<ref refid="a00302_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref>,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noAffordance,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00316_1a5185740b975fb7539a6e07553a061b26" kindref="member">stiffness</ref>,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialstiffness,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometricstiffness,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00316_1a8191d0e317e1bea2a35d6c8a8f20750f" kindref="member">stiffnessdiffBucklingVector</ref>,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>microMagneticHessian,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00316_1a7e05e861b25ca636c1ccba4b8d2a3831" kindref="member">mass</ref></highlight></codeline>
<codeline lineno="60" refid="a00302_1ga52cb89165daabb500f6e2eb68ddd76ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="a00311_1ga14ad7d33267cea1c93f97f3998081657" kindref="member">MAKE_ENUM</ref>(<ref refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref>,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noParameter,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadfactor,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time</highlight></codeline>
<codeline lineno="71" refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="a00311_1ga14ad7d33267cea1c93f97f3998081657" kindref="member">MAKE_ENUM</ref>(<ref refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noSolution,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displacement,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>director,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>magnetizationAndVectorPotential</highlight></codeline>
<codeline lineno="84" refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="a00311_1ga14ad7d33267cea1c93f97f3998081657" kindref="member">MAKE_ENUM</ref>(<ref refid="a00303_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref>,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noType,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>magnetization,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradientNormOfMagnetization,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorPotential,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divergenceOfVectorPotential,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BField,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HField,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cauchyStress,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PK2Stress,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearStress,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>director</highlight></codeline>
<codeline lineno="103" refid="a00303_1ga531be167e924b749eb8b4ccc7f1c18c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="a01224" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="a01224" kindref="compound">AffordanceCollectionImpl</ref></highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112" refid="a01224_1a516061663dea71c22750abaf2175f6d5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00302_1ga8a33210894e12be4feb3d96fdfde215c" kindref="member">ScalarAffordances</ref><sp/><ref refid="a01224_1a516061663dea71c22750abaf2175f6d5" kindref="member">scalarAffordances</ref>{<ref refid="a00302_1gga8a33210894e12be4feb3d96fdfde215ca9a280b29988e2eac8c0767e0fcefb49c" kindref="member">ScalarAffordances::noAffordance</ref>};</highlight></codeline>
<codeline lineno="113" refid="a01224_1a02e0fc97626b53e154bee9121582a69b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00302_1ga122268ff4d2c0beee58799d85ba5e52a" kindref="member">VectorAffordances</ref><sp/><ref refid="a01224_1a02e0fc97626b53e154bee9121582a69b" kindref="member">vectorAffordances</ref>{<ref refid="a00302_1gga122268ff4d2c0beee58799d85ba5e52aa9a280b29988e2eac8c0767e0fcefb49c" kindref="member">VectorAffordances::noAffordance</ref>};</highlight></codeline>
<codeline lineno="114" refid="a01224_1afe3707101cc945fda75d93821846399b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a00302_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref><sp/><ref refid="a01224_1afe3707101cc945fda75d93821846399b" kindref="member">matrixAffordances</ref>{<ref refid="a00302_1gga52cb89165daabb500f6e2eb68ddd76eea9a280b29988e2eac8c0767e0fcefb49c" kindref="member">MatrixAffordances::noAffordance</ref>};</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="121" refid="a01613" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01613" kindref="compound">FEAffordance</ref><sp/>=<sp/>std::is_same_v&lt;std::remove_cvref_t&lt;Type&gt;,<sp/><ref refid="a00302_1ga8a33210894e12be4feb3d96fdfde215c" kindref="member">ScalarAffordances</ref>&gt;<sp/>or</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;std::remove_cvref_t&lt;Type&gt;,<sp/><ref refid="a00302_1ga122268ff4d2c0beee58799d85ba5e52a" kindref="member">VectorAffordances</ref>&gt;<sp/>or</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;std::remove_cvref_t&lt;Type&gt;,<sp/><ref refid="a00302_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref>&gt;<sp/>or</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;std::remove_cvref_t&lt;Type&gt;,<sp/>AffordanceCollectionImpl&gt;;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="a00316_1a8d0ca59930b7ae15351497bd14319d1d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga122268ff4d2c0beee58799d85ba5e52a" kindref="member">VectorAffordances</ref><sp/><ref refid="a00316_1a8d0ca59930b7ae15351497bd14319d1d" kindref="member">forces</ref><sp/>=<sp/><ref refid="a00302_1gga122268ff4d2c0beee58799d85ba5e52aa2c05161a7e67e946ddc889571aac4e89" kindref="member">VectorAffordances::forces</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="a00316_1a5185740b975fb7539a6e07553a061b26" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref><sp/><ref refid="a00316_1a5185740b975fb7539a6e07553a061b26" kindref="member">stiffness</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a00302_1gga52cb89165daabb500f6e2eb68ddd76eea086e8b527490b8abe606a8dd76586ab1" kindref="member">MatrixAffordances::stiffness</ref>;</highlight></codeline>
<codeline lineno="129" refid="a00316_1a8191d0e317e1bea2a35d6c8a8f20750f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref><sp/><ref refid="a00316_1a8191d0e317e1bea2a35d6c8a8f20750f" kindref="member">stiffnessdiffBucklingVector</ref><sp/>=<sp/><ref refid="a00302_1gga52cb89165daabb500f6e2eb68ddd76eeadaa7ff7d704732b763943e3355764532" kindref="member">MatrixAffordances::stiffnessdiffBucklingVector</ref>;</highlight></codeline>
<codeline lineno="130" refid="a00316_1a7e05e861b25ca636c1ccba4b8d2a3831" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref><sp/><ref refid="a00316_1a7e05e861b25ca636c1ccba4b8d2a3831" kindref="member">mass</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="a00302_1gga52cb89165daabb500f6e2eb68ddd76eead90ccffa01275a7a7795fb6d1274e75f" kindref="member">MatrixAffordances::mass</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="a00316_1a64dfa264a039267932c6c99eb66ae98e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="a00302_1ga8a33210894e12be4feb3d96fdfde215c" kindref="member">ScalarAffordances</ref><sp/><ref refid="a00316_1a64dfa264a039267932c6c99eb66ae98e" kindref="member">potentialEnergy</ref><sp/>=<sp/><ref refid="a00302_1gga8a33210894e12be4feb3d96fdfde215ca814f34f472acef493e9ecf0ffccdcae6" kindref="member">ScalarAffordances::mechanicalPotentialEnergy</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="a00320" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">AffordanceCollections<sp/>{</highlight></codeline>
<codeline lineno="135" refid="a00320_1a74c1342e9b6a556e6b1276b7fde137e1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="a01224" kindref="compound">AffordanceCollectionImpl</ref><sp/><ref refid="a00320_1a74c1342e9b6a556e6b1276b7fde137e1" kindref="member">elastoStatics</ref><sp/>=<sp/>{<ref refid="a00302_1gga8a33210894e12be4feb3d96fdfde215ca814f34f472acef493e9ecf0ffccdcae6" kindref="member">ScalarAffordances::mechanicalPotentialEnergy</ref>,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="a00302_1gga122268ff4d2c0beee58799d85ba5e52aa2c05161a7e67e946ddc889571aac4e89" kindref="member">VectorAffordances::forces</ref>,<sp/><ref refid="a00302_1gga52cb89165daabb500f6e2eb68ddd76eea086e8b527490b8abe606a8dd76586ab1" kindref="member">MatrixAffordances::stiffness</ref>};</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DeduceRawVectorType</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_same&lt;T,<sp/>T&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;You<sp/>should<sp/>end<sp/>up<sp/>in<sp/>the<sp/>provided<sp/>specializations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DeduceRawVectorType&lt;std::reference_wrapper&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DeduceRawVectorType&lt;<ref refid="a00323" kindref="compound">Eigen</ref>::Ref&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Type<sp/>=<sp/>Eigen::Ref&lt;T&gt;;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SolutionVectorType_<sp/>=<sp/>std::reference_wrapper&lt;Eigen::VectorXd&gt;,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParameterType_<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::reference_wrapper&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="173" refid="a01240" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01240" kindref="compound">FERequirements</ref></highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="176" refid="a01240_1af1af058f84d982946aa834c9dd29f504" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01240_1af1af058f84d982946aa834c9dd29f504" kindref="member">SolutionVectorType</ref><sp/><sp/><sp/><sp/>=<sp/>SolutionVectorType_;</highlight></codeline>
<codeline lineno="177" refid="a01240_1a0911acef8d62b37965de7a0ead42c85b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01240_1a0911acef8d62b37965de7a0ead42c85b" kindref="member">SolutionVectorTypeRaw</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Impl::DeduceRawVectorType&lt;std::remove_cvref_t&lt;SolutionVectorType_&gt;&gt;::Type;</highlight></codeline>
<codeline lineno="178" refid="a01240_1a9da906516e03b5d6db852aaabec0f458" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01240_1a9da906516e03b5d6db852aaabec0f458" kindref="member">ParameterType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ParameterType_;</highlight></codeline>
<codeline lineno="179" refid="a01240_1ad5d5b9eab0760b9d8be25e6ee75200f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01240_1ad5d5b9eab0760b9d8be25e6ee75200f8" kindref="member">ParameterTypeRaw</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParameterType_::type;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;FEAffordance<sp/>Affordance&gt;</highlight></codeline>
<codeline lineno="191" refid="a01240_1a1e23968b6a7d57454626054bd42dfea0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01240" kindref="compound">FERequirements</ref>&amp;<sp/><ref refid="a01240_1a1e23968b6a7d57454626054bd42dfea0" kindref="member">addAffordance</ref>(Affordance&amp;&amp;<sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;Affordance,<sp/>ScalarAffordances&gt;)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>affordances.<ref refid="a01224_1a516061663dea71c22750abaf2175f6d5" kindref="member">scalarAffordances</ref><sp/>=<sp/>affordance;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;Affordance,<sp/>VectorAffordances&gt;)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>affordances.<ref refid="a01224_1a02e0fc97626b53e154bee9121582a69b" kindref="member">vectorAffordances</ref><sp/>=<sp/>affordance;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;Affordance,<sp/>MatrixAffordances&gt;)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>affordances.<ref refid="a01224_1afe3707101cc945fda75d93821846399b" kindref="member">matrixAffordances</ref><sp/>=<sp/>affordance;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;Affordance,<sp/>AffordanceCollectionImpl&gt;)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>affordances<sp/>=<sp/>affordance;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="a01240_1a2aab5fe2d897e6af030d488832fc0eb2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01240" kindref="compound">FERequirements</ref>&amp;<sp/><ref refid="a01240_1a2aab5fe2d897e6af030d488832fc0eb2" kindref="member">insertParameter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref>&amp;<sp/>key,<sp/><ref refid="a01240_1ad5d5b9eab0760b9d8be25e6ee75200f8" kindref="member">ParameterTypeRaw</ref>&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>parameter.insert_or_assign(key,<sp/>val);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="a01240_1a37df4d17ff9e92b448b0c4d89aadc87b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01240" kindref="compound">FERequirements</ref>&amp;<sp/><ref refid="a01240_1a37df4d17ff9e92b448b0c4d89aadc87b" kindref="member">insertGlobalSolution</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref>&amp;<sp/>key,<sp/><ref refid="a01240_1a0911acef8d62b37965de7a0ead42c85b" kindref="member">SolutionVectorTypeRaw</ref>&amp;<sp/>sol)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>sols.insert_or_assign(key,<sp/>sol);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="a01240_1ae7fc156ad6fff17f82c3ebefb188949e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01240_1a0911acef8d62b37965de7a0ead42c85b" kindref="member">SolutionVectorTypeRaw</ref>&amp;<sp/><ref refid="a01240_1ae7fc156ad6fff17f82c3ebefb188949e" kindref="member">getGlobalSolution</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref>&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;SolutionVectorType,<sp/>std::reference_wrapper&lt;Eigen::VectorXd&gt;&gt;)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sols.at(key).get();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sols.at(key);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::out_of_range&amp;<sp/>oor)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::RangeError,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>Range<sp/>error:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>std::string(oor.what())<sp/>+</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>getGlobalSolution<sp/>with<sp/>key&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="a00316_1a0853622412d4cedc078b81ba454eb250" kindref="member">toString</ref>(key));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="a01240_1aed233407eb8ab5e7c7d7c8ea35265328" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01240_1ad5d5b9eab0760b9d8be25e6ee75200f8" kindref="member">ParameterTypeRaw</ref>&amp;<sp/><ref refid="a01240_1aed233407eb8ab5e7c7d7c8ea35265328" kindref="member">getParameter</ref>(<ref refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref>&amp;&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parameter.at(key).get();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::out_of_range&amp;<sp/>oor)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::RangeError,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>Range<sp/>error:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>std::string(oor.what())<sp/>+</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>getParameter<sp/>with<sp/>key&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="a00316_1a0853622412d4cedc078b81ba454eb250" kindref="member">toString</ref>(key));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;FEAffordance<sp/>Affordance&gt;</highlight></codeline>
<codeline lineno="284" refid="a01240_1a1f2ddb05542926dd20a8e5bfc652479c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="a01240_1a1f2ddb05542926dd20a8e5bfc652479c" kindref="member">hasAffordance</ref>(Affordance&amp;&amp;<sp/>affordance)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;Affordance,<sp/>ScalarAffordances&gt;)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>affordances.<ref refid="a01224_1a516061663dea71c22750abaf2175f6d5" kindref="member">scalarAffordances</ref><sp/>==<sp/>affordance;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;Affordance,<sp/>VectorAffordances&gt;)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>affordances.<ref refid="a01224_1a02e0fc97626b53e154bee9121582a69b" kindref="member">vectorAffordances</ref><sp/>==<sp/>affordance;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;Affordance,<sp/>MatrixAffordances&gt;)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>affordances.<ref refid="a01224_1afe3707101cc945fda75d93821846399b" kindref="member">matrixAffordances</ref><sp/>==<sp/>affordance;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_same_v&lt;Affordance,<sp/>AffordanceCollectionImpl&gt;)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>affordances<sp/>==<sp/>affordance;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>std::map&lt;FESolutions,<sp/>SolutionVectorType&gt;<sp/>sols;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>std::map&lt;FEParameter,<sp/>ParameterType&gt;<sp/>parameter;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="a01224" kindref="compound">AffordanceCollectionImpl</ref><sp/>affordances;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SolutionVectorType_<sp/>=<sp/>std::reference_wrapper&lt;Eigen::VectorXd&gt;,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParameterType_<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::reference_wrapper&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="316" refid="a01244" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">[[deprecated(</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;<ref refid="a01244" kindref="compound">FErequirements</ref><sp/>is<sp/>deprecaded<sp/>and<sp/>will<sp/>be<sp/>removed<sp/>after<sp/>v0.5.<sp/>Use<sp/><ref refid="a01240" kindref="compound">FERequirements</ref><sp/>instead.&quot;)]]<sp/><ref refid="a01244" kindref="compound">FErequirements</ref></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="a01240" kindref="compound">FERequirements</ref>&lt;SolutionVectorType_,<sp/>ParameterType_&gt;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01240" kindref="compound">Base</ref><sp/>=<sp/><ref refid="a01240" kindref="compound">FERequirements&lt;SolutionVectorType_, ParameterType_&gt;</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="323" refid="a01244_1a82afd35371823de34db162e31ea8102b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01244_1a82afd35371823de34db162e31ea8102b" kindref="member">FErequirements</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324" refid="a01244_1a35fe6544c072e98f65f36ab8e3f16738" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01244_1a35fe6544c072e98f65f36ab8e3f16738" kindref="member">FErequirements</ref>(<ref refid="a01240" kindref="compound">Base</ref>&amp;&amp;<sp/>base)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="a01240" kindref="compound">Base</ref>(std::forward&lt;<ref refid="a01240" kindref="compound">Base</ref>&gt;(base))<sp/>{}</highlight></codeline>
<codeline lineno="326" refid="a01244_1af6dc438f49b7ff19613329217bb86df4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01244_1af6dc438f49b7ff19613329217bb86df4" kindref="member">FErequirements</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01240" kindref="compound">Base</ref>&amp;<sp/>base)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="a01240" kindref="compound">Base</ref>(base)<sp/>{}</highlight></codeline>
<codeline lineno="328" refid="a01244_1a985a97bcb9fc27876df7cfab27e791ad" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01244" kindref="compound">FErequirements</ref>&amp;<sp/><ref refid="a01244_1a985a97bcb9fc27876df7cfab27e791ad" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01240" kindref="compound">Base</ref>&amp;<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::operator=(base);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332" refid="a01244_1a3112db3d77a5487d6ea3e48598b64a44" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01244" kindref="compound">FErequirements</ref>&amp;<sp/><ref refid="a01244_1a3112db3d77a5487d6ea3e48598b64a44" kindref="member">operator=</ref>(<ref refid="a01240" kindref="compound">Base</ref>&amp;&amp;<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>Base::operator=(std::forward&lt;Base&gt;(base));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal">};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParameterType<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="349" refid="a01248" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01248" kindref="compound">ResultTypeMap</ref></highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="352" refid="a01248_1a72132ad19ec7049750ba2c4f60cde93f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01248_1a72132ad19ec7049750ba2c4f60cde93f" kindref="member">ResultArray</ref><sp/>=<sp/>Eigen::Matrix&lt;ParameterType,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic,<sp/>0,<sp/>9,<sp/>3&gt;;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="a01248_1aa399a96000daf40950e388eb0b23a7c0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01248_1aa399a96000daf40950e388eb0b23a7c0" kindref="member">insertOrAssignResult</ref>(<ref refid="a00303_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref>&amp;&amp;<sp/>resultType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01248_1a72132ad19ec7049750ba2c4f60cde93f" kindref="member">ResultArray</ref>&amp;<sp/>resultArray)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>results.insert_or_assign(resultType,<sp/>resultArray);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="a01248_1a7f9a61700e42a5507d7dfcfd059a4067" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01248_1a72132ad19ec7049750ba2c4f60cde93f" kindref="member">ResultArray</ref>&amp;<sp/><ref refid="a01248_1a7f9a61700e42a5507d7dfcfd059a4067" kindref="member">getResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00303_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref>&amp;<sp/>resultType)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results.at(resultType);<sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="a01248_1a6c2c52fc90ff0af02def08b0c8f5deb2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="a01248_1a6c2c52fc90ff0af02def08b0c8f5deb2" kindref="member">getSingleResult</ref>()<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(results.size()<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::RangeError,<sp/></highlight><highlight class="stringliteral">&quot;getSingleResult<sp/>can<sp/>only<sp/>be<sp/>called<sp/>when<sp/>a<sp/>single<sp/>result<sp/>was<sp/>inserted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(results.begin());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>std::map&lt;ResultType,<sp/>ResultArray&gt;<sp/>results;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="399" refid="a01614" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal"><ref refid="a01614" kindref="compound">ResultTypeConcept</ref><sp/>=<sp/>std::is_same_v&lt;Type,<sp/>ResultType&gt;;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FERequirements<sp/>=<sp/>FERequirements&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="413" refid="a01252" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01252" kindref="compound">ResultRequirements</ref></highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="416" refid="a01252_1acf475b20f169aa0c5d35067cac32f0c2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01252_1acf475b20f169aa0c5d35067cac32f0c2" kindref="member">ParameterTypeRaw</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01240_1ad5d5b9eab0760b9d8be25e6ee75200f8" kindref="member">FERequirements::ParameterTypeRaw</ref>;</highlight></codeline>
<codeline lineno="417" refid="a01252_1a6572e4b55efcac594536459775487a28" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01252_1a6572e4b55efcac594536459775487a28" kindref="member">SolutionVectorType</ref><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01240_1af1af058f84d982946aa834c9dd29f504" kindref="member">FERequirements::SolutionVectorType</ref>;</highlight></codeline>
<codeline lineno="418" refid="a01252_1a9c76a8f7f9a65f0663ea09d444e4843b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01252_1a9c76a8f7f9a65f0663ea09d444e4843b" kindref="member">SolutionVectorTypeRaw</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="a01240_1a0911acef8d62b37965de7a0ead42c85b" kindref="member">FERequirements::SolutionVectorTypeRaw</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="a01252_1ae9f5aa3ebb36cf7bb2d647d984354075" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01252_1ae9f5aa3ebb36cf7bb2d647d984354075" kindref="member">ResultRequirements</ref>(<ref refid="a01240" kindref="compound">FERequirements</ref>&amp;&amp;<sp/>req,<sp/>std::set&lt;ResultType&gt;&amp;&amp;<sp/>p_resType)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>reqB{req},</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resType(std::move(p_resType))<sp/>{}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="a01252_1acc8b5392590e2ea3ebd73f3cb920f2cd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01252_1acc8b5392590e2ea3ebd73f3cb920f2cd" kindref="member">ResultRequirements</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01240" kindref="compound">FERequirements</ref>&amp;<sp/>req)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>reqB{req}<sp/>{}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="a01252_1a7209c38b9e0f6f251a00b582859d852b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01252_1a7209c38b9e0f6f251a00b582859d852b" kindref="member">ResultRequirements</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="a01252_1aa75a1bfbcca39d7c30d1b1141eae4795" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="a01252_1aa75a1bfbcca39d7c30d1b1141eae4795" kindref="member">isResultRequested</ref>(<ref refid="a00303_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref>&amp;&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resType.contains(key);<sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;FEAffordance<sp/>Affordance&gt;</highlight></codeline>
<codeline lineno="469" refid="a01252_1a0900b42cbc6485aad82c55179234b087" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01252" kindref="compound">ResultRequirements</ref>&amp;<sp/><ref refid="a01252_1a0900b42cbc6485aad82c55179234b087" kindref="member">addAffordance</ref>(Affordance&amp;&amp;<sp/>affordance)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>reqB.<ref refid="a01240_1a1e23968b6a7d57454626054bd42dfea0" kindref="member">addAffordance</ref>(std::forward&lt;Affordance&gt;(affordance));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="a01252_1a3ee8e39fcf1acce22dc1b5c36c70a1fd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01252" kindref="compound">ResultRequirements</ref>&amp;<sp/><ref refid="a01252_1a3ee8e39fcf1acce22dc1b5c36c70a1fd" kindref="member">insertParameter</ref>(<ref refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref>&amp;&amp;<sp/>key,<sp/><ref refid="a01252_1acf475b20f169aa0c5d35067cac32f0c2" kindref="member">ParameterTypeRaw</ref>&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>reqB.<ref refid="a01240_1a2aab5fe2d897e6af030d488832fc0eb2" kindref="member">insertParameter</ref>(std::forward&lt;FEParameter&gt;(key),<sp/>val);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="a01252_1a98129560488126934c2937dc3954a74d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01252" kindref="compound">ResultRequirements</ref>&amp;<sp/><ref refid="a01252_1a98129560488126934c2937dc3954a74d" kindref="member">insertGlobalSolution</ref>(<ref refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref>&amp;&amp;<sp/>key,<sp/><ref refid="a01252_1a9c76a8f7f9a65f0663ea09d444e4843b" kindref="member">SolutionVectorTypeRaw</ref>&amp;<sp/>sol)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>reqB.<ref refid="a01240_1a37df4d17ff9e92b448b0c4d89aadc87b" kindref="member">insertGlobalSolution</ref>(std::forward&lt;FESolutions&gt;(key),<sp/>sol);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="a01614" kindref="compound">ResultTypeConcept</ref>...<sp/>ResultTypes&gt;</highlight></codeline>
<codeline lineno="512" refid="a01252_1a18e3aaa93d9106e11d846c7378f1e849" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01252" kindref="compound">ResultRequirements</ref>&amp;<sp/><ref refid="a01252_1a18e3aaa93d9106e11d846c7378f1e849" kindref="member">addResultRequest</ref>(ResultTypes&amp;&amp;...<sp/>keys)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>resType.insert({std::move(keys)...});</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="a01252_1a15c5fab8c1190b52ff013c244fdfa486" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01252_1a9c76a8f7f9a65f0663ea09d444e4843b" kindref="member">SolutionVectorTypeRaw</ref>&amp;<sp/><ref refid="a01252_1a15c5fab8c1190b52ff013c244fdfa486" kindref="member">getGlobalSolution</ref>(<ref refid="a00303_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref>&amp;&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reqB.<ref refid="a01240_1ae7fc156ad6fff17f82c3ebefb188949e" kindref="member">getGlobalSolution</ref>(std::move(key));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="a01252_1aa548e0d7e6823134a51d91d5ec47c37f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01252_1acf475b20f169aa0c5d35067cac32f0c2" kindref="member">ParameterTypeRaw</ref>&amp;<sp/><ref refid="a01252_1aa548e0d7e6823134a51d91d5ec47c37f" kindref="member">getParameter</ref>(<ref refid="a00303_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref>&amp;&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reqB.<ref refid="a01240_1aed233407eb8ab5e7c7d7c8ea35265328" kindref="member">getParameter</ref>(std::move(key));<sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="a01252_1a55da3509459a63cd2ffcb20df9039d0d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01240" kindref="compound">FERequirements</ref>&amp;<sp/><ref refid="a01252_1a55da3509459a63cd2ffcb20df9039d0d" kindref="member">getFERequirements</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reqB;<sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="557" refid="a01252_1a244a5a171cdb08dbed0797d5c0669b85" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="a01252_1a244a5a171cdb08dbed0797d5c0669b85" kindref="member">getRequestedResult</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resType.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(resType.begin());</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::InvalidStateException,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>function<sp/>can<sp/>only<sp/>be<sp/>called<sp/>when<sp/>a<sp/>single<sp/>result<sp/>is<sp/>requested&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>std::set&lt;ResultType&gt;<sp/>resType;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><ref refid="a01240" kindref="compound">FERequirements</ref><sp/>reqB;</highlight></codeline>
<codeline lineno="568"><highlight class="normal">};</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh"/>
  </compounddef>
</doxygen>
