<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00143" kind="file" language="C++">
    <compoundname>linearsolver.hh</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">variant</includes>
    <includes local="no">dune/common/exceptions.hh</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">Eigen/SparseCore</includes>
    <includedby refid="a00155" local="no">newtonraphson.hh</includedby>
    <includedby refid="a00137" local="no">pathfollowingfunctions.hh</includedby>
    <incdepgraph>
      <node id="1">
        <label>linearsolver.hh</label>
        <link refid="a00143"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Eigen/Core</label>
      </node>
      <node id="7">
        <label>Eigen/SparseCore</label>
      </node>
      <node id="5">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
      <node id="3">
        <label>type_traits</label>
      </node>
      <node id="4">
        <label>variant</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="14">
        <label>adaptivestepsizing.hh</label>
        <link refid="a00140"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>pathfollowing.hh</label>
        <link refid="a00122"/>
      </node>
      <node id="16">
        <label>pathfollowing.inl</label>
        <link refid="a00128"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>pathfollowingfunctions.hh</label>
        <link refid="a00137"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>kirchhoffloveshell.hh</label>
        <link refid="a02485"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>linearelastic.hh</label>
        <link refid="a02491"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>materials.hh</label>
        <link refid="a00215"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>vanishingstress.hh</label>
        <link refid="a00236"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>kirchhoffloveshell.hh</label>
        <link refid="a02488"/>
      </node>
      <node id="8">
        <label>linearelastic.hh</label>
        <link refid="a02494"/>
      </node>
      <node id="11">
        <label>material.hh</label>
        <link refid="a00281"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>nonlinearelastic.hh</label>
        <link refid="a02500"/>
      </node>
      <node id="9">
        <label>registerelement.hh</label>
        <link refid="a00278"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>linearsolver.hh</label>
        <link refid="a00143"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>newtonraphson.hh</label>
        <link refid="a00155"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>newtonraphsonwithscalarsubsidiaryfunction.hh</label>
        <link refid="a00152"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>_ikarus.cc</label>
        <link refid="a00284"/>
      </node>
    </invincdepgraph>
    <innerclass refid="a01428" prot="public">Ikarus::LinearSolverTemplate</innerclass>
    <innerclass refid="a01432" prot="private">Ikarus::LinearSolverTemplate::SolverBase</innerclass>
    <innerclass refid="a01436" prot="private">Ikarus::LinearSolverTemplate::SolverImpl</innerclass>
    <innernamespace refid="a00328">Ikarus</innernamespace>
    <briefdescription>
<para>Type-erased linear solver with templated scalar type. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/common/exceptions.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/SparseCore&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="a00328" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="a00328_1a731a9ee6621f91193c15f31b9a399906" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906" kindref="member">SolverTypeTag</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">none</ref>,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a43e7ad1498548ecfbe9359418877c793" kindref="member">si_ConjugateGradient</ref>,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a64a3b585d23ed07479c1452d49f397bb" kindref="member">si_LeastSquaresConjugateGradient</ref>,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a3ba09bd833aa666cbeca9bfd4a33be6f" kindref="member">si_BiCGSTAB</ref>,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906acd4c06ca3bfe2246c9ec45bee84b5852" kindref="member">sd_SimplicialLLT</ref>,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906af493d8a2d2d89f06181e77bc79cabf1c" kindref="member">sd_SimplicialLDLT</ref>,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906ae7cfd15be408672026faa788c0c112e5" kindref="member">sd_SparseLU</ref>,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a259246f1b3299da36945e32f5660bebd" kindref="member">sd_SparseQR</ref>,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a286dc99776bcd1ea313e669aa17b3236" kindref="member">sd_CholmodSupernodalLLT</ref>,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906afe6a46ed15566813699daa9c9cbf85d5" kindref="member">sd_UmfPackLU</ref>,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906aa8fe11042608f12d110c154033361fcc" kindref="member">sd_SuperLU</ref>,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a97eafebe024f68db956c95519ddf66f2" kindref="member">d_PartialPivLU</ref>,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a4c20d1c5006d9987b894313a4af5de6e" kindref="member">d_FullPivLU</ref>,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a290d38c1d75cda978733c7ee8266e16e" kindref="member">d_HouseholderQR</ref>,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906af66de0478863779eca4d9e7dcf39c59a" kindref="member">d_ColPivHouseholderQR</ref>,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a9be60de1df84a8b371f0ad372aba4582" kindref="member">d_FullPivHouseholderQR</ref>,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906ae1f5f0486da0c6645a75c3df39d8d942" kindref="member">d_CompleteOrthogonalDecomposition</ref>,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a40c05e324bcfe6242fddbef28720e86a" kindref="member">d_LLT</ref>,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906ad495de2cc8831501954c24afe8688190" kindref="member">d_LDLT</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="a00328_1a4763ca5888a027ed9b8d965d67cbb9ab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="a00328_1a4763ca5888a027ed9b8d965d67cbb9ab" kindref="member">MatrixTypeTag</ref></highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a4763ca5888a027ed9b8d965d67cbb9aba9a71a13863c84ba34fc41595fc2ee0c6" kindref="member">Dense</ref>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a4763ca5888a027ed9b8d965d67cbb9aba7407fb7e6a4df6392aaabd2368157312" kindref="member">Sparse</ref></highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ST<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="67" refid="a01428" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref></highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70" refid="a01428_1ab222fb68571b860471b41e2c707d5637" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01428_1ab222fb68571b860471b41e2c707d5637" kindref="member">ScalarType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ST;</highlight></codeline>
<codeline lineno="71" refid="a01428_1ab653f5550c90008600c77abe785963a0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01428_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref><sp/>=<sp/>Eigen::SparseMatrix&lt;ScalarType&gt;;</highlight></codeline>
<codeline lineno="72" refid="a01428_1a9f52825b9226c080976fa759fc0f5a1b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01428_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref><sp/><sp/>=<sp/>Eigen::MatrixX&lt;ScalarType&gt;;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="a01428_1a2d2c1ea4b5bdb1642442e94c64e03aef" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="a01428_1a2d2c1ea4b5bdb1642442e94c64e03aef" kindref="member">LinearSolverTemplate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906" kindref="member">SolverTypeTag</ref>&amp;<sp/>solverTypeTag);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="a01428_1a683577ea4ceced6e7e74a6a37180c279" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01428_1a683577ea4ceced6e7e74a6a37180c279" kindref="member">~LinearSolverTemplate</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="a01428_1ab08cf628010af09d0de6155ac8da25a6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>&amp;<sp/><ref refid="a01428_1ab08cf628010af09d0de6155ac8da25a6" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref><sp/>tmp(other);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="a01428_1a5e6a040954d7452eed8cb74d08b7e1d5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01428_1a5e6a040954d7452eed8cb74d08b7e1d5" kindref="member">LinearSolverTemplate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>&amp;<sp/>other)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="a01428_1a5e6a040954d7452eed8cb74d08b7e1d5" kindref="member">LinearSolverTemplate</ref>(other.solverTypeTag_);<sp/>}</highlight></codeline>
<codeline lineno="104" refid="a01428_1a77210b698dab50ebe8a001b5c086ebce" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01428_1a77210b698dab50ebe8a001b5c086ebce" kindref="member">LinearSolverTemplate</ref>(<ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110" refid="a01428_1a38ea395ad12b0d6056a8f5845d483276" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>&amp;<sp/><ref refid="a01428_1a38ea395ad12b0d6056a8f5845d483276" kindref="member">operator=</ref>(<ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SolverBase</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~SolverBase()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1a771b39a199d35745e0a1cbdec03db762" kindref="member">analyzePattern</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1a771b39a199d35745e0a1cbdec03db762" kindref="member">analyzePattern</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref>&amp;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1ad19ae7c98843dd8ecad6586003ed3b5d" kindref="member">factorize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref>&amp;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1ad19ae7c98843dd8ecad6586003ed3b5d" kindref="member">factorize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref>&amp;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" kindref="member">compute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref>&amp;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" kindref="member">compute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref>&amp;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" kindref="member">solve</ref>(Eigen::VectorX&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" kindref="member">solve</ref>(Eigen::MatrixX2&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixX2&lt;ScalarType&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" kindref="member">solve</ref>(Eigen::MatrixX3&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixX3&lt;ScalarType&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" kindref="member">solve</ref>(Eigen::MatrixX&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixX&lt;ScalarType&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Solver&gt;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SolverImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SolverBase</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">SolverBase::analyzePattern;<sp/></highlight><highlight class="comment">//<sp/>forward<sp/>use<sp/>of<sp/>analyzePattern(DenseMatrixType)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1a771b39a199d35745e0a1cbdec03db762" kindref="member">analyzePattern</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref>&amp;<sp/>A)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">requires</highlight><highlight class="normal">(Solver<sp/>sol)<sp/>{<sp/>sol.analyzePattern(A);<sp/>})</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.analyzePattern(A);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1ad19ae7c98843dd8ecad6586003ed3b5d" kindref="member">factorize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref>&amp;<sp/>A)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">requires</highlight><highlight class="normal">(Solver<sp/>sol)<sp/>{<sp/>sol.factorize(A);<sp/>})</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.factorize(A);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dense<sp/>Solvers<sp/>do<sp/>not<sp/>have<sp/>a<sp/>factorize<sp/>method<sp/>therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>interface<sp/>we<sp/>just<sp/>call<sp/>compute<sp/>for<sp/>dense<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1ad19ae7c98843dd8ecad6586003ed3b5d" kindref="member">factorize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref>&amp;<sp/>A)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">requires</highlight><highlight class="normal">(Solver<sp/>sol)<sp/>{<sp/>sol.compute(A);<sp/>}<sp/>&amp;&amp;<sp/>std::is_base_of_v&lt;Eigen::SolverBase&lt;Solver&gt;,<sp/>Solver&gt;)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.compute(A);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" kindref="member">compute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1ab653f5550c90008600c77abe785963a0" kindref="member">SparseMatrixType</ref>&amp;<sp/>A)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_base_of_v&lt;Eigen::SparseSolverBase&lt;Solver&gt;,<sp/>Solver&gt;)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" kindref="member">compute</ref>(A);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::NotImplemented,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>solver<sp/>does<sp/>not<sp/>support<sp/>solving<sp/>with<sp/>sparse<sp/>matrices.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" kindref="member">compute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="a01428_1a9f52825b9226c080976fa759fc0f5a1b" kindref="member">DenseMatrixType</ref>&amp;<sp/>A)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_base_of_v&lt;Eigen::SolverBase&lt;Solver&gt;,<sp/>Solver&gt;)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" kindref="member">compute</ref>(A);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::NotImplemented,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>solver<sp/>does<sp/>not<sp/>support<sp/>solving<sp/>with<sp/>dense<sp/>matrices.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" kindref="member">solve</ref>(Eigen::VectorX&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{<sp/>x<sp/>=<sp/>solver.solve(b);<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" kindref="member">solve</ref>(Eigen::MatrixX2&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixX2&lt;ScalarType&gt;&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>solver.solve(b);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" kindref="member">solve</ref>(Eigen::MatrixX3&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixX3&lt;ScalarType&gt;&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>solver.solve(b);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" kindref="member">solve</ref>(Eigen::MatrixX&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixX&lt;ScalarType&gt;&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{<sp/>x<sp/>=<sp/>solver.solve(b);<sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>Solver<sp/>solver;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;SolverBase&gt;<sp/>solverimpl_;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906" kindref="member">SolverTypeTag</ref><sp/>solverTypeTag_{<ref refid="a00328_1a731a9ee6621f91193c15f31b9a399906a334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">SolverTypeTag::none</ref>};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatrixType&gt;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::is_same_v&lt;MatrixType,<sp/>DenseMatrixType&gt;<sp/>||<sp/>std::is_same_v&lt;MatrixType,<sp/>SparseMatrixType&gt;</highlight></codeline>
<codeline lineno="190" refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="a01428" kindref="compound">LinearSolverTemplate</ref>&amp;<sp/><ref refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" kindref="member">compute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixType&amp;<sp/>A)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>solverimpl_-&gt;<ref refid="a01428_1a1c92808f8c8139bb32f50740f0bcb783" kindref="member">compute</ref>(A);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatrixType&gt;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::is_same_v&lt;MatrixType,<sp/>DenseMatrixType&gt;<sp/>||<sp/>std::is_same_v&lt;MatrixType,<sp/>SparseMatrixType&gt;</highlight></codeline>
<codeline lineno="202" refid="a01428_1a771b39a199d35745e0a1cbdec03db762" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1a771b39a199d35745e0a1cbdec03db762" kindref="member">analyzePattern</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixType&amp;<sp/>A)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>solverimpl_-&gt;analyzePattern(A);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatrixType&gt;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::is_same_v&lt;MatrixType,<sp/>DenseMatrixType&gt;<sp/>||<sp/>std::is_same_v&lt;MatrixType,<sp/>SparseMatrixType&gt;</highlight></codeline>
<codeline lineno="213" refid="a01428_1ad19ae7c98843dd8ecad6586003ed3b5d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1ad19ae7c98843dd8ecad6586003ed3b5d" kindref="member">factorize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixType&amp;<sp/>A)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>solverimpl_-&gt;factorize(A);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1aee8cb48155fb74e976d6ccdef6313dac" kindref="member">solve</ref>(Eigen::VectorX&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&amp;<sp/>b)<sp/>{<sp/>solverimpl_-&gt;solve(x,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="a01428_1a6313a4e4112c84af47156be3463acabc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1a6313a4e4112c84af47156be3463acabc" kindref="member">solve</ref>(Eigen::MatrixX3&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixX3&lt;ScalarType&gt;&amp;<sp/>b)<sp/>{<sp/>solverimpl_-&gt;solve(x,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="235" refid="a01428_1aef63652936885765e62b9cca984e347a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1aef63652936885765e62b9cca984e347a" kindref="member">solve</ref>(Eigen::MatrixX2&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixX2&lt;ScalarType&gt;&amp;<sp/>b)<sp/>{<sp/>solverimpl_-&gt;solve(x,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="a01428_1a6cd3b6346a6299ca7e4c77324e271c63" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="a01428_1a6cd3b6346a6299ca7e4c77324e271c63" kindref="member">solve</ref>(Eigen::MatrixX&lt;ScalarType&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixX&lt;ScalarType&gt;&amp;<sp/>b)<sp/>{<sp/>solverimpl_-&gt;solve(x,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal">};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="a00328_1a2afda25e777ed3a794da319ba535b87b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="a01428" kindref="compound">LinearSolver</ref><sp/>=<sp/><ref refid="a01428" kindref="compound">LinearSolverTemplate&lt;double&gt;</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="a01428" kindref="compound">LinearSolverTemplate&lt;double&gt;</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh"/>
  </compounddef>
</doxygen>
