<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="dd/df3/a00219" kind="namespace" language="C++">
    <compoundname>Ikarus</compoundname>
    <innerclass refid="d6/dc4/a01125" prot="public">Ikarus::AffordanceCollectionImpl</innerclass>
    <innerclass refid="df/db8/a01317" prot="public">Ikarus::AlgoInfo</innerclass>
    <innerclass refid="d8/ded/a01113" prot="public">Ikarus::AutoDiffFE</innerclass>
    <innerclass refid="dc/d2a/a01333" prot="public">Ikarus::Basis</innerclass>
    <innerclass refid="de/d61/a01205" prot="public">Ikarus::BulkModulusAndLamesFirstParameter</innerclass>
    <innerclass refid="da/d77/a01381" prot="public">Ikarus::CheckFlags</innerclass>
    <innerclass refid="d2/df3/a01085" prot="public">Ikarus::ControlInformation</innerclass>
    <innerclass refid="d0/d95/a01389" prot="public">Ikarus::ControlLogger</innerclass>
    <innerclass refid="d3/d92/a01393" prot="public">Ikarus::ControlSubsamplingVertexVTKWriter</innerclass>
    <innerclass refid="d5/d54/a01213" prot="public">Ikarus::ConvertLameConstants</innerclass>
    <innerclass refid="d9/d7c/a01073" prot="public">Ikarus::DenseFlatAssembler</innerclass>
    <innerclass refid="dc/dab/a01237" prot="public">Ikarus::DirichletValues</innerclass>
    <innerclass refid="de/d1d/a01105" prot="public">Ikarus::DisplacementControl</innerclass>
    <innerclass refid="de/df6/a01141" prot="public">Ikarus::FErequirements</innerclass>
    <innerclass refid="dc/d06/a01153" prot="public">Ikarus::FETraits</innerclass>
    <innerclass refid="d2/db8/a01057" prot="public">Ikarus::FlatAssemblerBase</innerclass>
    <innerclass refid="d2/d1f/a01361" prot="public">Ikarus::FlatIndexMergingStrategy</innerclass>
    <innerclass refid="d7/d81/a01365" prot="public">Ikarus::FlatIndexMergingStrategy&lt; Dune::Functions::BasisFactory::BlockedInterleaved &gt;</innerclass>
    <innerclass refid="d1/d17/a01369" prot="public">Ikarus::FlatIndexMergingStrategy&lt; Dune::Functions::BasisFactory::BlockedLexicographic &gt;</innerclass>
    <innerclass refid="df/d10/a01357" prot="public">Ikarus::FlatPreBasis</innerclass>
    <innerclass refid="d7/d38/a01373" prot="public">Ikarus::FlatPreBasis&lt; Dune::Functions::CompositePreBasis&lt; IMS, SPB... &gt; &gt;</innerclass>
    <innerclass refid="d3/dea/a01377" prot="public">Ikarus::FlatPreBasis&lt; Dune::Functions::PowerPreBasis&lt; IMS, SPB, C &gt; &gt;</innerclass>
    <innerclass refid="d7/d1c/a01397" prot="public">Ikarus::GenericObserver</innerclass>
    <innerclass refid="df/d68/a01385" prot="public">Ikarus::IkarusInstance</innerclass>
    <innerclass refid="d9/d25/a01157" prot="public">Ikarus::KirchhoffLoveShell</innerclass>
    <innerclass refid="de/d04/a01209" prot="public">Ikarus::LamesFirstParameterAndShearModulus</innerclass>
    <innerclass refid="d7/daf/a01169" prot="public">Ikarus::LinearElasticityT</innerclass>
    <innerclass refid="de/d85/a01273" prot="public">Ikarus::LinearSolverTemplate</innerclass>
    <innerclass refid="d3/dc4/a01089" prot="public">Ikarus::LoadControl</innerclass>
    <innerclass refid="de/d99/a01101" prot="public">Ikarus::LoadControlWithSubsidiaryFunction</innerclass>
    <innerclass refid="de/d6c/a01349" prot="public">Ikarus::LoadDefault</innerclass>
    <innerclass refid="dc/d81/a01161" prot="public">Ikarus::Material</innerclass>
    <innerclass refid="d7/d0c/a01173" prot="public">Ikarus::NeoHookeT</innerclass>
    <innerclass refid="d9/dda/a01289" prot="public">Ikarus::NewtonRaphson</innerclass>
    <innerclass refid="d1/d1a/a01285" prot="public">Ikarus::NewtonRaphsonSettings</innerclass>
    <innerclass refid="d3/d07/a01301" prot="public">Ikarus::NewtonRaphsonWithSubsidiaryFunction</innerclass>
    <innerclass refid="dc/d8c/a01297" prot="public">Ikarus::NewtonRaphsonWithSubsidiaryFunctionSettings</innerclass>
    <innerclass refid="d3/d0b/a01253" prot="public">Ikarus::NonLinearOperator</innerclass>
    <innerclass refid="db/d4b/a01309" prot="public">Ikarus::NonLinearSolverInformation</innerclass>
    <innerclass refid="d4/d1a/a01405" prot="public">Ikarus::NonLinearSolverLogger</innerclass>
    <innerclass refid="d8/dbf/a01109" prot="public">Ikarus::PathFollowing</innerclass>
    <innerclass refid="d6/d8b/a01117" prot="public">Ikarus::PowerBasisFE</innerclass>
    <innerclass refid="d6/da1/a01233" prot="public">Ikarus::ResultFunction</innerclass>
    <innerclass refid="d8/d02/a01149" prot="public">Ikarus::ResultRequirements</innerclass>
    <innerclass refid="d9/d65/a01145" prot="public">Ikarus::ResultTypeMap</innerclass>
    <innerclass refid="de/d9e/a01061" prot="public">Ikarus::ScalarAssembler</innerclass>
    <innerclass refid="dd/de4/a01121" prot="public">Ikarus::ScalarFieldFE</innerclass>
    <innerclass refid="de/da0/a01341" prot="public">Ikarus::SolverDefault</innerclass>
    <innerclass refid="d8/d18/a01069" prot="public">Ikarus::SparseFlatAssembler</innerclass>
    <innerclass refid="d1/dfa/a01097" prot="public">Ikarus::StandardArcLength</innerclass>
    <innerclass refid="d9/d5c/a01321" prot="public">Ikarus::Stats</innerclass>
    <innerclass refid="dc/d98/a01177" prot="public">Ikarus::StVenantKirchhoffT</innerclass>
    <innerclass refid="de/d1c/a01093" prot="public">Ikarus::SubsidiaryArgs</innerclass>
    <innerclass refid="d3/dd3/a01185" prot="public">Ikarus::TraitsFromLocalView</innerclass>
    <innerclass refid="dd/d5d/a01325" prot="public">Ikarus::TrustRegion</innerclass>
    <innerclass refid="de/d90/a01313" prot="public">Ikarus::TrustRegionSettings</innerclass>
    <innerclass refid="d4/deb/a01345" prot="public">Ikarus::UpdateDefault</innerclass>
    <innerclass refid="d8/d92/a01165" prot="public">Ikarus::VanishingStress</innerclass>
    <innerclass refid="d0/dc9/a01065" prot="public">Ikarus::VectorFlatAssembler</innerclass>
    <innerclass refid="d4/d10/a01197" prot="public">Ikarus::YoungsModulusAndBulkModulus</innerclass>
    <innerclass refid="de/df7/a01201" prot="public">Ikarus::YoungsModulusAndLamesFirstParameter</innerclass>
    <innerclass refid="d3/d10/a01189" prot="public">Ikarus::YoungsModulusAndPoissonsRatio</innerclass>
    <innerclass refid="dd/d43/a01193" prot="public">Ikarus::YoungsModulusAndShearModulus</innerclass>
    <innernamespace refid="d5/d0b/a00220">Ikarus::AdaptiveStepSizing</innernamespace>
    <innernamespace refid="dd/d52/a00221">Ikarus::AffordanceCollections</innernamespace>
    <innernamespace refid="dd/d2d/a00229">Ikarus::Concepts</innernamespace>
    <innernamespace refid="d1/da8/a00230">Ikarus::plot</innernamespace>
    <innernamespace refid="d9/d01/a00227">Ikarus::Python</innernamespace>
    <innernamespace refid="d5/ddf/a00224">Ikarus::ResultEvaluators</innernamespace>
    <innernamespace refid="d0/d53/a00232">Ikarus::Std</innernamespace>
    <innernamespace refid="de/dc2/a00228">Ikarus::utils</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906" prot="public" static="no" strong="yes">
        <type></type>
        <name>SolverTypeTag</name>
        <qualifiedname>Ikarus::SolverTypeTag</qualifiedname>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a334c4a4c42fdb79d7ebc3e73b517e6f8" prot="public">
          <name>none</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a43e7ad1498548ecfbe9359418877c793" prot="public">
          <name>si_ConjugateGradient</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a64a3b585d23ed07479c1452d49f397bb" prot="public">
          <name>si_LeastSquaresConjugateGradient</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a3ba09bd833aa666cbeca9bfd4a33be6f" prot="public">
          <name>si_BiCGSTAB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906acd4c06ca3bfe2246c9ec45bee84b5852" prot="public">
          <name>sd_SimplicialLLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906af493d8a2d2d89f06181e77bc79cabf1c" prot="public">
          <name>sd_SimplicialLDLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906ae7cfd15be408672026faa788c0c112e5" prot="public">
          <name>sd_SparseLU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a259246f1b3299da36945e32f5660bebd" prot="public">
          <name>sd_SparseQR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a286dc99776bcd1ea313e669aa17b3236" prot="public">
          <name>sd_CholmodSupernodalLLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906afe6a46ed15566813699daa9c9cbf85d5" prot="public">
          <name>sd_UmfPackLU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906aa8fe11042608f12d110c154033361fcc" prot="public">
          <name>sd_SuperLU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a97eafebe024f68db956c95519ddf66f2" prot="public">
          <name>d_PartialPivLU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a4c20d1c5006d9987b894313a4af5de6e" prot="public">
          <name>d_FullPivLU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a290d38c1d75cda978733c7ee8266e16e" prot="public">
          <name>d_HouseholderQR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906af66de0478863779eca4d9e7dcf39c59a" prot="public">
          <name>d_ColPivHouseholderQR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a9be60de1df84a8b371f0ad372aba4582" prot="public">
          <name>d_FullPivHouseholderQR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906ae1f5f0486da0c6645a75c3df39d8d942" prot="public">
          <name>d_CompleteOrthogonalDecomposition</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906a40c05e324bcfe6242fddbef28720e86a" prot="public">
          <name>d_LLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906ad495de2cc8831501954c24afe8688190" prot="public">
          <name>d_LDLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="16" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="16" bodyend="36"/>
      </memberdef>
      <memberdef kind="enum" id="dd/df3/a00219_1a4763ca5888a027ed9b8d965d67cbb9ab" prot="public" static="no" strong="yes">
        <type></type>
        <name>MatrixTypeTag</name>
        <qualifiedname>Ikarus::MatrixTypeTag</qualifiedname>
        <enumvalue id="dd/df3/a00219_1a4763ca5888a027ed9b8d965d67cbb9aba9a71a13863c84ba34fc41595fc2ee0c6" prot="public">
          <name>Dense</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a4763ca5888a027ed9b8d965d67cbb9aba7407fb7e6a4df6392aaabd2368157312" prot="public">
          <name>Sparse</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="38" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="enum" id="dd/df3/a00219_1ace28d4868cfc647491f7938f04ef6c66" prot="public" static="no" strong="yes">
        <type></type>
        <name>PreConditioner</name>
        <qualifiedname>Ikarus::PreConditioner</qualifiedname>
        <enumvalue id="dd/df3/a00219_1ace28d4868cfc647491f7938f04ef6c66a7a24b184ba388b8e327feb98dbe168ff" prot="public">
          <name>IncompleteCholesky</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1ace28d4868cfc647491f7938f04ef6c66a7a93111b975ec3c3824eab230f3ec608" prot="public">
          <name>IdentityPreconditioner</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1ace28d4868cfc647491f7938f04ef6c66a3c6b5404db3b7bf45a0302f376a53afc" prot="public">
          <name>DiagonalPreconditioner</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="29" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="dd/df3/a00219_1abd5d0cf356d1ae81f6ee827b0f47c674" prot="public" static="no" strong="yes">
        <type></type>
        <name>StopReason</name>
        <qualifiedname>Ikarus::StopReason</qualifiedname>
        <enumvalue id="dd/df3/a00219_1abd5d0cf356d1ae81f6ee827b0f47c674a0c4f44592a7ae85baf42cb3fb4a5a3d1" prot="public">
          <name>gradientNormTolReached</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1abd5d0cf356d1ae81f6ee827b0f47c674ad1c6a6016de417acc66b5ac44a1fdca3" prot="public">
          <name>correctionNormTolReached</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1abd5d0cf356d1ae81f6ee827b0f47c674ad205528fe2a4412b89626ff7eee936f9" prot="public">
          <name>maximumTimeReached</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1abd5d0cf356d1ae81f6ee827b0f47c674a5ed07f9461b91dd3a6ba961a0ed5c8fe" prot="public">
          <name>maximumIterationsReached</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1abd5d0cf356d1ae81f6ee827b0f47c674a8d2fa9685be8b8f8994bd8a73bfa8c9f" prot="public">
          <name>dontStop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="46" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="46" bodyend="52"/>
      </memberdef>
      <memberdef kind="enum" id="dd/df3/a00219_1a35fa62fd2d4186a9750af3d0692f2893" prot="public" static="no" strong="yes">
        <type></type>
        <name>ControlMessages</name>
        <qualifiedname>Ikarus::ControlMessages</qualifiedname>
        <enumvalue id="dd/df3/a00219_1a35fa62fd2d4186a9750af3d0692f2893a19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a35fa62fd2d4186a9750af3d0692f2893a3fbccdb8d4ddfe10b3c9ee45ed07aad0" prot="public">
          <name>CONTROL_STARTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a35fa62fd2d4186a9750af3d0692f2893a1c32d268de88f801deb25166d98a3938" prot="public">
          <name>CONTROL_ENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a35fa62fd2d4186a9750af3d0692f2893a18e0c9ecde68d13f1d2608dd1a180945" prot="public">
          <name>STEP_STARTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a35fa62fd2d4186a9750af3d0692f2893ae2b2386af3d7379bd2ddde735d5867b2" prot="public">
          <name>STEP_ENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a35fa62fd2d4186a9750af3d0692f2893a0d30d757bf062e88728ebe7f8e2b2577" prot="public">
          <name>SOLUTION_CHANGED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a35fa62fd2d4186a9750af3d0692f2893ab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observermessages.hh" line="7" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observermessages.hh" bodystart="7" bodyend="7"/>
      </memberdef>
      <memberdef kind="enum" id="dd/df3/a00219_1a662b2b6a80547adf4b9ce8b30d87fab5" prot="public" static="no" strong="yes">
        <type></type>
        <name>NonLinearSolverMessages</name>
        <qualifiedname>Ikarus::NonLinearSolverMessages</qualifiedname>
        <enumvalue id="dd/df3/a00219_1a662b2b6a80547adf4b9ce8b30d87fab5a19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a662b2b6a80547adf4b9ce8b30d87fab5afaee4ca3c30ee18148ce3ada37466498" prot="public">
          <name>INIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a662b2b6a80547adf4b9ce8b30d87fab5afdb2cb9832d112cd92fb2cda8879c3b4" prot="public">
          <name>ITERATION_STARTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a662b2b6a80547adf4b9ce8b30d87fab5a073d71a89cce6d4b9775987fdbb22815" prot="public">
          <name>ITERATION_ENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a662b2b6a80547adf4b9ce8b30d87fab5a721c68980ba6c47122945477a56d7a14" prot="public">
          <name>RESIDUALNORM_UPDATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a662b2b6a80547adf4b9ce8b30d87fab5a07a63a77745ab72a7e89fb22a8bcfd78" prot="public">
          <name>CORRECTIONNORM_UPDATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a662b2b6a80547adf4b9ce8b30d87fab5a0d30d757bf062e88728ebe7f8e2b2577" prot="public">
          <name>SOLUTION_CHANGED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a662b2b6a80547adf4b9ce8b30d87fab5a15380ac35d47cdbcbd64aada4bc21931" prot="public">
          <name>FINISHED_SUCESSFULLY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/df3/a00219_1a662b2b6a80547adf4b9ce8b30d87fab5ab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observermessages.hh" line="9" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observermessages.hh" bodystart="9" bodyend="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dd/df3/a00219_1ae7fcb8a58863e680e7a25d75766df15c" prot="public" static="no">
        <type><ref refid="d7/daf/a01169" kindref="compound">LinearElasticityT</ref>&lt; double &gt;</type>
        <definition>typedef LinearElasticityT&lt;double&gt; Ikarus::LinearElasticity</definition>
        <argsstring></argsstring>
        <name>LinearElasticity</name>
        <qualifiedname>Ikarus::LinearElasticity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/linearelasticity.hh" line="63" column="29" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/linearelasticity.hh" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/df3/a00219_1a8d5cb9f5246159271193458daad08fdd" prot="public" static="no">
        <type><ref refid="d7/d0c/a01173" kindref="compound">NeoHookeT</ref>&lt; double &gt;</type>
        <definition>typedef NeoHookeT&lt;double&gt; Ikarus::NeoHooke</definition>
        <argsstring></argsstring>
        <name>NeoHooke</name>
        <qualifiedname>Ikarus::NeoHooke</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/neohooke.hh" line="91" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/neohooke.hh" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/df3/a00219_1ab6b67c66afecf13985c9bf252ac644da" prot="public" static="no">
        <type><ref refid="dc/d98/a01177" kindref="compound">StVenantKirchhoffT</ref>&lt; double &gt;</type>
        <definition>typedef StVenantKirchhoffT&lt;double&gt; Ikarus::StVenantKirchhoff</definition>
        <argsstring></argsstring>
        <name>StVenantKirchhoff</name>
        <qualifiedname>Ikarus::StVenantKirchhoff</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/svk.hh" line="116" column="30" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/svk.hh" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/df3/a00219_1ae747d502e8f67af4c5412d8a6febeb4c" prot="public" static="no">
        <type><ref refid="de/d85/a01273" kindref="compound">LinearSolverTemplate</ref>&lt; double &gt;</type>
        <definition>typedef LinearSolverTemplate&lt;double&gt; Ikarus::LinearSolver</definition>
        <argsstring></argsstring>
        <name>LinearSolver</name>
        <qualifiedname>Ikarus::LinearSolver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="148" column="32" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/df3/a00219_1a98cbe3aef4b3238ea7de77ee9c4c19ac" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class PreBasis</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="df/d10/a01357" kindref="compound">FlatPreBasis</ref>&lt; PreBasis &gt;::type</type>
        <definition>using Ikarus::FlatPreBasis_t = typedef typename FlatPreBasis&lt;PreBasis&gt;::type</definition>
        <argsstring></argsstring>
        <name>FlatPreBasis_t</name>
        <qualifiedname>Ikarus::FlatPreBasis_t</qualifiedname>
        <briefdescription>
<para>Type alias for flatted PreBasis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/flatprebasis.hh" line="47" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/flatprebasis.hh" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dd/df3/a00219_1a8d0ca59930b7ae15351497bd14319d1d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr VectorAffordances</type>
        <definition>constexpr VectorAffordances Ikarus::forces</definition>
        <argsstring></argsstring>
        <name>forces</name>
        <qualifiedname>Ikarus::forces</qualifiedname>
        <initializer>= VectorAffordances::forces</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="85" column="38" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/df3/a00219_1a5185740b975fb7539a6e07553a061b26" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr MatrixAffordances</type>
        <definition>constexpr MatrixAffordances Ikarus::stiffness</definition>
        <argsstring></argsstring>
        <name>stiffness</name>
        <qualifiedname>Ikarus::stiffness</qualifiedname>
        <initializer>= MatrixAffordances::stiffness</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="87" column="38" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/df3/a00219_1a8191d0e317e1bea2a35d6c8a8f20750f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr MatrixAffordances</type>
        <definition>constexpr MatrixAffordances Ikarus::stiffnessdiffBucklingVector</definition>
        <argsstring></argsstring>
        <name>stiffnessdiffBucklingVector</name>
        <qualifiedname>Ikarus::stiffnessdiffBucklingVector</qualifiedname>
        <initializer>= MatrixAffordances::stiffnessdiffBucklingVector</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="88" column="38" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/df3/a00219_1a7e05e861b25ca636c1ccba4b8d2a3831" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr MatrixAffordances</type>
        <definition>constexpr MatrixAffordances Ikarus::mass</definition>
        <argsstring></argsstring>
        <name>mass</name>
        <qualifiedname>Ikarus::mass</qualifiedname>
        <initializer>= MatrixAffordances::mass</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="89" column="38" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/df3/a00219_1a64dfa264a039267932c6c99eb66ae98e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr ScalarAffordances</type>
        <definition>constexpr ScalarAffordances Ikarus::potentialEnergy</definition>
        <argsstring></argsstring>
        <name>potentialEnergy</name>
        <qualifiedname>Ikarus::potentialEnergy</qualifiedname>
        <initializer>= ScalarAffordances::mechanicalPotentialEnergy</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="91" column="38" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/df3/a00219_1a8bdeefaffd49685e7dcd89f34af51d76" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Ikarus::voigtNotationContainer</definition>
        <argsstring></argsstring>
        <name>voigtNotationContainer</name>
        <qualifiedname>Ikarus::voigtNotationContainer</qualifiedname>
        <initializer>= std::get&lt;dim - 1&gt;(Impl::voigtIndices)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="363" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="363" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dd/df3/a00219_1aae746d345e1205875e56c9ab61d6d9b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class DirichletValuesType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Ikarus::FlatAssemblerBase</definition>
        <argsstring>(T &amp;&amp;fes, const DirichletValuesType &amp;dirichletValues_) -&gt; FlatAssemblerBase&lt; T, DirichletValuesType &gt;</argsstring>
        <name>FlatAssemblerBase</name>
        <qualifiedname>Ikarus::FlatAssemblerBase</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>fes</declname>
        </param>
        <param>
          <type>const DirichletValuesType &amp;</type>
          <declname>dirichletValues_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" line="82" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" declline="82" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1aaf9f4c23b4cf17ef0fcd179c23fe8b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class DirichletValuesType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Ikarus::ScalarAssembler</definition>
        <argsstring>(T &amp;&amp;fes, const DirichletValuesType &amp;dirichletValues_) -&gt; ScalarAssembler&lt; T, DirichletValuesType &gt;</argsstring>
        <name>ScalarAssembler</name>
        <qualifiedname>Ikarus::ScalarAssembler</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>fes</declname>
        </param>
        <param>
          <type>const DirichletValuesType &amp;</type>
          <declname>dirichletValues_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" line="115" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" declline="115" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ae782c431726d82767ff3243dc287f34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class DirichletValuesType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Ikarus::VectorFlatAssembler</definition>
        <argsstring>(T &amp;&amp;fes, const DirichletValuesType &amp;dirichletValues_) -&gt; VectorFlatAssembler&lt; T, DirichletValuesType &gt;</argsstring>
        <name>VectorFlatAssembler</name>
        <qualifiedname>Ikarus::VectorFlatAssembler</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>fes</declname>
        </param>
        <param>
          <type>const DirichletValuesType &amp;</type>
          <declname>dirichletValues_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" line="157" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" declline="157" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a419009b1eed12161465ccd4f476f07be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class DirichletValuesType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Ikarus::SparseFlatAssembler</definition>
        <argsstring>(T &amp;&amp;fes, const DirichletValuesType &amp;dirichletValues_) -&gt; SparseFlatAssembler&lt; T, DirichletValuesType &gt;</argsstring>
        <name>SparseFlatAssembler</name>
        <qualifiedname>Ikarus::SparseFlatAssembler</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>fes</declname>
        </param>
        <param>
          <type>const DirichletValuesType &amp;</type>
          <declname>dirichletValues_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" line="232" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" declline="232" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1abbb70261c7a5e5394a4402ca7dfb2b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class DirichletValuesType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Ikarus::DenseFlatAssembler</definition>
        <argsstring>(T &amp;&amp;fes, const DirichletValuesType &amp;dirichletValues_) -&gt; DenseFlatAssembler&lt; T, DirichletValuesType &gt;</argsstring>
        <name>DenseFlatAssembler</name>
        <qualifiedname>Ikarus::DenseFlatAssembler</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>fes</declname>
        </param>
        <param>
          <type>const DirichletValuesType &amp;</type>
          <declname>dirichletValues_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" line="279" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" declline="279" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a38b6c8f32ff11f89f712568554f20f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::MAKE_ENUM</definition>
        <argsstring>(ScalarAffordances, noAffordance, mechanicalPotentialEnergy, microMagneticPotentialEnergy)</argsstring>
        <name>MAKE_ENUM</name>
        <qualifiedname>Ikarus::MAKE_ENUM</qualifiedname>
        <param>
          <type>ScalarAffordances</type>
        </param>
        <param>
          <type>noAffordance</type>
        </param>
        <param>
          <type>mechanicalPotentialEnergy</type>
        </param>
        <param>
          <type>microMagneticPotentialEnergy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="20" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" declline="20" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ad46581f0a310d62e683da13aec24991b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::MAKE_ENUM</definition>
        <argsstring>(VectorAffordances, noAffordance, forces, microMagneticForces)</argsstring>
        <name>MAKE_ENUM</name>
        <qualifiedname>Ikarus::MAKE_ENUM</qualifiedname>
        <param>
          <type>VectorAffordances</type>
        </param>
        <param>
          <type>noAffordance</type>
        </param>
        <param>
          <type><ref refid="dd/df3/a00219_1a8d0ca59930b7ae15351497bd14319d1d" kindref="member">forces</ref></type>
        </param>
        <param>
          <type>microMagneticForces</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="26" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" declline="26" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1af1bf62bb65bbee1d000c6c4b47c8cb42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::MAKE_ENUM</definition>
        <argsstring>(MatrixAffordances, noAffordance, stiffness, materialstiffness, geometricstiffness, stiffnessdiffBucklingVector, microMagneticHessian, mass)</argsstring>
        <name>MAKE_ENUM</name>
        <qualifiedname>Ikarus::MAKE_ENUM</qualifiedname>
        <param>
          <type>MatrixAffordances</type>
        </param>
        <param>
          <type>noAffordance</type>
        </param>
        <param>
          <type><ref refid="dd/df3/a00219_1a5185740b975fb7539a6e07553a061b26" kindref="member">stiffness</ref></type>
        </param>
        <param>
          <type>materialstiffness</type>
        </param>
        <param>
          <type>geometricstiffness</type>
        </param>
        <param>
          <type><ref refid="dd/df3/a00219_1a8191d0e317e1bea2a35d6c8a8f20750f" kindref="member">stiffnessdiffBucklingVector</ref></type>
        </param>
        <param>
          <type>microMagneticHessian</type>
        </param>
        <param>
          <type><ref refid="dd/df3/a00219_1a7e05e861b25ca636c1ccba4b8d2a3831" kindref="member">mass</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="32" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" declline="32" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1abd10604c27577a0c33b0959b74d11a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::MAKE_ENUM</definition>
        <argsstring>(FEParameter, noParameter, loadfactor, time)</argsstring>
        <name>MAKE_ENUM</name>
        <qualifiedname>Ikarus::MAKE_ENUM</qualifiedname>
        <param>
          <type>FEParameter</type>
        </param>
        <param>
          <type>noParameter</type>
        </param>
        <param>
          <type>loadfactor</type>
        </param>
        <param>
          <type>time</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="42" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" declline="42" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a137f9c26cfe3cd1ef47f5f385d42b4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::MAKE_ENUM</definition>
        <argsstring>(FESolutions, noSolution, displacement, velocity, director, magnetizationAndVectorPotential)</argsstring>
        <name>MAKE_ENUM</name>
        <qualifiedname>Ikarus::MAKE_ENUM</qualifiedname>
        <param>
          <type>FESolutions</type>
        </param>
        <param>
          <type>noSolution</type>
        </param>
        <param>
          <type>displacement</type>
        </param>
        <param>
          <type>velocity</type>
        </param>
        <param>
          <type>director</type>
        </param>
        <param>
          <type>magnetizationAndVectorPotential</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="48" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" declline="48" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a8916fd4855ae188bfb1585cd7ea12984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ikarus::MAKE_ENUM</definition>
        <argsstring>(ResultType, noType, magnetization, gradientNormOfMagnetization, vectorPotential, divergenceOfVectorPotential, BField, HField, cauchyStress, PK2Stress, linearStress, director)</argsstring>
        <name>MAKE_ENUM</name>
        <qualifiedname>Ikarus::MAKE_ENUM</qualifiedname>
        <param>
          <type>ResultType</type>
        </param>
        <param>
          <type>noType</type>
        </param>
        <param>
          <type>magnetization</type>
        </param>
        <param>
          <type>gradientNormOfMagnetization</type>
        </param>
        <param>
          <type>vectorPotential</type>
        </param>
        <param>
          <type>divergenceOfVectorPotential</type>
        </param>
        <param>
          <type>BField</type>
        </param>
        <param>
          <type>HField</type>
        </param>
        <param>
          <type>cauchyStress</type>
        </param>
        <param>
          <type>PK2Stress</type>
        </param>
        <param>
          <type>linearStress</type>
        </param>
        <param>
          <type>director</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="56" column="3" declfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" declline="56" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a10529d3a284b885b2f89440faa693877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ScalarType</type>
          </param>
        </templateparamlist>
        <type>ScalarType</type>
        <definition>ScalarType Ikarus::energyHelper</definition>
        <argsstring>(const Eigen::Vector&lt; ScalarType, 3 &gt; &amp;epsV, const auto &amp;Aconv, double E, double nu)</argsstring>
        <name>energyHelper</name>
        <qualifiedname>Ikarus::energyHelper</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ScalarType, 3 &gt; &amp;</type>
          <declname>epsV</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>Aconv</declname>
        </param>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/kirchhoffloveshell.hh" line="28" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/kirchhoffloveshell.hh" bodystart="28" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ab6a92f48acd6be62f36b7f499491fc8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Material</type>
          </param>
          <param>
            <type>typename Strains</type>
          </param>
        </templateparamlist>
        <type>consteval bool</type>
        <definition>consteval bool Ikarus::hasCorrectSize</definition>
        <argsstring>()</argsstring>
        <name>hasCorrectSize</name>
        <qualifiedname>Ikarus::hasCorrectSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/interface.hh" line="20" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/interface.hh" bodystart="20" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ad5aa30fe829c7316a0a744b3438609f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>StrainTags</type>
            <declname>tag</declname>
            <defname>tag</defname>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::createGreenLagrangianStrains</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;eMB)</argsstring>
        <name>createGreenLagrangianStrains</name>
        <qualifiedname>Ikarus::createGreenLagrangianStrains</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>eMB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" line="24" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" bodystart="24" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a5293eb09f12e4a45a7aa19a3403a73d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>StrainTags</type>
            <declname>tag</declname>
            <defname>tag</defname>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Ikarus::createDeformationGradient</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;eMB)</argsstring>
        <name>createDeformationGradient</name>
        <qualifiedname>Ikarus::createDeformationGradient</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>eMB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" line="38" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" bodystart="38" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ae53e0e7999f565fc94610d1c4ede0d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>StrainTags</type>
            <declname>tag</declname>
            <defname>tag</defname>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Ikarus::createRightCauchyGreen</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;eMB)</argsstring>
        <name>createRightCauchyGreen</name>
        <qualifiedname>Ikarus::createRightCauchyGreen</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>eMB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" line="58" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" bodystart="58" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ae9c00f19ce473d7183c87aa84b247f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>StrainTags</type>
            <declname>from</declname>
            <defname>from</defname>
          </param>
          <param>
            <type>StrainTags</type>
            <declname>to</declname>
            <defname>to</defname>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Ikarus::transformStrain</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;eRaw)</argsstring>
        <name>transformStrain</name>
        <qualifiedname>Ikarus::transformStrain</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>eRaw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" line="77" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" bodystart="77" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a317c0a50c0a7d482e2a20d8146e08df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Impl::StressIndexPair...</type>
            <declname>stressIndexPair</declname>
            <defname>stressIndexPair</defname>
          </param>
          <param>
            <type>typename MaterialImpl</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeVanishingStress</definition>
        <argsstring>(MaterialImpl mat, typename MaterialImpl::ScalarType p_tol=1e-12)</argsstring>
        <name>makeVanishingStress</name>
        <qualifiedname>Ikarus::makeVanishingStress</qualifiedname>
        <param>
          <type>MaterialImpl</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>typename MaterialImpl::ScalarType</type>
          <declname>p_tol</declname>
          <defval>1e-12</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" line="176" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a9b0fa242d65e9b14680cedcbaeed3301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MaterialImpl</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::planeStress</definition>
        <argsstring>(const MaterialImpl &amp;mat, typename MaterialImpl::ScalarType p_tol=1e-8)</argsstring>
        <name>planeStress</name>
        <qualifiedname>Ikarus::planeStress</qualifiedname>
        <param>
          <type>const MaterialImpl &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>typename MaterialImpl::ScalarType</type>
          <declname>p_tol</declname>
          <defval>1e-8</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" line="181" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a97580749c5279282142d9e17d612b77e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MaterialImpl</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::shellMaterial</definition>
        <argsstring>(const MaterialImpl &amp;mat, typename MaterialImpl::ScalarType p_tol=1e-8)</argsstring>
        <name>shellMaterial</name>
        <qualifiedname>Ikarus::shellMaterial</qualifiedname>
        <param>
          <type>const MaterialImpl &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>typename MaterialImpl::ScalarType</type>
          <declname>p_tol</declname>
          <defval>1e-8</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" line="187" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a9bf89561a3cb74c038a5e137608ee22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MaterialImpl</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::beamMaterial</definition>
        <argsstring>(const MaterialImpl &amp;mat, typename MaterialImpl::ScalarType p_tol=1e-8)</argsstring>
        <name>beamMaterial</name>
        <qualifiedname>Ikarus::beamMaterial</qualifiedname>
        <param>
          <type>const MaterialImpl &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>typename MaterialImpl::ScalarType</type>
          <declname>p_tol</declname>
          <defval>1e-8</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" line="192" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a90678a80e6b2b4849072623df02dae58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d Ikarus::planeStressLinearElasticMaterialTangent</definition>
        <argsstring>(double E, double nu)</argsstring>
        <name>planeStressLinearElasticMaterialTangent</name>
        <qualifiedname>Ikarus::planeStressLinearElasticMaterialTangent</qualifiedname>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="13" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="13" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1afc9c57d60ca4a8c1075c44d926e497a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 6, 6 &gt;</type>
        <definition>Eigen:: Matrix&lt; double, 6, 6 &gt; Ikarus::linearElasticMaterialTangent3D</definition>
        <argsstring>(double E, double nu)</argsstring>
        <name>linearElasticMaterialTangent3D</name>
        <qualifiedname>Ikarus::linearElasticMaterialTangent3D</qualifiedname>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="26" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="26" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1aef16f39eb73407dd874bc14426576a4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d54/a01213" kindref="compound">ConvertLameConstants</ref>&lt; <ref refid="d3/d10/a01189" kindref="compound">YoungsModulusAndPoissonsRatio</ref> &gt;</type>
        <definition>ConvertLameConstants&lt; YoungsModulusAndPoissonsRatio &gt; Ikarus::convertLameConstants</definition>
        <argsstring>(const YoungsModulusAndPoissonsRatio &amp;p_vp)</argsstring>
        <name>convertLameConstants</name>
        <qualifiedname>Ikarus::convertLameConstants</qualifiedname>
        <param>
          <type>const <ref refid="d3/d10/a01189" kindref="compound">YoungsModulusAndPoissonsRatio</ref> &amp;</type>
          <declname>p_vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="257" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a12d4dc64780852248f63e127056a9acd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d54/a01213" kindref="compound">ConvertLameConstants</ref>&lt; <ref refid="dd/d43/a01193" kindref="compound">YoungsModulusAndShearModulus</ref> &gt;</type>
        <definition>ConvertLameConstants&lt; YoungsModulusAndShearModulus &gt; Ikarus::convertLameConstants</definition>
        <argsstring>(const YoungsModulusAndShearModulus &amp;p_vp)</argsstring>
        <name>convertLameConstants</name>
        <qualifiedname>Ikarus::convertLameConstants</qualifiedname>
        <param>
          <type>const <ref refid="dd/d43/a01193" kindref="compound">YoungsModulusAndShearModulus</ref> &amp;</type>
          <declname>p_vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="261" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ac497080ab39c3c111c14fe3494537f19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d54/a01213" kindref="compound">ConvertLameConstants</ref>&lt; <ref refid="d4/d10/a01197" kindref="compound">YoungsModulusAndBulkModulus</ref> &gt;</type>
        <definition>ConvertLameConstants&lt; YoungsModulusAndBulkModulus &gt; Ikarus::convertLameConstants</definition>
        <argsstring>(const YoungsModulusAndBulkModulus &amp;p_vp)</argsstring>
        <name>convertLameConstants</name>
        <qualifiedname>Ikarus::convertLameConstants</qualifiedname>
        <param>
          <type>const <ref refid="d4/d10/a01197" kindref="compound">YoungsModulusAndBulkModulus</ref> &amp;</type>
          <declname>p_vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="265" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a5d423c9a6e6c2c397453649be42ac3c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d54/a01213" kindref="compound">ConvertLameConstants</ref>&lt; <ref refid="de/d04/a01209" kindref="compound">LamesFirstParameterAndShearModulus</ref> &gt;</type>
        <definition>ConvertLameConstants&lt; LamesFirstParameterAndShearModulus &gt; Ikarus::convertLameConstants</definition>
        <argsstring>(const LamesFirstParameterAndShearModulus &amp;p_vp)</argsstring>
        <name>convertLameConstants</name>
        <qualifiedname>Ikarus::convertLameConstants</qualifiedname>
        <param>
          <type>const <ref refid="de/d04/a01209" kindref="compound">LamesFirstParameterAndShearModulus</ref> &amp;</type>
          <declname>p_vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="269" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a1f84cd5962ef6c6b47fba01a130c7ea1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d54/a01213" kindref="compound">ConvertLameConstants</ref>&lt; <ref refid="de/d61/a01205" kindref="compound">BulkModulusAndLamesFirstParameter</ref> &gt;</type>
        <definition>ConvertLameConstants&lt; BulkModulusAndLamesFirstParameter &gt; Ikarus::convertLameConstants</definition>
        <argsstring>(const BulkModulusAndLamesFirstParameter &amp;p_vp)</argsstring>
        <name>convertLameConstants</name>
        <qualifiedname>Ikarus::convertLameConstants</qualifiedname>
        <param>
          <type>const <ref refid="de/d61/a01205" kindref="compound">BulkModulusAndLamesFirstParameter</ref> &amp;</type>
          <declname>p_vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="273" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="273" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a32940ef922d090491ffcaa9bf2a44aef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::toLamesFirstParameterAndShearModulus</definition>
        <argsstring>(const YoungsModulusAndPoissonsRatio &amp;matParameter)</argsstring>
        <name>toLamesFirstParameterAndShearModulus</name>
        <qualifiedname>Ikarus::toLamesFirstParameterAndShearModulus</qualifiedname>
        <param>
          <type>const <ref refid="d3/d10/a01189" kindref="compound">YoungsModulusAndPoissonsRatio</ref> &amp;</type>
          <declname>matParameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="278" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="278" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a4161393d679e5ec44806e6e911e26dee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::toYoungsModulusAndPoissonsRatio</definition>
        <argsstring>(const LamesFirstParameterAndShearModulus &amp;matParameter)</argsstring>
        <name>toYoungsModulusAndPoissonsRatio</name>
        <qualifiedname>Ikarus::toYoungsModulusAndPoissonsRatio</qualifiedname>
        <param>
          <type>const <ref refid="de/d04/a01209" kindref="compound">LamesFirstParameterAndShearModulus</ref> &amp;</type>
          <declname>matParameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="285" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="285" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ac00abda505aa8ccc73ce59afd165ce49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::parameter</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>parameter</name>
        <qualifiedname>Ikarus::parameter</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/linearalgebra/nonlinearoperator.hh" line="55" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/linearalgebra/nonlinearoperator.hh" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ab787b670f0d338c870988f417cf85f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::functions</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>functions</name>
        <qualifiedname>Ikarus::functions</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/linearalgebra/nonlinearoperator.hh" line="60" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/linearalgebra/nonlinearoperator.hh" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ac4a51a33b91a6e959c61fb4a71cef19c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>DerivativeArgs</declname>
            <defname>DerivativeArgs</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>ParameterArgs</declname>
            <defname>ParameterArgs</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::initResults</definition>
        <argsstring>(const Impl::Functions&lt; DerivativeArgs... &gt; &amp;derivativesFunctions, const Impl::Parameter&lt; ParameterArgs... &gt; &amp;parameterI)</argsstring>
        <name>initResults</name>
        <qualifiedname>Ikarus::initResults</qualifiedname>
        <param>
          <type>const Impl::Functions&lt; DerivativeArgs... &gt; &amp;</type>
          <declname>derivativesFunctions</declname>
        </param>
        <param>
          <type>const Impl::Parameter&lt; ParameterArgs... &gt; &amp;</type>
          <declname>parameterI</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/linearalgebra/nonlinearoperator.hh" line="65" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/linearalgebra/nonlinearoperator.hh" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a2079d0f7ad48c1f17d114e6f62f4d80d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NonLinearOperatorImpl</type>
          </param>
          <param>
            <type>typename LinearSolver</type>
            <defval>SolverDefault</defval>
          </param>
          <param>
            <type>typename Update</type>
            <defval>UpdateDefault</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeNewtonRaphson</definition>
        <argsstring>(const NonLinearOperatorImpl &amp;p_nonLinearOperator, LinearSolver &amp;&amp;p_linearSolver={}, Update &amp;&amp;p_updateFunction={})</argsstring>
        <name>makeNewtonRaphson</name>
        <qualifiedname>Ikarus::makeNewtonRaphson</qualifiedname>
        <param>
          <type>const NonLinearOperatorImpl &amp;</type>
          <declname>p_nonLinearOperator</declname>
        </param>
        <param>
          <type><ref refid="dd/df3/a00219_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">LinearSolver</ref> &amp;&amp;</type>
          <declname>p_linearSolver</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>Update &amp;&amp;</type>
          <declname>p_updateFunction</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphson.hh" line="107" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphson.hh" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a4dcfdd178a3466c2591ce841eba49cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NonLinearOperatorImpl</type>
          </param>
          <param>
            <type>typename LinearSolver</type>
            <defval>std::function&lt;typename NonLinearOperatorImpl::ValueType(                const typename NonLinearOperatorImpl::ValueType&amp;, const typename NonLinearOperatorImpl::ValueType&amp;)&gt;</defval>
          </param>
          <param>
            <type>typename UpdateType</type>
            <defval>std::conditional_t&lt;std::is_floating_point_v&lt;typename NonLinearOperatorImpl::template ParameterValue&lt;0&gt;&gt;,                                 typename NonLinearOperatorImpl::template ParameterValue&lt;0&gt;, Eigen::VectorXd&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeNewtonRaphsonWithSubsidiaryFunction</definition>
        <argsstring>(const NonLinearOperatorImpl &amp;p_nonLinearOperator, LinearSolver &amp;&amp;p_linearSolver=[](const typename NonLinearOperatorImpl::ValueType &amp;a, const typename NonLinearOperatorImpl::ValueType &amp;b) { return a/b;}, std::function&lt; void(typename NonLinearOperatorImpl::template ParameterValue&lt; 0 &gt; &amp;, const UpdateType &amp;)&gt; p_updateFunction=[](typename NonLinearOperatorImpl::template ParameterValue&lt; 0 &gt; &amp;a, const UpdateType &amp;b) { using Ikarus::operator+=;a+=b;})</argsstring>
        <name>makeNewtonRaphsonWithSubsidiaryFunction</name>
        <qualifiedname>Ikarus::makeNewtonRaphsonWithSubsidiaryFunction</qualifiedname>
        <param>
          <type>const NonLinearOperatorImpl &amp;</type>
          <declname>p_nonLinearOperator</declname>
        </param>
        <param>
          <type><ref refid="dd/df3/a00219_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">LinearSolver</ref> &amp;&amp;</type>
          <declname>p_linearSolver</declname>
          <defval>[](const typename NonLinearOperatorImpl::ValueType &amp;a, const typename NonLinearOperatorImpl::ValueType &amp;b) { return a/b;}</defval>
        </param>
        <param>
          <type>std::function&lt; void(typename NonLinearOperatorImpl::template ParameterValue&lt; 0 &gt; &amp;, const UpdateType &amp;)&gt;</type>
          <declname>p_updateFunction</declname>
          <defval>[](typename NonLinearOperatorImpl::template ParameterValue&lt; 0 &gt; &amp;a, const UpdateType &amp;b) { using Ikarus::operator+=;a+=b;}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="167" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="167" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1af4e1bfa553f08778e4abf1548684eff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NonLinearOperatorImpl</type>
          </param>
          <param>
            <type>PreConditioner</type>
            <declname>preConditioner</declname>
            <defname>preConditioner</defname>
            <defval>PreConditioner::IncompleteCholesky</defval>
          </param>
          <param>
            <type>typename UpdateType</type>
            <defval>std::conditional_t&lt;std::is_floating_point_v&lt;typename NonLinearOperatorImpl::template ParameterValue&lt;0&gt;&gt;,                                 typename NonLinearOperatorImpl::template ParameterValue&lt;0&gt;, Eigen::VectorXd&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="dd/d5d/a01325" kindref="compound">TrustRegion</ref>&lt; NonLinearOperatorImpl, preConditioner, UpdateType &gt; &gt;</type>
        <definition>std::shared_ptr&lt; TrustRegion&lt; NonLinearOperatorImpl, preConditioner, UpdateType &gt; &gt; Ikarus::makeTrustRegion</definition>
        <argsstring>(const NonLinearOperatorImpl &amp;p_nonLinearOperator, std::function&lt; void(typename NonLinearOperatorImpl::template ParameterValue&lt; 0 &gt; &amp;, const UpdateType &amp;)&gt; p_updateFunction=[](typename NonLinearOperatorImpl::template ParameterValue&lt; 0 &gt; &amp;a, const UpdateType &amp;b) { using Ikarus::operator+=;a+=b;})</argsstring>
        <name>makeTrustRegion</name>
        <qualifiedname>Ikarus::makeTrustRegion</qualifiedname>
        <param>
          <type>const NonLinearOperatorImpl &amp;</type>
          <declname>p_nonLinearOperator</declname>
        </param>
        <param>
          <type>std::function&lt; void(typename NonLinearOperatorImpl::template ParameterValue&lt; 0 &gt; &amp;, const UpdateType &amp;)&gt;</type>
          <declname>p_updateFunction</declname>
          <defval>[](typename NonLinearOperatorImpl::template ParameterValue&lt; 0 &gt; &amp;a, const UpdateType &amp;b) { using Ikarus::operator+=;a+=b;}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="416" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="416" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a6f989f1293d56b1ad9b32557e28a968d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Fun</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Vars</declname>
            <defname>Vars</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename G</type>
          </param>
          <param>
            <type>typename H</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::hessianN</definition>
        <argsstring>(const Fun &amp;f, const autodiff::Wrt&lt; Vars... &gt; &amp;wrt, const autodiff::At&lt; Args... &gt; &amp;at, U &amp;u, std::array&lt; G, U::RowsAtCompileTime &gt; &amp;g, std::array&lt; H, U::RowsAtCompileTime &gt; &amp;h)</argsstring>
        <name>hessianN</name>
        <qualifiedname>Ikarus::hessianN</qualifiedname>
        <param>
          <type>const Fun &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const autodiff::Wrt&lt; Vars... &gt; &amp;</type>
          <declname>wrt</declname>
        </param>
        <param>
          <type>const autodiff::At&lt; Args... &gt; &amp;</type>
          <declname>at</declname>
        </param>
        <param>
          <type>U &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>std::array&lt; G, U::RowsAtCompileTime &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::array&lt; H, U::RowsAtCompileTime &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/autodiffhelper.hh" line="11" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/autodiffhelper.hh" bodystart="11" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a9a51c77ff0881c59e81e96c902b1fcd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GridView</type>
          </param>
          <param>
            <type>typename PreBasisFactory</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeBasis</definition>
        <argsstring>(const GridView &amp;gv, const PreBasisFactory &amp;pb)</argsstring>
        <name>makeBasis</name>
        <qualifiedname>Ikarus::makeBasis</qualifiedname>
        <param>
          <type>const GridView &amp;</type>
          <declname>gv</declname>
        </param>
        <param>
          <type>const PreBasisFactory &amp;</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/basis.hh" line="43" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/basis.hh" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a41f7bb765ece7777057ad9bde7b2c10f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PreBasis</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeBasis</definition>
        <argsstring>(const Dune::Functions::DefaultGlobalBasis&lt; PreBasis &gt; &amp;gb)</argsstring>
        <name>makeBasis</name>
        <qualifiedname>Ikarus::makeBasis</qualifiedname>
        <param>
          <type>const Dune::Functions::DefaultGlobalBasis&lt; PreBasis &gt; &amp;</type>
          <declname>gb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/basis.hh" line="49" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/basis.hh" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ac2c6469be19ce4ef2e630bfa1c5a5e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::transpose</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>transpose</name>
        <qualifiedname>Ikarus::transpose</qualifiedname>
        <param>
          <type>const <ref refid="db/dec/a01337" kindref="compound">Eigen::EigenBase</ref>&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="260" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="260" bodyend="272" declfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" declline="27" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a77b24c9895c7d075f96a71b34a6df55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeSharedBasis</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>makeSharedBasis</name>
        <qualifiedname>Ikarus::makeSharedBasis</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/duneutilities.hh" line="19" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/duneutilities.hh" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1af298994b405b47b640d3f6bbab5f2bbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeConstSharedBasis</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>makeConstSharedBasis</name>
        <qualifiedname>Ikarus::makeConstSharedBasis</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/duneutilities.hh" line="26" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/duneutilities.hh" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ab3afd8732c7518fb5cad5fc85f660ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type><ref refid="da/d19/a01217" kindref="compound">Dune::FieldVector</ref>&lt; ScalarType, size &gt;</type>
        <definition>Dune::FieldVector&lt; ScalarType, size &gt; Ikarus::toDune</definition>
        <argsstring>(const Eigen::Vector&lt; ScalarType, size &gt; &amp;vec)</argsstring>
        <name>toDune</name>
        <qualifiedname>Ikarus::toDune</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ScalarType, size &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="da/d19/a01217" kindref="compound">Dune::FieldVector</ref> from a given Eigen::Vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" line="19" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a93a33caf49e0072f27298b2745e9ae56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>rows</declname>
            <defname>rows</defname>
          </param>
        </templateparamlist>
        <type><ref refid="da/d19/a01217" kindref="compound">Dune::FieldVector</ref>&lt; ScalarType, rows &gt;</type>
        <definition>Dune::FieldVector&lt; ScalarType, rows &gt; Ikarus::toDune</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, rows, 0 &gt; &amp;vec)</argsstring>
        <name>toDune</name>
        <qualifiedname>Ikarus::toDune</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, rows, 0 &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="da/d19/a01217" kindref="compound">Dune::FieldVector</ref> from a given Eigen::Matrix. The matrix has fixed dynamic size. The matrix needs to have a single column. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" line="29" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" bodystart="29" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a332dc3abf615826c1eeb5e4dba37dfb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>rows</declname>
            <defname>rows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>cols</declname>
            <defname>cols</defname>
          </param>
        </templateparamlist>
        <type>Dune::FieldMatrix&lt; ScalarType, rows, cols &gt;</type>
        <definition>Dune::FieldMatrix&lt; ScalarType, rows, cols &gt; Ikarus::toDune</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, rows, cols &gt; &amp;mat)</argsstring>
        <name>toDune</name>
        <qualifiedname>Ikarus::toDune</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, rows, cols &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Creates a Dune::FieldMatrix from a given Eigen::Matrix. The matrix has fixed dynamic size <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" line="40" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" bodystart="40" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ab33f0f88435ac31e2f1230b321fe16db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Map&lt; const Eigen::Vector&lt; ScalarType, size &gt; &gt;</type>
        <definition>Eigen::Map&lt; const Eigen::Vector&lt; ScalarType, size &gt; &gt; Ikarus::toEigenMap</definition>
        <argsstring>(const Dune::FieldVector&lt; ScalarType, size &gt; &amp;vec)</argsstring>
        <name>toEigenMap</name>
        <qualifiedname>Ikarus::toEigenMap</qualifiedname>
        <param>
          <type>const <ref refid="da/d19/a01217" kindref="compound">Dune::FieldVector</ref>&lt; ScalarType, size &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Views a dune fieldvector as an Eigen::Vector as Map, no copies take place! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" line="51" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a8f500d064c150a65ba93e8a4d5fe6df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Map&lt; Eigen::Vector&lt; ScalarType, size &gt; &gt;</type>
        <definition>Eigen::Map&lt; Eigen::Vector&lt; ScalarType, size &gt; &gt; Ikarus::toEigenMap</definition>
        <argsstring>(Dune::FieldVector&lt; ScalarType, size &gt; &amp;vec)</argsstring>
        <name>toEigenMap</name>
        <qualifiedname>Ikarus::toEigenMap</qualifiedname>
        <param>
          <type><ref refid="da/d19/a01217" kindref="compound">Dune::FieldVector</ref>&lt; ScalarType, size &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Views a const dune fieldvector as a const Eigen::Vector, no copies take place! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" line="57" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a600b3a27f5b11054f0b41744dbfb7ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; Dune::Functions::Polynomial&lt; double &gt;, decltype(Eigen::seq(0, 0))&gt;</type>
        <definition>std::tuple&lt; Dune::Functions::Polynomial&lt; double &gt;, decltype(Eigen::seq(0, 0))&gt; Ikarus::findLineSegment</definition>
        <argsstring>(const Eigen::VectorXd &amp;x, const Eigen::VectorXd &amp;y, int segmentSize)</argsstring>
        <name>findLineSegment</name>
        <qualifiedname>Ikarus::findLineSegment</qualifiedname>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>segmentSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/findlinesegment.hh" line="14" column="14" declfile="/__w/ikarus/ikarus/repo/ikarus/utils/findlinesegment.hh" declline="14" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a42681f6971dbcfa99e66dc7593f95b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PreBasis</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Ikarus::flatPreBasis</definition>
        <argsstring>(PreBasis const &amp;preBasis)</argsstring>
        <name>flatPreBasis</name>
        <qualifiedname>Ikarus::flatPreBasis</qualifiedname>
        <param>
          <type>PreBasis const &amp;</type>
          <declname>preBasis</declname>
        </param>
        <briefdescription>
<para>Generator function for a flatted PreBasis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/flatprebasis.hh" line="98" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/flatprebasis.hh" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1aee653a13f3ff11dac556cb9301f33df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ikarus::drawResultAndReturnSlope</definition>
        <argsstring>(std::string &amp;&amp;functionName, const std::function&lt; double(double)&gt; &amp;ftfunc, bool draw, int slopeOfReference)</argsstring>
        <name>drawResultAndReturnSlope</name>
        <qualifiedname>Ikarus::drawResultAndReturnSlope</qualifiedname>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>functionName</declname>
        </param>
        <param>
          <type>const std::function&lt; double(double)&gt; &amp;</type>
          <declname>ftfunc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>draw</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slopeOfReference</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/functionsanitychecks.hh" line="13" column="10" declfile="/__w/ikarus/ikarus/repo/ikarus/utils/functionsanitychecks.hh" declline="13" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1abef0cb0e8fc63514c80f5090f10508ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NonlinearOperator</type>
          </param>
          <param>
            <type>typename UpdateType</type>
            <defval>typename NonlinearOperator::template ParameterValue&lt;0&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Ikarus::checkGradient</definition>
        <argsstring>(NonlinearOperator &amp;nonLinOp, CheckFlags checkFlags=CheckFlags(), std::function&lt; void(typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;, const UpdateType &amp;)&gt; p_updateFunction=[](typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;a, const UpdateType &amp;b) { a+=b;})</argsstring>
        <name>checkGradient</name>
        <qualifiedname>Ikarus::checkGradient</qualifiedname>
        <param>
          <type>NonlinearOperator &amp;</type>
          <declname>nonLinOp</declname>
        </param>
        <param>
          <type><ref refid="da/d77/a01381" kindref="compound">CheckFlags</ref></type>
          <declname>checkFlags</declname>
          <defval><ref refid="da/d77/a01381" kindref="compound">CheckFlags</ref>()</defval>
        </param>
        <param>
          <type>std::function&lt; void(typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;, const UpdateType &amp;)&gt;</type>
          <declname>p_updateFunction</declname>
          <defval>[](typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;a, const UpdateType &amp;b) { a+=b;}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/functionsanitychecks.hh" line="27" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/functionsanitychecks.hh" bodystart="27" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a7d3990eed6dad9d8394e54b5ac8db443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NonlinearOperator</type>
          </param>
          <param>
            <type>typename UpdateType</type>
            <defval>typename NonlinearOperator::template ParameterValue&lt;0&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Ikarus::checkJacobian</definition>
        <argsstring>(NonlinearOperator &amp;nonLinOp, CheckFlags checkFlags=CheckFlags(), std::function&lt; void(typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;, const UpdateType &amp;)&gt; p_updateFunction=[](typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;a, const UpdateType &amp;b) { a+=b;})</argsstring>
        <name>checkJacobian</name>
        <qualifiedname>Ikarus::checkJacobian</qualifiedname>
        <param>
          <type>NonlinearOperator &amp;</type>
          <declname>nonLinOp</declname>
        </param>
        <param>
          <type><ref refid="da/d77/a01381" kindref="compound">CheckFlags</ref></type>
          <declname>checkFlags</declname>
          <defval><ref refid="da/d77/a01381" kindref="compound">CheckFlags</ref>()</defval>
        </param>
        <param>
          <type>std::function&lt; void(typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;, const UpdateType &amp;)&gt;</type>
          <declname>p_updateFunction</declname>
          <defval>[](typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;a, const UpdateType &amp;b) { a+=b;}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/functionsanitychecks.hh" line="80" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/functionsanitychecks.hh" bodystart="80" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1abf51d1ab00b0a5b2c058330653041cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NonlinearOperator</type>
          </param>
          <param>
            <type>typename UpdateType</type>
            <defval>typename NonlinearOperator::template ParameterValue&lt;0&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Ikarus::checkHessian</definition>
        <argsstring>(NonlinearOperator &amp;nonLinOp, CheckFlags checkFlags=CheckFlags(), std::function&lt; void(typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;, const UpdateType &amp;)&gt; p_updateFunction=[](typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;a, const UpdateType &amp;b) { a+=b;})</argsstring>
        <name>checkHessian</name>
        <qualifiedname>Ikarus::checkHessian</qualifiedname>
        <param>
          <type>NonlinearOperator &amp;</type>
          <declname>nonLinOp</declname>
        </param>
        <param>
          <type><ref refid="da/d77/a01381" kindref="compound">CheckFlags</ref></type>
          <declname>checkFlags</declname>
          <defval><ref refid="da/d77/a01381" kindref="compound">CheckFlags</ref>()</defval>
        </param>
        <param>
          <type>std::function&lt; void(typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;, const UpdateType &amp;)&gt;</type>
          <declname>p_updateFunction</declname>
          <defval>[](typename NonlinearOperator::template ParameterValue&lt; 0 &gt; &amp;a, const UpdateType &amp;b) { a+=b;}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/functionsanitychecks.hh" line="125" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/functionsanitychecks.hh" bodystart="125" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ac8243891c1b961e50a066140ab79a142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::init</definition>
        <argsstring>(int argc, char **argv, bool enableFileLogger=true)</argsstring>
        <name>init</name>
        <qualifiedname>Ikarus::init</qualifiedname>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enableFileLogger</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><ulink url="https://patorjk.com/software/taag/#p=testall&amp;f=Univers&amp;t=IKARUS">https://patorjk.com/software/taag/#p=testall&amp;f=Univers&amp;t=IKARUS</ulink> (font: Lean)</para>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/init.hh" line="52" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/init.hh" bodystart="52" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1aa33adfa2e95d7040a816bb2da81d275d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::orthonormalizeMatrixColumns</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>orthonormalizeMatrixColumns</name>
        <qualifiedname>Ikarus::orthonormalizeMatrixColumns</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Orthonormalizes all Matrix columns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="23" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="23" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a545d74839895f4576a3b8c97d72abefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsFlatEigenVector</definition>
        <argsstring>(Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsFlatEigenVector</name>
        <qualifiedname>Ikarus::viewAsFlatEigenVector</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>View Dune::BlockVector as a Eigen::Vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="39" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1af9d7cf401f9f03ce1aae728c646ce178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsEigenMatrixAsDynFixed</definition>
        <argsstring>(Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsEigenMatrixAsDynFixed</name>
        <qualifiedname>Ikarus::viewAsEigenMatrixAsDynFixed</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>View Dune::BlockVector as a Eigen::Matrix with dynamic rows and fixed columns depending on the size of the ValueType. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="49" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="49" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1af1c6bdf14e40ee46e881f646e1c28b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsEigenMatrixAsDynFixed</definition>
        <argsstring>(const Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsEigenMatrixAsDynFixed</name>
        <qualifiedname>Ikarus::viewAsEigenMatrixAsDynFixed</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>Const view Dune::BlockVector as a Eigen::Matrix with dynamic rows and fixed columns depending on the size of the ValueType. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="59" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="59" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ac25618d0e7c4aece653662d2541b61ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsEigenMatrixFixedDyn</definition>
        <argsstring>(Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsEigenMatrixFixedDyn</name>
        <qualifiedname>Ikarus::viewAsEigenMatrixFixedDyn</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>View Dune::BlockVector as a Eigen::Matrix with fixed rows depending on the size of the ValueType and dynamics columns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="70" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a146a052f6eb97304a8172c7b65fe70fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsEigenMatrixFixedDyn</definition>
        <argsstring>(const Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsEigenMatrixFixedDyn</name>
        <qualifiedname>Ikarus::viewAsEigenMatrixFixedDyn</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>Const view Dune::BlockVector as a Eigen::Matrix with fixed rows depending on the size of the ValueType and dynamics columns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="80" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="80" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a3beeb26c911116fa02df8756214484aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsFlatEigenVector</definition>
        <argsstring>(const Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsFlatEigenVector</name>
        <qualifiedname>Ikarus::viewAsFlatEigenVector</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>View Dune::BlockVector as a Eigen::Vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="89" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a609664964681787f2f736f772b82a01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t Ikarus::correctionSize</definition>
        <argsstring>(const Dune::BlockVector&lt; Type &gt; &amp;a)</argsstring>
        <name>correctionSize</name>
        <qualifiedname>Ikarus::correctionSize</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; Type &gt; &amp;</type>
          <declname>a</declname>
        </param>
    <requiresclause>requires { Type::correctionSize; }    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="98" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ac1df27a0dfa864327029cdb906a1840c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t Ikarus::valueSize</definition>
        <argsstring>(const Dune::BlockVector&lt; Type &gt; &amp;a)</argsstring>
        <name>valueSize</name>
        <qualifiedname>Ikarus::valueSize</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; Type &gt; &amp;</type>
          <declname>a</declname>
        </param>
    <requiresclause>requires { Type::valueSize; }    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="105" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ace6bdf5ec8a965423e5a13c20c91dd89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Dune::BlockVector&lt; Type &gt; &amp;</type>
        <definition>Dune::BlockVector&lt; Type &gt; &amp; Ikarus::operator+=</definition>
        <argsstring>(Dune::BlockVector&lt; Type &gt; &amp;a, const Eigen::MatrixBase&lt; Derived &gt; &amp;b)</argsstring>
        <name>operator+=</name>
        <qualifiedname>Ikarus::operator+=</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; Type &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>b</declname>
        </param>
    <requiresclause>( <ref refid="d4/d2c/a01575" kindref="compound">Ikarus::Concepts::AddAssignAble</ref>&lt;Type, decltype(b.template segment&lt;Type::correctionSize&gt;(0))&gt;and requires() { Type::correctionSize; })    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="112" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="112" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a09e1060b2b3a53a77bb0da6345d844b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Dune::BlockVector&lt; Type &gt; &amp;</type>
        <definition>Dune::BlockVector&lt; Type &gt; &amp; Ikarus::operator-=</definition>
        <argsstring>(Dune::BlockVector&lt; Type &gt; &amp;a, const Eigen::MatrixBase&lt; Derived &gt; &amp;b)</argsstring>
        <name>operator-=</name>
        <qualifiedname>Ikarus::operator-=</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; Type &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>b</declname>
        </param>
    <requiresclause>( <ref refid="d4/d2c/a01575" kindref="compound">Ikarus::Concepts::AddAssignAble</ref>&lt;Type, decltype(b.template segment&lt;Type::correctionSize&gt;(0))&gt;and requires() { Type::correctionSize; })    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="124" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1aada5360aeb17e59d87ae2ba82057421d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Dune::TupleVector&lt; Types... &gt; &amp;</type>
        <definition>Dune::TupleVector&lt; Types... &gt; &amp; Ikarus::operator+=</definition>
        <argsstring>(Dune::TupleVector&lt; Types... &gt; &amp;a, const Eigen::MatrixBase&lt; Derived &gt; &amp;b)</argsstring>
        <name>operator+=</name>
        <qualifiedname>Ikarus::operator+=</qualifiedname>
        <param>
          <type>Dune::TupleVector&lt; Types... &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="133" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="133" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a9eacac5db913d62533397e86982c2ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Dune::BlockVector&lt; Type &gt; &amp;</type>
        <definition>Dune::BlockVector&lt; Type &gt; &amp; Ikarus::addInEmbedding</definition>
        <argsstring>(Dune::BlockVector&lt; Type &gt; &amp;a, const Eigen::MatrixBase&lt; Derived &gt; &amp;b)</argsstring>
        <name>addInEmbedding</name>
        <qualifiedname>Ikarus::addInEmbedding</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; Type &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>b</declname>
        </param>
    <requiresclause>( <ref refid="d4/d2c/a01575" kindref="compound">Ikarus::Concepts::AddAssignAble</ref>&lt;Type, decltype(b.template segment&lt;Type::valueSize&gt;(0))&gt;and requires() { Type::valueSize; })    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="147" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="147" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a0ffc0c74dbd9aeee3e53b199a21b828c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::norm</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;v)</argsstring>
        <name>norm</name>
        <qualifiedname>Ikarus::norm</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>v</declname>
        </param>
    <requiresclause>(!std::floating_point&lt;Derived&gt;)    </requiresclause>
        <briefdescription>
<para>Adding free norm function to <ref refid="dc/d98/a00225" kindref="compound">Eigen</ref> types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="159" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1aceb8dc8f6f43516dabf75155b1f22d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::norm</definition>
        <argsstring>(const std::floating_point auto &amp;v)</argsstring>
        <name>norm</name>
        <qualifiedname>Ikarus::norm</qualifiedname>
        <param>
          <type>const std::floating_point auto &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Helper Free Function to have the same interface as for <ref refid="dc/d98/a00225" kindref="compound">Eigen</ref> Vector Types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="162" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1acbc60e06e8e43a9bc14660189eb1baa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator*</definition>
        <argsstring>(const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;a, const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;b)</argsstring>
        <name>operator*</name>
        <qualifiedname>Ikarus::operator*</qualifiedname>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Eigen::DiagonalMatrix Product Missing in <ref refid="dc/d98/a00225" kindref="compound">Eigen</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="166" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a96968bbff353ac49f48d0aa8b9810b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator+=</definition>
        <argsstring>(Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;a, const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;b)</argsstring>
        <name>operator+=</name>
        <qualifiedname>Ikarus::operator+=</qualifiedname>
        <param>
          <type>Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="171" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a098b554b29619e0cea837f3daa6e0e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator+</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;a, const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>Ikarus::operator+</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Eigen::Matrix + Eigen::DiagonalMatrix addition missing in <ref refid="dc/d98/a00225" kindref="compound">Eigen</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="178" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1afe54695fd1436b5f2d75934a6fda8fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator+</definition>
        <argsstring>(const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;a, const Eigen::MatrixBase&lt; Derived &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>Ikarus::operator+</qualifiedname>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Eigen::DiagonalMatrix + Eigen::Matrix addition missing in <ref refid="dc/d98/a00225" kindref="compound">Eigen</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="186" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a9ab6437d6235e378a6171bfffd4bf1cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator-</definition>
        <argsstring>(const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;a)</argsstring>
        <name>operator-</name>
        <qualifiedname>Ikarus::operator-</qualifiedname>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="191" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a0fe1660eb760ecc49838d130ba6c6712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename Derived2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator+</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;a, const Eigen::DiagonalWrapper&lt; Derived2 &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>Ikarus::operator+</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalWrapper&lt; Derived2 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="196" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="196" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a9377cd2cf3a5ec468d140cb7063efa58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename Derived2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator+</definition>
        <argsstring>(const Eigen::DiagonalWrapper&lt; Derived &gt; &amp;a, const Eigen::MatrixBase&lt; Derived2 &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>Ikarus::operator+</qualifiedname>
        <param>
          <type>const Eigen::DiagonalWrapper&lt; Derived &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived2 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="203" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ac2cdcc3047e59b91a4874a1355503cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Ikarus::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Ikarus::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="208" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1abd35ea7f69bcc71ee90ea421a1c48167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived Ikarus::sym</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>sym</name>
        <qualifiedname>Ikarus::sym</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the symmetric part of a matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="215" column="11" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a1496a9776a583f8b09c4244a68453394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived Ikarus::skew</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>skew</name>
        <qualifiedname>Ikarus::skew</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the skew part of a matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="221" column="11" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="221" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a746ffb7ea71ab7ea16727793ff59c3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::eval</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>eval</name>
        <qualifiedname>Ikarus::eval</qualifiedname>
        <param>
          <type>const <ref refid="db/dec/a01337" kindref="compound">Eigen::EigenBase</ref>&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Evaluates <ref refid="dc/d98/a00225" kindref="compound">Eigen</ref> expressions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="227" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="227" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a0cb41b3bffa3efd3c5bf13b17bd805db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::eval</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>eval</name>
        <qualifiedname>Ikarus::eval</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
    <requiresclause>autodiff::detail::isDual&lt;T&gt; || autodiff::detail::isExpr&lt;T&gt; || autodiff::detail::isArithmetic&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>eval overload for autodiff scalars </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="246" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a45a6006e419887b66dd0e56f8acd55fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::transpose</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>transpose</name>
        <qualifiedname>Ikarus::transpose</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
    <requiresclause>autodiff::detail::isDual&lt;T&gt; || autodiff::detail::isExpr&lt;T&gt; || autodiff::detail::isArithmetic&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Transpose for scalars and autodiff types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="251" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="251" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a833cd81d209ea9b92ca36f62ce5cac45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>d</declname>
            <defname>d</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::eval</definition>
        <argsstring>(std::array&lt; Type, d &gt; &amp;&amp;t)</argsstring>
        <name>eval</name>
        <qualifiedname>Ikarus::eval</qualifiedname>
        <param>
          <type>std::array&lt; Type, d &gt; &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>eval overload for std::array <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="255" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="255" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a28c4e8aec7417394b52a4424d93b1db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::convertUnderlying</definition>
        <argsstring>(const Dune::BlockVector&lt; From &gt; &amp;from)</argsstring>
        <name>convertUnderlying</name>
        <qualifiedname>Ikarus::convertUnderlying</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; From &gt; &amp;</type>
          <declname>from</declname>
        </param>
    <requiresclause>std::convertible_to&lt;typename From::ctype, To&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="276" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="276" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a9f86110350e75ad5ca1ee6d6cff10aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename Type2</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>d</declname>
            <defname>d</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; Type, d &gt;</type>
        <definition>std::array&lt; Type, d &gt; Ikarus::operator+</definition>
        <argsstring>(const std::array&lt; Type, d &gt; &amp;a, const std::array&lt; Type2, d &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>Ikarus::operator+</qualifiedname>
        <param>
          <type>const std::array&lt; Type, d &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::array&lt; Type2, d &gt; &amp;</type>
          <declname>b</declname>
        </param>
    <requiresclause>Concepts::AddAble&lt;Type, Type2&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="287" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="287" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a940593b4777518ecd8588c0c6e551bf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>d</declname>
            <defname>d</defname>
          </param>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; Type, d &gt;</type>
        <definition>std::array&lt; Type, d &gt; Ikarus::operator-</definition>
        <argsstring>(const std::array&lt; Type, d &gt; &amp;a)</argsstring>
        <name>operator-</name>
        <qualifiedname>Ikarus::operator-</qualifiedname>
        <param>
          <type>const std::array&lt; Type, d &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="297" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="297" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1aff13eef66f4e37598d918267fb9e269e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>d</declname>
            <defname>d</defname>
          </param>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::transpose</definition>
        <argsstring>(const std::array&lt; Type, d &gt; &amp;a)</argsstring>
        <name>transpose</name>
        <qualifiedname>Ikarus::transpose</qualifiedname>
        <param>
          <type>const std::array&lt; Type, d &gt; &amp;</type>
          <declname>a</declname>
        </param>
    <requiresclause>Concepts::TransposeAble&lt;Type&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="307" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="307" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a28bdf0f90a6cdbca3570552194b40f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>d</declname>
            <defname>d</defname>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator*</definition>
        <argsstring>(Scalar b, const std::array&lt; Type, d &gt; &amp;a)</argsstring>
        <name>operator*</name>
        <qualifiedname>Ikarus::operator*</qualifiedname>
        <param>
          <type>Scalar</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const std::array&lt; Type, d &gt; &amp;</type>
          <declname>a</declname>
        </param>
    <requiresclause>Concepts::MultiplyAble&lt;Scalar, Type&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="316" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="316" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a40c08050aff1e3e49e58c7823ecbcc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::printForMaple</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>printForMaple</name>
        <qualifiedname>Ikarus::printForMaple</qualifiedname>
        <param>
          <type>const <ref refid="db/dec/a01337" kindref="compound">Eigen::EigenBase</ref>&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="325" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="325" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a821ecf80e4a83241318d825f49cd79e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FieldVectorT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::createRandomVector</definition>
        <argsstring>(typename FieldVectorT::value_type lower=-1, typename FieldVectorT::value_type upper=1)</argsstring>
        <name>createRandomVector</name>
        <qualifiedname>Ikarus::createRandomVector</qualifiedname>
        <param>
          <type>typename FieldVectorT::value_type</type>
          <declname>lower</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>typename FieldVectorT::value_type</type>
          <declname>upper</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="340" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="340" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a5db6e8f04892e85e6b17e276cdbd0e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageType</type>
          </param>
        </templateparamlist>
        <type>MessageType &amp;</type>
        <definition>MessageType &amp; Ikarus::increment</definition>
        <argsstring>(MessageType &amp;e)</argsstring>
        <name>increment</name>
        <qualifiedname>Ikarus::increment</qualifiedname>
        <param>
          <type>MessageType &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/makeenum.hh" line="40" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/makeenum.hh" bodystart="40" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ae55d4d0c3478ab3ecf54ce905ddf223b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T Ikarus::ct_sqrt</definition>
        <argsstring>(T x)</argsstring>
        <name>ct_sqrt</name>
        <qualifiedname>Ikarus::ct_sqrt</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
    <requiresclause>std::integral&lt;T&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/math.hh" line="25" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/math.hh" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a7e05bffc3e89399a0148cc9169796d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; Dune::Functions::Polynomial&lt; double &gt;, double &gt;</type>
        <definition>std::tuple&lt; Dune::Functions::Polynomial&lt; double &gt;, double &gt; Ikarus::polyfit</definition>
        <argsstring>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;y, const int deg)</argsstring>
        <name>polyfit</name>
        <qualifiedname>Ikarus::polyfit</qualifiedname>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>deg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/polyfit.hh" line="10" column="14" declfile="/__w/ikarus/ikarus/repo/ikarus/utils/polyfit.hh" declline="10" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a1e9e2ec1a0fdbfe5d9f49107c87948e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; typename Derived::Scalar, rank &gt;</type>
        <definition>Eigen::Tensor&lt; typename Derived::Scalar, rank &gt; Ikarus::TensorCast</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;matrix, const std::array&lt; T, rank &gt; &amp;dims)</argsstring>
        <name>TensorCast</name>
        <qualifiedname>Ikarus::TensorCast</qualifiedname>
        <param>
          <type>const <ref refid="db/dec/a01337" kindref="compound">Eigen::EigenBase</ref>&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::array&lt; T, rank &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="16" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="16" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1ab2cea9ac847cc3635812467c9d96ceb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::dyadic</definition>
        <argsstring>(const auto &amp;A_ij, const auto &amp;B_kl)</argsstring>
        <name>dyadic</name>
        <qualifiedname>Ikarus::dyadic</qualifiedname>
        <param>
          <type>const auto &amp;</type>
          <declname>A_ij</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>B_kl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="22" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a1c9618ef351cd986d4f64fde7f52e860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symmetricIdentityFourthOrder</definition>
        <argsstring>()</argsstring>
        <name>symmetricIdentityFourthOrder</name>
        <qualifiedname>Ikarus::symmetricIdentityFourthOrder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="28" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="28" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a2368a572348c410fd7e7deb6c6e3964a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symmetricFourthOrder</definition>
        <argsstring>(const auto &amp;A, const auto &amp;B)</argsstring>
        <name>symmetricFourthOrder</name>
        <qualifiedname>Ikarus::symmetricFourthOrder</qualifiedname>
        <param>
          <type>const auto &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="39" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="39" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1adb08b6f9cc40847b70286dc314a23000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::identityFourthOrder</definition>
        <argsstring>()</argsstring>
        <name>identityFourthOrder</name>
        <qualifiedname>Ikarus::identityFourthOrder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="50" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="50" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a8fa2b440586483c1ee0f9b90b9081da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AType</type>
          </param>
          <param>
            <type>typename BType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fourthOrderIKJL</definition>
        <argsstring>(const Eigen::MatrixBase&lt; AType &gt; &amp;A, const Eigen::MatrixBase&lt; BType &gt; &amp;B)</argsstring>
        <name>fourthOrderIKJL</name>
        <qualifiedname>Ikarus::fourthOrderIKJL</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; AType &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; BType &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="61" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="61" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1aea03dbfcd8f85ef7af004c7e09244aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>long int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symTwoSlots</definition>
        <argsstring>(const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; dim, dim, dim, dim &gt; &gt; &amp;t, const std::array&lt; size_t, 2 &gt; &amp;slots)</argsstring>
        <name>symTwoSlots</name>
        <qualifiedname>Ikarus::symTwoSlots</qualifiedname>
        <param>
          <type>const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; dim, dim, dim, dim &gt; &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::array&lt; size_t, 2 &gt; &amp;</type>
          <declname>slots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="77" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="77" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a4304655095296ce9283e012587817a51" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr Eigen::Index</type>
        <definition>constexpr Eigen::Index Ikarus::toVoigt</definition>
        <argsstring>(Eigen::Index i, Eigen::Index j) noexcept</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>Eigen::Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Eigen::Index</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="85" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="85" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a8777400d7d11c49d46f3c6be2698722e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 6 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 6 &gt; Ikarus::toVoigt</definition>
        <argsstring>(const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; 3, 3, 3, 3 &gt; &gt; &amp;ft)</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; 3, 3, 3, 3 &gt; &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="101" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="101" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1afcb655d2def01f82a0f36d7c545b0add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaxRows</declname>
            <defname>MaxRows</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::toVoigt</definition>
        <argsstring>(const Eigen::Matrix&lt; ST, size, size, Options, MaxRows, MaxRows &gt; &amp;E, bool isStrain=true)</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ST, size, size, Options, MaxRows, MaxRows &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isStrain</declname>
          <defval>true</defval>
        </param>
    <requiresclause>(size &gt; 0 and size &lt;= 3)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="112" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="112" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a518e0394f7c90dbe798b6cb8d757b822" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::array&lt; size_t, 2 &gt;</type>
        <definition>constexpr std::array&lt; size_t, 2 &gt; Ikarus::fromVoigt</definition>
        <argsstring>(size_t i)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="128" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="128" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a106e11a950fe2545890e811d2e9545fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fromVoigt</definition>
        <argsstring>(const Eigen::Vector&lt; ST, size &gt; &amp;EVoigt, bool isStrain=true)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ST, size &gt; &amp;</type>
          <declname>EVoigt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isStrain</declname>
          <defval>true</defval>
        </param>
    <requiresclause>(size == 1 or size == 3 or size == 6)    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="144" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="144" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a0afe53095f875017b5673a42e13e6f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fromVoigt</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 6 &gt; &amp;CVoigt)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 6 &gt; &amp;</type>
          <declname>CVoigt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="162" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="162" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a19d425a4fbc72c2ef7a97d71de9329a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>sizeOfCondensedIndices</declname>
            <defname>sizeOfCondensedIndices</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::staticCondensation</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;E, const std::array&lt; size_t, sizeOfCondensedIndices &gt; &amp;indices)</argsstring>
        <name>staticCondensation</name>
        <qualifiedname>Ikarus::staticCondensation</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>const std::array&lt; size_t, sizeOfCondensedIndices &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="176" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="176" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a2f675229501979101656ec4dee7764d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>sizeOfRemovedCols</declname>
            <defname>sizeOfRemovedCols</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::removeCol</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;E, const std::array&lt; size_t, sizeOfRemovedCols &gt; &amp;indices)</argsstring>
        <name>removeCol</name>
        <qualifiedname>Ikarus::removeCol</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>const std::array&lt; size_t, sizeOfRemovedCols &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="192" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="192" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1aba308983af2a69237076686ddad82a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>typename MaterialImpl</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::toVoigtAndMaybeReduce</definition>
        <argsstring>(const Eigen::Matrix&lt; ST, 3, 3 &gt; &amp;E, const MaterialImpl &amp;, bool isStrain=true)</argsstring>
        <name>toVoigtAndMaybeReduce</name>
        <qualifiedname>Ikarus::toVoigtAndMaybeReduce</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ST, 3, 3 &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>const MaterialImpl &amp;</type>
        </param>
        <param>
          <type>bool</type>
          <declname>isStrain</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="204" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="204" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="dd/df3/a00219_1a30500f2c49b7d1997c7eb7b6ee90ad75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Material</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Ikarus::enlargeIfReduced</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;E)</argsstring>
        <name>enlargeIfReduced</name>
        <qualifiedname>Ikarus::enlargeIfReduced</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="219" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="219" bodyend="244"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" line="19" column="1"/>
  </compounddef>
</doxygen>
