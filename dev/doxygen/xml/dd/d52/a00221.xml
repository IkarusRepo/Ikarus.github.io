<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="dd/d52/a00221" kind="file" language="C++">
    <compoundname>newtonraphson.hh</compoundname>
    <includes refid="d1/da8/a00230" local="no">ikarus/solver/linearsolver/linearsolver.hh</includes>
    <includes refid="dc/d9a/a00218" local="no">ikarus/solver/nonlinearsolver/solverinfos.hh</includes>
    <includes refid="db/db2/a00020" local="no">ikarus/utils/concepts.hh</includes>
    <includes refid="d5/d16/a00029" local="no">ikarus/utils/defaultfunctions.hh</includes>
    <includes refid="df/d03/a00062" local="no">ikarus/utils/linearalgebrahelper.hh</includes>
    <includes refid="d5/df1/a00206" local="no">ikarus/utils/observer/observer.hh</includes>
    <includes refid="dc/d57/a00194" local="no">ikarus/utils/observer/observermessages.hh</includes>
    <includedby refid="d2/df5/a00137" local="no">vanishingstress.hh</includedby>
    <incdepgraph>
      <node id="2">
        <label>ikarus/solver/linearsolver/linearsolver.hh</label>
        <link refid="d1/da8/a00230"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>newtonraphson.hh</label>
        <link refid="dd/d52/a00221"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ikarus/solver/nonlinearsolver/solverinfos.hh</label>
        <link refid="dc/d9a/a00218"/>
      </node>
      <node id="10">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="db/db2/a00020"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ikarus/utils/defaultfunctions.hh</label>
        <link refid="d5/d16/a00029"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>linearalgebrahelper.hh</label>
        <link refid="df/d03/a00062"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="d4/dee/a00008"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>ikarus/utils/observer/observer.hh</label>
        <link refid="d5/df1/a00206"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>ikarus/utils/observer/observermessages.hh</label>
        <link refid="dc/d57/a00194"/>
      </node>
      <node id="17">
        <label>ikarus/utils/traits.hh</label>
        <link refid="d9/d2e/a00056"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Eigen/Core</label>
      </node>
      <node id="16">
        <label>Eigen/Sparse</label>
      </node>
      <node id="8">
        <label>Eigen/SparseCore</label>
      </node>
      <node id="28">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="11">
        <label>concepts</label>
      </node>
      <node id="6">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="20">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="26">
        <label>dune/common/tuplevector.hh</label>
      </node>
      <node id="14">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="15">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="27">
        <label>dune/istl/bvector.hh</label>
      </node>
      <node id="23">
        <label>iosfwd</label>
      </node>
      <node id="30">
        <label>map</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="18">
        <label>optional</label>
      </node>
      <node id="24">
        <label>random</label>
      </node>
      <node id="25">
        <label>ranges</label>
      </node>
      <node id="19">
        <label>tuple</label>
      </node>
      <node id="4">
        <label>type_traits</label>
      </node>
      <node id="12">
        <label>utility</label>
      </node>
      <node id="5">
        <label>variant</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>kirchhoffloveshell.hh</label>
        <link refid="da/d5c/a02432"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>linearelastic.hh</label>
        <link refid="da/d6b/a02438"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>materials.hh</label>
        <link refid="d6/db8/a00158"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>vanishingstress.hh</label>
        <link refid="d2/df5/a00137"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>kirchhoffloveshell.hh</label>
        <link refid="d1/de1/a02435"/>
      </node>
      <node id="7">
        <label>linearelastic.hh</label>
        <link refid="d9/dd6/a02441"/>
      </node>
      <node id="9">
        <label>material.hh</label>
        <link refid="de/df3/a00185"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>registerelement.hh</label>
        <link refid="d7/d25/a00182"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>newtonraphson.hh</label>
        <link refid="dd/d52/a00221"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>_ikarus.cc</label>
        <link refid="dd/dd7/a00260"/>
      </node>
    </invincdepgraph>
    <innerclass refid="df/d68/a01385" prot="public">Ikarus::NewtonRaphsonSettings</innerclass>
    <innerclass refid="d0/d95/a01389" prot="public">Ikarus::NewtonRaphson</innerclass>
    <innernamespace refid="d9/d0d/a00298">Ikarus</innernamespace>
    <briefdescription>
<para>Implementation of the Newton-Raphson method for solving nonlinear equations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="d1/da8/a00230" kindref="compound">ikarus/solver/linearsolver/linearsolver.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="dc/d9a/a00218" kindref="compound">ikarus/solver/nonlinearsolver/solverinfos.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="db/db2/a00020" kindref="compound">ikarus/utils/concepts.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="d5/d16/a00029" kindref="compound">ikarus/utils/defaultfunctions.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="df/d03/a00062" kindref="compound">ikarus/utils/linearalgebrahelper.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="d5/df1/a00206" kindref="compound">ikarus/utils/observer/observer.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="dc/d57/a00194" kindref="compound">ikarus/utils/observer/observermessages.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d9/d0d/a00298" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="df/d68/a01385" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/d68/a01385" kindref="compound">NewtonRaphsonSettings</ref><sp/>{</highlight></codeline>
<codeline lineno="26" refid="df/d68/a01385_1a0018d8586d377ac30eb644d21d22c2a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="df/d68/a01385_1a0018d8586d377ac30eb644d21d22c2a8" kindref="member">tol</ref>{1e-8};</highlight></codeline>
<codeline lineno="27" refid="df/d68/a01385_1ae1c1d5ca83049ccad73d69e93535a55a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="df/d68/a01385_1ae1c1d5ca83049ccad73d69e93535a55a" kindref="member">maxIter</ref>{20};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperatorImpl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/d0d/a00298_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">LinearSolver</ref><sp/>=<sp/>utils::SolverDefault,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UpdateFunctionTypeImpl<sp/>=<sp/>utils::UpdateDefault&gt;</highlight></codeline>
<codeline lineno="41" refid="d0/d95/a01389" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d0/d95/a01389" kindref="compound">NewtonRaphson</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d5/dc8/a01541" kindref="compound">IObservable</ref>&lt;NonLinearSolverMessages&gt;<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44" refid="d0/d95/a01389_1a9aa900c629f705627481374206a52be1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/d95/a01389_1a9aa900c629f705627481374206a52be1" kindref="member">isLinearSolver</ref></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d5/dcf/a01602" kindref="compound">Ikarus::Concepts::LinearSolverCheck</ref>&lt;<ref refid="d9/d0d/a00298_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">LinearSolver</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperatorImpl::DerivativeType,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperatorImpl::ValueType&gt;;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="d0/d95/a01389_1a007d87454967ec574d6058c48d9927d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="d0/d95/a01389_1a007d87454967ec574d6058c48d9927d4" kindref="member">ValueType</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperatorImpl::template<sp/>ParameterValue&lt;0&gt;;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="d0/d95/a01389_1ad2379dc80d46888aa9280a132b4de5b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="d0/d95/a01389_1ad2379dc80d46888aa9280a132b4de5b9" kindref="member">UpdateFunctionType</ref><sp/>=<sp/>UpdateFunctionTypeImpl;<sp/><sp/></highlight></codeline>
<codeline lineno="52" refid="d0/d95/a01389_1a495f35d7f20899be453381082b3b6c10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="d0/d95/a01389_1a495f35d7f20899be453381082b3b6c10" kindref="member">NonLinearOperator</ref><sp/><sp/>=<sp/>NonLinearOperatorImpl;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="d0/d95/a01389_1ae51b0f687ceaf2051b4ddebb7ea39411" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d0/d95/a01389_1ae51b0f687ceaf2051b4ddebb7ea39411" kindref="member">NewtonRaphson</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NonLinearOperatorImpl&amp;<sp/>p_nonLinearOperator,<sp/><ref refid="d7/d38/a01373" kindref="compound">LinearSolver</ref>&amp;&amp;<sp/>p_linearSolver<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateFunctionTypeImpl<sp/>p_updateFunction<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>nonLinearOperator_{p_nonLinearOperator},</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver{std::move(p_linearSolver)},</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateFunction{p_updateFunction}<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;typename<sp/>NonLinearOperatorImpl::ValueType,<sp/>Eigen::VectorXd&gt;)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correction.setZero(<ref refid="d0/d95/a01389_1a17be0037f6b48da2eef9f256b0aed795" kindref="member">nonLinearOperator</ref>().value().size());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="d0/d95/a01389_1a146aaddd7122c3f73bc6b87890d18f63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d95/a01389_1a146aaddd7122c3f73bc6b87890d18f63" kindref="member">setup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d68/a01385" kindref="compound">NewtonRaphsonSettings</ref>&amp;<sp/>p_settings)<sp/>{<sp/>settings<sp/>=<sp/>p_settings;<sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOXYGEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NoPredictor<sp/>{};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SolutionType<sp/>=<sp/>NoPredictor&gt;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::is_same_v&lt;SolutionType,<sp/>NoPredictor&gt;<sp/>||<sp/>std::is_convertible_v&lt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SolutionType,<sp/>std::remove_cvref_t&lt;typename<sp/>NonLinearOperatorImpl::ValueType&gt;&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>solve<sp/>method<sp/>returns<sp/>information<sp/>of<sp/>the<sp/>solution<sp/>process.<sp/>You<sp/>should<sp/>store<sp/>this<sp/>information<sp/>and<sp/>check<sp/>if<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;it<sp/>was<sp/>successful&quot;</highlight><highlight class="normal">)]]<sp/><ref refid="dc/df4/a01401" kindref="compound">Ikarus::NonLinearSolverInformation</ref></highlight></codeline>
<codeline lineno="89" refid="d0/d95/a01389_1a59498e1839e058c89a4d124ba38a74e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d95/a01389_1a59498e1839e058c89a4d124ba38a74e5" kindref="member">solve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SolutionType&amp;<sp/>dx_predictor<sp/>=<sp/>NoPredictor{})<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d5/dc8/a01541_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="d8/d0a/a00292_1gga662b2b6a80547adf4b9ce8b30d87fab5afaee4ca3c30ee18148ce3ada37466498" kindref="member">NonLinearSolverMessages::INIT</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/df4/a01401" kindref="compound">Ikarus::NonLinearSolverInformation</ref><sp/>solverInformation;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>solverInformation.<ref refid="dc/df4/a01401_1acb65d72d7b2291a9b0d958ce0e4e0887" kindref="member">success</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d0/d95/a01389_1a17be0037f6b48da2eef9f256b0aed795" kindref="member">nonLinearOperator</ref>().firstParameter();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(not<sp/>std::is_same_v&lt;SolutionType,<sp/>NoPredictor&gt;)<sp/>updateFunction(x,<sp/>dx_predictor);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d95/a01389_1a17be0037f6b48da2eef9f256b0aed795" kindref="member">nonLinearOperator</ref>().updateAll();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rx<sp/>=<sp/><ref refid="d0/d95/a01389_1a17be0037f6b48da2eef9f256b0aed795" kindref="member">nonLinearOperator</ref>().value();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>Ax<sp/>=<sp/><ref refid="d0/d95/a01389_1a17be0037f6b48da2eef9f256b0aed795" kindref="member">nonLinearOperator</ref>().derivative();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rNorm<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d6/d82/a00293_1ga0ffc0c74dbd9aeee3e53b199a21b828c" kindref="member">norm</ref>(rx);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(rNorm)<sp/>dNorm;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter{0};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="d0/d95/a01389_1a9aa900c629f705627481374206a52be1" kindref="member">isLinearSolver</ref>)<sp/>linearSolver.<ref refid="d7/d38/a01373_1a33237d5e237bf2272d2c58c648eda5a1" kindref="member">analyzePattern</ref>(Ax);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rNorm<sp/>&gt;<sp/>settings.<ref refid="df/d68/a01385_1a0018d8586d377ac30eb644d21d22c2a8" kindref="member">tol</ref><sp/>&amp;&amp;<sp/>iter<sp/>&lt;<sp/>settings.<ref refid="df/d68/a01385_1ae1c1d5ca83049ccad73d69e93535a55a" kindref="member">maxIter</ref>)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d5/dc8/a01541_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="d8/d0a/a00292_1gga662b2b6a80547adf4b9ce8b30d87fab5afdb2cb9832d112cd92fb2cda8879c3b4" kindref="member">NonLinearSolverMessages::ITERATION_STARTED</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="d0/d95/a01389_1a9aa900c629f705627481374206a52be1" kindref="member">isLinearSolver</ref>)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.<ref refid="d7/d38/a01373_1ad9515d35c770a9d2a087a20593af5d85" kindref="member">factorize</ref>(Ax);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.<ref refid="d7/d38/a01373_1a4ddf79d3353ecc1c7e7a25c7e249cb78" kindref="member">solve</ref>(correction,<sp/>-rx);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dNorm<sp/>=<sp/>correction.norm();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateFunction(x,<sp/>correction);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correction<sp/>=<sp/>-linearSolver(rx,<sp/>Ax);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dNorm<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d6/d82/a00293_1ga0ffc0c74dbd9aeee3e53b199a21b828c" kindref="member">norm</ref>(correction);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateFunction(x,<sp/>correction);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d5/dc8/a01541_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="d8/d0a/a00292_1gga662b2b6a80547adf4b9ce8b30d87fab5a07a63a77745ab72a7e89fb22a8bcfd78" kindref="member">NonLinearSolverMessages::CORRECTIONNORM_UPDATED</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dNorm));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d5/dc8/a01541_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="d8/d0a/a00292_1gga662b2b6a80547adf4b9ce8b30d87fab5a0d30d757bf062e88728ebe7f8e2b2577" kindref="member">NonLinearSolverMessages::SOLUTION_CHANGED</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d95/a01389_1a17be0037f6b48da2eef9f256b0aed795" kindref="member">nonLinearOperator</ref>().updateAll();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rNorm<sp/>=<sp/><ref refid="d6/d82/a00293_1ga0ffc0c74dbd9aeee3e53b199a21b828c" kindref="member">norm</ref>(rx);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d5/dc8/a01541_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="d8/d0a/a00292_1gga662b2b6a80547adf4b9ce8b30d87fab5a721c68980ba6c47122945477a56d7a14" kindref="member">NonLinearSolverMessages::RESIDUALNORM_UPDATED</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rNorm));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d5/dc8/a01541_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="d8/d0a/a00292_1gga662b2b6a80547adf4b9ce8b30d87fab5a073d71a89cce6d4b9775987fdbb22815" kindref="member">NonLinearSolverMessages::ITERATION_ENDED</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++iter;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>settings.<ref refid="df/d68/a01385_1ae1c1d5ca83049ccad73d69e93535a55a" kindref="member">maxIter</ref>)<sp/>solverInformation.<ref refid="dc/df4/a01401_1acb65d72d7b2291a9b0d958ce0e4e0887" kindref="member">success</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>solverInformation.<ref refid="dc/df4/a01401_1a81570cd3d9f6589a4d1ba81211f41b99" kindref="member">iterations</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>iter;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>solverInformation.<ref refid="dc/df4/a01401_1ab09859737734f97734f20624f9f3c934" kindref="member">residualNorm</ref><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rNorm);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>solverInformation.<ref refid="dc/df4/a01401_1a66f51414779f3e563557157fb688f18b" kindref="member">correctionNorm</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dNorm);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(solverInformation.<ref refid="dc/df4/a01401_1acb65d72d7b2291a9b0d958ce0e4e0887" kindref="member">success</ref>)<sp/>this-&gt;<ref refid="d5/dc8/a01541_1a4bce3750aa7d52aff9baf122a54e16b5" kindref="member">notify</ref>(<ref refid="d8/d0a/a00292_1gga662b2b6a80547adf4b9ce8b30d87fab5a15380ac35d47cdbcbd64aada4bc21931" kindref="member">NonLinearSolverMessages::FINISHED_SUCESSFULLY</ref>,<sp/>iter);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solverInformation;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="d0/d95/a01389_1a17be0037f6b48da2eef9f256b0aed795" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="d0/d95/a01389_1a17be0037f6b48da2eef9f256b0aed795" kindref="member">nonLinearOperator</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonLinearOperator_;<sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>NonLinearOperatorImpl<sp/>nonLinearOperator_;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperatorImpl::ValueType<sp/>correction;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d38/a01373" kindref="compound">LinearSolver</ref><sp/>linearSolver;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d95/a01389_1ad2379dc80d46888aa9280a132b4de5b9" kindref="member">UpdateFunctionType</ref><sp/>updateFunction;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d68/a01385" kindref="compound">NewtonRaphsonSettings</ref><sp/>settings;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperatorImpl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/d0d/a00298_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">LinearSolver</ref><sp/>=<sp/>utils::SolverDefault,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UpdateFunctionType<sp/>=<sp/>utils::UpdateDefault&gt;</highlight></codeline>
<codeline lineno="156" refid="d9/d0d/a00298_1a88c3bed4f749a93760f96c52c91091e7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="d9/d0d/a00298_1a88c3bed4f749a93760f96c52c91091e7" kindref="member">makeNewtonRaphson</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NonLinearOperatorImpl&amp;<sp/>p_nonLinearOperator,<sp/><ref refid="d7/d38/a01373" kindref="compound">LinearSolver</ref>&amp;&amp;<sp/>p_linearSolver<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateFunctionType&amp;&amp;<sp/>p_updateFunction<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;NewtonRaphson&lt;NonLinearOperatorImpl,<sp/>LinearSolver,<sp/>UpdateFunctionType&gt;&gt;(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_nonLinearOperator,<sp/>std::forward&lt;LinearSolver&gt;(p_linearSolver),<sp/>std::move(p_updateFunction));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphson.hh"/>
  </compounddef>
</doxygen>
