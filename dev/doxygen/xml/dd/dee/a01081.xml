<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="dd/dee/a01081" kind="struct" language="C++" prot="public">
    <compoundname>Ikarus::AdaptiveStepSizing::IterationBased</compoundname>
    <includes refid="de/df3/a00185" local="no">ikarus/controlroutines/adaptivestepsizing.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dd/dee/a01081_1aa0d843f423a276d1ad178594885c2ea4" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Ikarus::AdaptiveStepSizing::IterationBased::targetIterations_</definition>
        <argsstring></argsstring>
        <name>targetIterations_</name>
        <qualifiedname>Ikarus::AdaptiveStepSizing::IterationBased::targetIterations_</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/adaptivestepsizing.hh" line="35" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/adaptivestepsizing.hh" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/dee/a01081_1aeb04564978e21c0cb75faf5494d6937c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d3/d0b/a01253" kindref="compound">NonLinearOperator</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::AdaptiveStepSizing::IterationBased::operator()</definition>
        <argsstring>(const NonLinearSolverInformation &amp;solverInfo, Ikarus::SubsidiaryArgs &amp;subsidiaryArgs, const NonLinearOperator &amp;)</argsstring>
        <name>operator()</name>
        <qualifiedname>Ikarus::AdaptiveStepSizing::IterationBased::operator()</qualifiedname>
        <param>
          <type>const <ref refid="db/d4b/a01309" kindref="compound">NonLinearSolverInformation</ref> &amp;</type>
          <declname>solverInfo</declname>
        </param>
        <param>
          <type><ref refid="de/d1c/a01093" kindref="compound">Ikarus::SubsidiaryArgs</ref> &amp;</type>
          <declname>subsidiaryArgs</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d0b/a01253" kindref="compound">NonLinearOperator</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/adaptivestepsizing.hh" line="19" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/adaptivestepsizing.hh" bodystart="19" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="dd/dee/a01081_1aabdaad05b950b53e014624271a16fd9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Ikarus::AdaptiveStepSizing::IterationBased::targetIterations</definition>
        <argsstring>() const</argsstring>
        <name>targetIterations</name>
        <qualifiedname>Ikarus::AdaptiveStepSizing::IterationBased::targetIterations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/adaptivestepsizing.hh" line="31" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/adaptivestepsizing.hh" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="dd/dee/a01081_1a52017ebcd89859d5ae214cc8767ef78d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::AdaptiveStepSizing::IterationBased::setTargetIterations</definition>
        <argsstring>(int targetIterations)</argsstring>
        <name>setTargetIterations</name>
        <qualifiedname>Ikarus::AdaptiveStepSizing::IterationBased::setTargetIterations</qualifiedname>
        <param>
          <type>int</type>
          <declname>targetIterations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/adaptivestepsizing.hh" line="32" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/adaptivestepsizing.hh" bodystart="32" bodyend="32"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/adaptivestepsizing.hh" line="17" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/adaptivestepsizing.hh" bodystart="17" bodyend="36"/>
    <listofallmembers>
      <member refid="dd/dee/a01081_1aeb04564978e21c0cb75faf5494d6937c" prot="public" virt="non-virtual"><scope>Ikarus::AdaptiveStepSizing::IterationBased</scope><name>operator()</name></member>
      <member refid="dd/dee/a01081_1a52017ebcd89859d5ae214cc8767ef78d" prot="public" virt="non-virtual"><scope>Ikarus::AdaptiveStepSizing::IterationBased</scope><name>setTargetIterations</name></member>
      <member refid="dd/dee/a01081_1aabdaad05b950b53e014624271a16fd9c" prot="public" virt="non-virtual"><scope>Ikarus::AdaptiveStepSizing::IterationBased</scope><name>targetIterations</name></member>
      <member refid="dd/dee/a01081_1aa0d843f423a276d1ad178594885c2ea4" prot="private" virt="non-virtual"><scope>Ikarus::AdaptiveStepSizing::IterationBased</scope><name>targetIterations_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
