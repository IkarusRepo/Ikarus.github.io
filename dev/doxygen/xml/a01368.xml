<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01368" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::NonLinearElastic</compoundname>
    <basecompoundref refid="a01232" prot="public" virt="non-virtual">Ikarus::FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;</basecompoundref>
    <basecompoundref refid="a01336" prot="public" virt="non-virtual">Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;</basecompoundref>
    <basecompoundref refid="a01332" prot="public" virt="non-virtual">Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;</basecompoundref>
    <includes refid="a02497" local="no">ikarus/finiteelements/mechanics/nonlinearelastic.hh</includes>
    <templateparamlist>
      <param>
        <type>typename BH</type>
      </param>
      <param>
        <type>typename MAT</type>
      </param>
      <param>
        <type>typename FER</type>
        <defval><ref refid="a01252" kindref="compound">FERequirements</ref>&lt;&gt;</defval>
      </param>
      <param>
        <type>bool</type>
        <declname>useEigenRef</declname>
        <defname>useEigenRef</defname>
        <defval>false</defval>
      </param>
      <param>
        <type>bool</type>
        <declname>useFlat</declname>
        <defname>useFlat</defname>
        <defval>true</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a01368_1ac4658a7b0a61bc6aeedbbc82544f0d45" prot="public" static="no">
        <type><ref refid="a01232" kindref="compound">FEBase</ref>&lt; BH, useFlat, FER, useEigenRef &gt;</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::Base =  FEBase&lt;BH, useFlat, FER, useEigenRef&gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <qualifiedname>Ikarus::NonLinearElastic::Base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="52" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1a293a865db44f89553252be2da32c9991" prot="public" static="no">
        <type>typename <ref refid="a01232_1ac5fdc9a8e9d4a7d670df89d397129588" kindref="member">Base::Traits</ref></type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::Traits =  typename Base::Traits</definition>
        <argsstring></argsstring>
        <name>Traits</name>
        <qualifiedname>Ikarus::NonLinearElastic::Traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="53" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1ac05c4360f5191ebb97b85998db6199f2" prot="public" static="no">
        <type>typename Traits::BasisHandler</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::BasisHandler =  typename Traits::BasisHandler</definition>
        <argsstring></argsstring>
        <name>BasisHandler</name>
        <qualifiedname>Ikarus::NonLinearElastic::BasisHandler</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="54" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1a382567a9fe4fac11bbdd1f12063a14d9" prot="public" static="no">
        <type>typename Traits::FlatBasis</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::FlatBasis =  typename Traits::FlatBasis</definition>
        <argsstring></argsstring>
        <name>FlatBasis</name>
        <qualifiedname>Ikarus::NonLinearElastic::FlatBasis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="55" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1a80b1ba5b790fd0a38cccd20439124d76" prot="public" static="no">
        <type>typename Traits::FERequirementType</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::FERequirementType =  typename Traits::FERequirementType</definition>
        <argsstring></argsstring>
        <name>FERequirementType</name>
        <qualifiedname>Ikarus::NonLinearElastic::FERequirementType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="56" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1ae23978873c7c62b0448e26fd3414cb3c" prot="public" static="no">
        <type>typename Traits::LocalView</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::LocalView =  typename Traits::LocalView</definition>
        <argsstring></argsstring>
        <name>LocalView</name>
        <qualifiedname>Ikarus::NonLinearElastic::LocalView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="57" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1af86286299b4ce7b9477d22a03c2f4704" prot="public" static="no">
        <type>typename Traits::Geometry</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::Geometry =  typename Traits::Geometry</definition>
        <argsstring></argsstring>
        <name>Geometry</name>
        <qualifiedname>Ikarus::NonLinearElastic::Geometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="58" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1a28d423c3e7f434b7d776a3e3e4d498d4" prot="public" static="no">
        <type>typename Traits::GridView</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::GridView =  typename Traits::GridView</definition>
        <argsstring></argsstring>
        <name>GridView</name>
        <qualifiedname>Ikarus::NonLinearElastic::GridView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="59" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1aa63c4e031affd156566457d226a4a083" prot="public" static="no">
        <type>typename Traits::Element</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::Element =  typename Traits::Element</definition>
        <argsstring></argsstring>
        <name>Element</name>
        <qualifiedname>Ikarus::NonLinearElastic::Element</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="60" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1a55d99c371dc949e4c00324bcd5ddecfd" prot="public" static="no">
        <type>MAT</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::Material =  MAT</definition>
        <argsstring></argsstring>
        <name>Material</name>
        <qualifiedname>Ikarus::NonLinearElastic::Material</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="61" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1ac482d71948b655196ad06dc23d57a467" prot="public" static="no">
        <type><ref refid="a01336" kindref="compound">Volume</ref>&lt; <ref refid="a01368" kindref="compound">NonLinearElastic</ref>, <ref refid="a01368_1a293a865db44f89553252be2da32c9991" kindref="member">Traits</ref> &gt;</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::VolumeType =  Volume&lt;NonLinearElastic, Traits&gt;</definition>
        <argsstring></argsstring>
        <name>VolumeType</name>
        <qualifiedname>Ikarus::NonLinearElastic::VolumeType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="62" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1aeae332fb38224eaa5c8ed1d8c79e4532" prot="public" static="no">
        <type><ref refid="a01332" kindref="compound">Traction</ref>&lt; <ref refid="a01368" kindref="compound">NonLinearElastic</ref>, <ref refid="a01368_1a293a865db44f89553252be2da32c9991" kindref="member">Traits</ref> &gt;</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::TractionType =  Traction&lt;NonLinearElastic, Traits&gt;</definition>
        <argsstring></argsstring>
        <name>TractionType</name>
        <qualifiedname>Ikarus::NonLinearElastic::TractionType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="63" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01368_1a20937b8d29dbe3903394a284723b6c32" prot="public" static="no">
        <type>decltype(std::declval&lt; <ref refid="a01368_1ae23978873c7c62b0448e26fd3414cb3c" kindref="member">LocalView</ref> &gt;().tree().child(0).finiteElement().localBasis())</type>
        <definition>using Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::LocalBasisType =  decltype(std::declval&lt;LocalView&gt;().tree().child(0).finiteElement().localBasis())</definition>
        <argsstring></argsstring>
        <name>LocalBasisType</name>
        <qualifiedname>Ikarus::NonLinearElastic::LocalBasisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="64" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01232_1a0475c47f864b7ac2a19c69c679e565ff" prot="public" static="no">
        <type>typename Traits::GlobalIndex</type>
        <definition>using Ikarus::FEBase&lt; BH, useFlat, FERequirements&lt;&gt; , useEigenRef &gt;::GlobalIndex =  typename Traits::GlobalIndex</definition>
        <argsstring></argsstring>
        <name>GlobalIndex</name>
        <qualifiedname>Ikarus::FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::GlobalIndex</qualifiedname>
        <briefdescription>
<para>Type of the global index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" line="34" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a01232_1ae72a95377bf3b1c256d5429f37b0f504" prot="public" static="no">
        <type>typename Traits::Element</type>
        <definition>using Ikarus::FEBase&lt; BH, useFlat, FERequirements&lt;&gt; , useEigenRef &gt;::GridElement =  typename Traits::Element</definition>
        <argsstring></argsstring>
        <name>GridElement</name>
        <qualifiedname>Ikarus::FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::GridElement</qualifiedname>
        <briefdescription>
<para>Type of the grid element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" line="35" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="a01368_1ab7c8d3171e7b10131419a284feefe4aa" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::myDim</definition>
        <argsstring></argsstring>
        <name>myDim</name>
        <qualifiedname>Ikarus::NonLinearElastic::myDim</qualifiedname>
        <initializer>= Traits::mydim</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="66" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="66" bodyend="-1"/>
        <referencedby refid="a01368_1abe95aba4255becb35502caaa4442063c" compoundref="a02497" startline="224" endline="246">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateMatrix</referencedby>
        <referencedby refid="a01368_1aa36fb72f92ed5b674f56b434aedc8845" compoundref="a02497" startline="317" endline="339">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateVectorImpl</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a01368_1a2ba2ed5c7258875dfa2083e401f7bd49" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::strainType</definition>
        <argsstring></argsstring>
        <name>strainType</name>
        <qualifiedname>Ikarus::NonLinearElastic::strainType</qualifiedname>
        <initializer>= <ref refid="a00317_1ggacef1e451de1a99845c59d7391064fb8faca3f1e4bb21fd00a3d29c5d8aff8e11e" kindref="member">StrainTags::greenLagrangian</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="67" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01336_1a073fb2d3afae0bd3e0afe1c2534f9afd" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt; , FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits  &gt;::worldDim</definition>
        <argsstring></argsstring>
        <name>worldDim</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::worldDim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="25" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01332_1a1d2ad110e77cf497bc88ac1a8735fc97" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt; , FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits  &gt;::worldDim</definition>
        <argsstring></argsstring>
        <name>worldDim</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::worldDim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="29" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01368_1a963408a64cc79fec48d67821a2e9a6a6" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; const <ref refid="a01368_1af86286299b4ce7b9477d22a03c2f4704" kindref="member">Geometry</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const Geometry&gt; Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::geo_</definition>
        <argsstring></argsstring>
        <name>geo_</name>
        <qualifiedname>Ikarus::NonLinearElastic::geo_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="284" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01368_1a10d90cfa8c82533579c7ab0c403f331e" prot="private" static="no" mutable="no">
        <type>Dune::CachedLocalBasis&lt; std::remove_cvref_t&lt; <ref refid="a01368_1a20937b8d29dbe3903394a284723b6c32" kindref="member">LocalBasisType</ref> &gt; &gt;</type>
        <definition>Dune::CachedLocalBasis&lt;std::remove_cvref_t&lt;LocalBasisType&gt; &gt; Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::localBasis_</definition>
        <argsstring></argsstring>
        <name>localBasis_</name>
        <qualifiedname>Ikarus::NonLinearElastic::localBasis_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="285" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01368_1a1b8af8f3c9f512efbe8496ce52059a79" prot="private" static="no" mutable="no">
        <type><ref refid="a01368_1a55d99c371dc949e4c00324bcd5ddecfd" kindref="member">Material</ref></type>
        <definition>Material Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::mat_</definition>
        <argsstring></argsstring>
        <name>mat_</name>
        <qualifiedname>Ikarus::NonLinearElastic::mat_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="286" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01368_1a502f72e77ec077fe629832914d8d5504" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::numberOfNodes_</definition>
        <argsstring></argsstring>
        <name>numberOfNodes_</name>
        <qualifiedname>Ikarus::NonLinearElastic::numberOfNodes_</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="287" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01368_1abc5c2c4ca11de5078c5e35046927e12e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::order_</definition>
        <argsstring></argsstring>
        <name>order_</name>
        <qualifiedname>Ikarus::NonLinearElastic::order_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="288" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="288" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01368_1a3c87434ce03f479f107cd93ace1a7da5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VolumeLoad</type>
            <defval><ref refid="a01516" kindref="compound">utils::LoadDefault</ref></defval>
          </param>
          <param>
            <type>typename NeumannBoundaryLoad</type>
            <defval><ref refid="a01516" kindref="compound">utils::LoadDefault</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::NonLinearElastic</definition>
        <argsstring>(const BasisHandler &amp;basisHandler, const typename LocalView::Element &amp;element, const Material &amp;mat, VolumeLoad volumeLoad={}, const BoundaryPatch&lt; GridView &gt; *neumannBoundary=nullptr, NeumannBoundaryLoad neumannBoundaryLoad={})</argsstring>
        <name>NonLinearElastic</name>
        <qualifiedname>Ikarus::NonLinearElastic::NonLinearElastic</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1ac05c4360f5191ebb97b85998db6199f2" kindref="member">BasisHandler</ref> &amp;</type>
          <declname>basisHandler</declname>
        </param>
        <param>
          <type>const typename LocalView::Element &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const <ref refid="a01368_1a55d99c371dc949e4c00324bcd5ddecfd" kindref="member">Material</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>VolumeLoad</type>
          <declname>volumeLoad</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const BoundaryPatch&lt; <ref refid="a01368_1a28d423c3e7f434b7d776a3e3e4d498d4" kindref="member">GridView</ref> &gt; *</type>
          <declname>neumannBoundary</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>NeumannBoundaryLoad</type>
          <declname>neumannBoundaryLoad</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Constructor for the <ref refid="a01368" kindref="compound">NonLinearElastic</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VolumeLoad</parametername>
</parameternamelist>
<parameterdescription>
<para>The type for the volume load function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NeumannBoundaryLoad</parametername>
</parameternamelist>
<parameterdescription>
<para>The type for the Neumann boundary load function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>basisHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>The basis handler for the finite element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>The element for which the finite element is constructed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The material for the non-linear elastic element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>volumeLoad</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="a01336" kindref="compound">Volume</ref> load function (default is LoadDefault). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neumannBoundary</parametername>
</parameternamelist>
<parameterdescription>
<para>Neumann boundary patch (default is nullptr). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neumannBoundaryLoad</parametername>
</parameternamelist>
<parameterdescription>
<para>Neumann boundary load function (default is LoadDefault). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="82" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="82" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="a01368_1ae22f726fd67e4e7f1853b21fbbadff64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::displacementFunction</definition>
        <argsstring>(const FERequirementType &amp;par, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>displacementFunction</name>
        <qualifiedname>Ikarus::NonLinearElastic::displacementFunction</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>Get the displacement function for the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the displacement function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional displacement vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A StandardLocalFunction representing the displacement function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="115" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="115" bodyend="121"/>
        <referencedby refid="a01368_1a494e4dcdb1f53f01eeecb44500020f4c" compoundref="a02497" startline="269" endline="281">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateAt</referencedby>
        <referencedby refid="a01368_1ad7e34f32d4881e6bd7286bbdc4d6d2af" compoundref="a02497" startline="292" endline="314">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateScalarImpl</referencedby>
        <referencedby refid="a01368_1a30a59eb29567415909f3d6165ebf26d1" compoundref="a02497" startline="132" endline="135">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::strainFunction</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01368_1a30a59eb29567415909f3d6165ebf26d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::strainFunction</definition>
        <argsstring>(const FERequirementType &amp;par, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>strainFunction</name>
        <qualifiedname>Ikarus::NonLinearElastic::strainFunction</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>The strain function for the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the strain function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional displacement vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The strain function calculated using greenLagrangeStrains. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="132" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="132" bodyend="135"/>
        <referencedby refid="a01368_1abe95aba4255becb35502caaa4442063c" compoundref="a02497" startline="224" endline="246">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateMatrix</referencedby>
        <referencedby refid="a01368_1ad7e34f32d4881e6bd7286bbdc4d6d2af" compoundref="a02497" startline="292" endline="314">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateScalarImpl</referencedby>
        <referencedby refid="a01368_1aa36fb72f92ed5b674f56b434aedc8845" compoundref="a02497" startline="317" endline="339">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateVectorImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01368_1a25330e501f19feb4a91821464e3bbbee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>strainDim</declname>
            <defname>strainDim</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>voigt</declname>
            <defname>voigt</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::materialTangent</definition>
        <argsstring>(const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;strain) const</argsstring>
        <name>materialTangent</name>
        <qualifiedname>Ikarus::NonLinearElastic::materialTangent</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;</type>
          <declname>strain</declname>
        </param>
        <briefdescription>
<para>Get the material tangent for the given strain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the material and strain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strainDim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the strain vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voigt</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to use Voigt notation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strain</parametername>
</parameternamelist>
<parameterdescription>
<para>The strain vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The material tangent calculated using the material&apos;s tangentModuli function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="147" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="147" bodyend="154"/>
        <referencedby refid="a01368_1abe95aba4255becb35502caaa4442063c" compoundref="a02497" startline="224" endline="246">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateMatrix</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01368_1a8907a656052a2353c2e5dc8d6e477bd9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>strainDim</declname>
            <defname>strainDim</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::getInternalEnergy</definition>
        <argsstring>(const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;strain) const</argsstring>
        <name>getInternalEnergy</name>
        <qualifiedname>Ikarus::NonLinearElastic::getInternalEnergy</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;</type>
          <declname>strain</declname>
        </param>
        <briefdescription>
<para>Get the internal energy for the given strain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the material and strain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strainDim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the strain vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strain</parametername>
</parameternamelist>
<parameterdescription>
<para>The strain vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The internal energy calculated using the material&apos;s storedEnergy function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="165" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="165" bodyend="172"/>
        <referencedby refid="a01368_1ad7e34f32d4881e6bd7286bbdc4d6d2af" compoundref="a02497" startline="292" endline="314">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateScalarImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01368_1a58c79c2893de7f39b999e315f573b5f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>strainDim</declname>
            <defname>strainDim</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>voigt</declname>
            <defname>voigt</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::getStress</definition>
        <argsstring>(const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;strain) const</argsstring>
        <name>getStress</name>
        <qualifiedname>Ikarus::NonLinearElastic::getStress</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ScalarType, strainDim &gt; &amp;</type>
          <declname>strain</declname>
        </param>
        <briefdescription>
<para>Get the stress for the given strain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the material and strain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strainDim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the strain vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voigt</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean indicating whether to use the Voigt notation for stress. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strain</parametername>
</parameternamelist>
<parameterdescription>
<para>The strain vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The stress vector calculated using the material&apos;s stresses function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="184" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="184" bodyend="191"/>
        <referencedby refid="a01368_1abe95aba4255becb35502caaa4442063c" compoundref="a02497" startline="224" endline="246">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateMatrix</referencedby>
        <referencedby refid="a01368_1aa36fb72f92ed5b674f56b434aedc8845" compoundref="a02497" startline="317" endline="339">Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateVectorImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="a01368_1a7d4ce3528b602e8573133440036dd058" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01368_1af86286299b4ce7b9477d22a03c2f4704" kindref="member">Geometry</ref> &amp;</type>
        <definition>const Geometry &amp; Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::geometry</definition>
        <argsstring>() const</argsstring>
        <name>geometry</name>
        <qualifiedname>Ikarus::NonLinearElastic::geometry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="193" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="a01368_1a5830d0db414b3fe1281a26a481e8925d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::numberOfNodes</definition>
        <argsstring>() const</argsstring>
        <name>numberOfNodes</name>
        <qualifiedname>Ikarus::NonLinearElastic::numberOfNodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="194" column="11" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="a01368_1a4c9deac8c315fcaf9b8bb9de89e46da0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::order</definition>
        <argsstring>() const</argsstring>
        <name>order</name>
        <qualifiedname>Ikarus::NonLinearElastic::order</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="195" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="a01368_1a674d61a7bf20d02f3fb0159cba90d1f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateScalar</definition>
        <argsstring>(const FERequirementType &amp;par) const</argsstring>
        <name>calculateScalar</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateScalar</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <briefdescription>
<para>Calculate the scalar value associated with the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object specifying the requirements for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The calculated scalar value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="204" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="a01368_1ac0ebe847656a00b730d6df67d0eb4b3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateVector</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template VectorType&lt;&gt; force) const</argsstring>
        <name>calculateVector</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateVector</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template VectorType&lt;&gt;</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Calculate the vector associated with the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object specifying the requirements for the calculation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to store the calculated result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="213" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="a01368_1abe95aba4255becb35502caaa4442063c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateMatrix</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template MatrixType&lt;&gt; K) const</argsstring>
        <name>calculateMatrix</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateMatrix</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template MatrixType&lt;&gt;</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Calculate the matrix associated with the given FERequirementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type for the calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>par</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object specifying the requirements for the calculation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to store the calculated result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="224" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="224" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="a01368_1a494e4dcdb1f53f01eeecb44500020f4c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename, int, int &gt; class</type>
            <declname>RT</declname>
            <defname>RT</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateAt</definition>
        <argsstring>(const FERequirementType &amp;req, const Dune::FieldVector&lt; double, Traits::mydim &gt; &amp;local) const</argsstring>
        <name>calculateAt</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateAt</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>const <ref refid="a01520" kindref="compound">Dune::FieldVector</ref>&lt; double, Traits::mydim &gt; &amp;</type>
          <declname>local</declname>
        </param>
    <requiresclause>(canProvideResultType&lt;RT&gt;())    </requiresclause>
        <briefdescription>
<para>Calculates a requested result at a specific local position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>The FERequirementType object holding the global solution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>Local position vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated result</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RT</parametername>
</parameternamelist>
<parameterdescription>
<para>The type representing the requested result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="269" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="269" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="a01232_1a61ccfd550c88670bb02528e2ef00d6fd" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t Ikarus::FEBase&lt; BH, useFlat, FERequirements&lt;&gt; , useEigenRef &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>Ikarus::FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::size</qualifiedname>
        <briefdescription>
<para>Get the size of the local view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the local view. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" line="57" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="a01232_1a986d3b0d39a10f702bddff51023d38ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01232_1ae72a95377bf3b1c256d5429f37b0f504" kindref="member">GridElement</ref> &amp;</type>
        <definition>const GridElement &amp; Ikarus::FEBase&lt; BH, useFlat, FERequirements&lt;&gt; , useEigenRef &gt;::gridElement</definition>
        <argsstring>() const</argsstring>
        <name>gridElement</name>
        <qualifiedname>Ikarus::FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::gridElement</qualifiedname>
        <briefdescription>
<para>Get the grid element associated with the local view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The grid element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" line="63" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="a01232_1a53a30773e643a5bc8709ae74a2ba68d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="a01368_1ae23978873c7c62b0448e26fd3414cb3c" kindref="member">LocalView</ref> &amp;</type>
        <definition>const LocalView &amp; Ikarus::FEBase&lt; BH, useFlat, FERequirements&lt;&gt; , useEigenRef &gt;::localView</definition>
        <argsstring>() const</argsstring>
        <name>localView</name>
        <qualifiedname>Ikarus::FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::localView</qualifiedname>
        <briefdescription>
<para>Get the const reference to the local view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The const reference to the local view. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" line="69" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="a01232_1acdf2172a6e355e863baacd9fbc757f8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a01368_1ae23978873c7c62b0448e26fd3414cb3c" kindref="member">LocalView</ref> &amp;</type>
        <definition>LocalView &amp; Ikarus::FEBase&lt; BH, useFlat, FERequirements&lt;&gt; , useEigenRef &gt;::localView</definition>
        <argsstring>()</argsstring>
        <name>localView</name>
        <qualifiedname>Ikarus::FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::localView</qualifiedname>
        <briefdescription>
<para>Get the reference to the local view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The reference to the local view. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" line="75" column="13" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/febase.hh" bodystart="75" bodyend="75"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="a01368_1afca103d2265225fda2aed2f0e81752f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename, int, int &gt; class</type>
            <declname>RT</declname>
            <defname>RT</defname>
          </param>
        </templateparamlist>
        <type>consteval bool</type>
        <definition>static consteval bool Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::canProvideResultType</definition>
        <argsstring>()</argsstring>
        <name>canProvideResultType</name>
        <qualifiedname>Ikarus::NonLinearElastic::canProvideResultType</qualifiedname>
        <briefdescription>
<para>Returns whether an element can provide a requested result. Can be used in constant expressions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RT</parametername>
</parameternamelist>
<parameterdescription>
<para>The type representing the requested result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean indicating if a requested result can be provided </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="254" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="254" bodyend="256"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="a01368_1ad7e34f32d4881e6bd7286bbdc4d6d2af" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateScalarImpl</definition>
        <argsstring>(const FERequirementType &amp;par, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const -&gt; ScalarType</argsstring>
        <name>calculateScalarImpl</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateScalarImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="292" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="292" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="a01368_1aa36fb72f92ed5b674f56b434aedc8845" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;::calculateVectorImpl</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template VectorType&lt; ScalarType &gt; force, const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>calculateVectorImpl</name>
        <qualifiedname>Ikarus::NonLinearElastic::calculateVectorImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template VectorType&lt; ScalarType &gt;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ScalarType &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="317" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="317" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="a01336_1a7ec1326b708d8c08fee05ca7b601f997" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt; , FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits  &gt;::calculateScalarImpl</definition>
        <argsstring>(const FERequirementType &amp;par, const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; &amp;dx=std::nullopt) const -&gt; ST</argsstring>
        <name>calculateScalarImpl</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::calculateScalarImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="73" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="73" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="a01336_1a9b91a057a51ab4487656d8bd94fdd234" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt; , FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits  &gt;::calculateVectorImpl</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template VectorType&lt; ST &gt; force, const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>calculateVectorImpl</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::calculateVectorImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template VectorType&lt; ST &gt;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="91" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="91" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="a01336_1aaed2462e36f9d119ff5c60867ebcaf62" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt; , FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits  &gt;::calculateMatrixImpl</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template MatrixType&lt;&gt; K, const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>calculateMatrixImpl</name>
        <qualifiedname>Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::calculateMatrixImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template MatrixType&lt;&gt;</type>
          <declname>K</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" line="112" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/volume.hh" bodystart="112" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="a01332_1a2576d38cb79bb0b5bf59f433fa7c1633" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt; , FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits  &gt;::calculateScalarImpl</definition>
        <argsstring>(const FERequirementType &amp;par, const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; &amp;dx=std::nullopt) const -&gt; ST</argsstring>
        <name>calculateScalarImpl</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::calculateScalarImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="81" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="81" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="a01332_1aabcfd5d855e2230fe90abb12a1ba8d2b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt; , FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits  &gt;::calculateVectorImpl</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template VectorType&lt; ST &gt; force, const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; dx=std::nullopt) const</argsstring>
        <name>calculateVectorImpl</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::calculateVectorImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template VectorType&lt; ST &gt;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Integration rule along the boundary</para>
<para>The value of the local function wrt the i-th coeff</para>
<para>Value of the Neumann data at the current position</para>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="115" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="115" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="a01332_1a38ba7822f8f38691c80a0b607e488d03" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt; , FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits  &gt;::calculateMatrixImpl</definition>
        <argsstring>(const FERequirementType &amp;par, typename Traits::template MatrixType&lt;&gt; K, const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; &amp;dx=std::nullopt) const</argsstring>
        <name>calculateMatrixImpl</name>
        <qualifiedname>Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::calculateMatrixImpl</qualifiedname>
        <param>
          <type>const <ref refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" kindref="member">FERequirementType</ref> &amp;</type>
          <declname>par</declname>
        </param>
        <param>
          <type>typename Traits::template MatrixType&lt;&gt;</type>
          <declname>K</declname>
        </param>
        <param>
          <type>const std::optional&lt; const Eigen::VectorX&lt; ST &gt; &gt; &amp;</type>
          <declname>dx</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" line="149" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh" bodystart="149" bodyend="150"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="a01368" kindref="compound">NonLinearElastic</ref> class represents a non-linear elastic finite element. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BH</parametername>
</parameternamelist>
<parameterdescription>
<para>The basis handler type for the finite element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MAT</parametername>
</parameternamelist>
<parameterdescription>
<para>The material type for the finite element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FER</parametername>
</parameternamelist>
<parameterdescription>
<para>The requirements for the finite element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useEigenRef</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean flag indicating whether to use <ref refid="a00338" kindref="compound">Eigen</ref> references. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useFlat</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean indicating if the type of the underlying basis is of the flat or the untouched version. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;</label>
        <link refid="a01232"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; BH, true, FERequirements&lt;&gt;, false &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::FEBase&lt; BH, useFlat, FER, useEigenRef &gt;</label>
        <link refid="a01232"/>
      </node>
      <node id="1">
        <label>Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;</label>
        <link refid="a01368"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Ikarus::Traction&lt; DFE, Traits &gt;</label>
        <link refid="a01332"/>
      </node>
      <node id="5">
        <label>Ikarus::Volume&lt; DFE, Traits &gt;</label>
        <link refid="a01336"/>
      </node>
      <node id="6">
        <label>Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;</label>
        <link refid="a01332"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;</label>
        <link refid="a01336"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Ikarus::FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;</label>
        <link refid="a01232"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; BH, true, FERequirements&lt;&gt;, false &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::FEBase&lt; BH, useFlat, FER, useEigenRef &gt;</label>
        <link refid="a01232"/>
      </node>
      <node id="1">
        <label>Ikarus::NonLinearElastic&lt; BH, MAT, FER, useEigenRef, useFlat &gt;</label>
        <link refid="a01368"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Ikarus::Traction&lt; DFE, Traits &gt;</label>
        <link refid="a01332"/>
      </node>
      <node id="5">
        <label>Ikarus::Volume&lt; DFE, Traits &gt;</label>
        <link refid="a01336"/>
      </node>
      <node id="6">
        <label>Ikarus::Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;</label>
        <link refid="a01332"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>Ikarus::Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;</label>
        <link refid="a01336"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" line="45" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/nonlinearelastic.hh" bodystart="50" bodyend="340"/>
    <listofallmembers>
      <member refid="a01368_1ac4658a7b0a61bc6aeedbbc82544f0d45" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Base</name></member>
      <member refid="a01368_1ac05c4360f5191ebb97b85998db6199f2" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>BasisHandler</name></member>
      <member refid="a01368_1a494e4dcdb1f53f01eeecb44500020f4c" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateAt</name></member>
      <member refid="a01368_1abe95aba4255becb35502caaa4442063c" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateMatrix</name></member>
      <member refid="a01336_1aaed2462e36f9d119ff5c60867ebcaf62" prot="protected" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateMatrixImpl</name></member>
      <member refid="a01332_1a38ba7822f8f38691c80a0b607e488d03" prot="protected" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateMatrixImpl</name></member>
      <member refid="a01368_1a674d61a7bf20d02f3fb0159cba90d1f4" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateScalar</name></member>
      <member refid="a01368_1ad7e34f32d4881e6bd7286bbdc4d6d2af" prot="protected" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateScalarImpl</name></member>
      <member refid="a01336_1a7ec1326b708d8c08fee05ca7b601f997" prot="protected" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateScalarImpl</name></member>
      <member refid="a01332_1a2576d38cb79bb0b5bf59f433fa7c1633" prot="protected" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateScalarImpl</name></member>
      <member refid="a01368_1ac0ebe847656a00b730d6df67d0eb4b3a" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateVector</name></member>
      <member refid="a01368_1aa36fb72f92ed5b674f56b434aedc8845" prot="protected" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>calculateVectorImpl</name></member>
      <member refid="a01336_1a9b91a057a51ab4487656d8bd94fdd234" prot="protected" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateVectorImpl</name></member>
      <member refid="a01332_1aabcfd5d855e2230fe90abb12a1ba8d2b" prot="protected" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>calculateVectorImpl</name></member>
      <member refid="a01368_1afca103d2265225fda2aed2f0e81752f0" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>canProvideResultType</name></member>
      <member refid="a01368_1ae22f726fd67e4e7f1853b21fbbadff64" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>displacementFunction</name></member>
      <member refid="a01368_1aa63c4e031affd156566457d226a4a083" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Element</name></member>
      <member refid="a01232_1a713a999716e92ec0f07a17e2cc6fc2af" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>FEBase</name></member>
      <member refid="a01368_1a80b1ba5b790fd0a38cccd20439124d76" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>FERequirementType</name></member>
      <member refid="a01368_1a382567a9fe4fac11bbdd1f12063a14d9" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>FlatBasis</name></member>
      <member refid="a01368_1a963408a64cc79fec48d67821a2e9a6a6" prot="private" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>geo_</name></member>
      <member refid="a01368_1af86286299b4ce7b9477d22a03c2f4704" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Geometry</name></member>
      <member refid="a01368_1a7d4ce3528b602e8573133440036dd058" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>geometry</name></member>
      <member refid="a01368_1a8907a656052a2353c2e5dc8d6e477bd9" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>getInternalEnergy</name></member>
      <member refid="a01368_1a58c79c2893de7f39b999e315f573b5f4" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>getStress</name></member>
      <member refid="a01232_1a0475c47f864b7ac2a19c69c679e565ff" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>GlobalIndex</name></member>
      <member refid="a01232_1a986d3b0d39a10f702bddff51023d38ef" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>gridElement</name></member>
      <member refid="a01232_1ae72a95377bf3b1c256d5429f37b0f504" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>GridElement</name></member>
      <member refid="a01368_1a28d423c3e7f434b7d776a3e3e4d498d4" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>GridView</name></member>
      <member refid="a01368_1a10d90cfa8c82533579c7ab0c403f331e" prot="private" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>localBasis_</name></member>
      <member refid="a01368_1a20937b8d29dbe3903394a284723b6c32" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>LocalBasisType</name></member>
      <member refid="a01232_1a53a30773e643a5bc8709ae74a2ba68d3" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>localView</name></member>
      <member refid="a01232_1acdf2172a6e355e863baacd9fbc757f8a" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>localView</name></member>
      <member refid="a01368_1ae23978873c7c62b0448e26fd3414cb3c" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>LocalView</name></member>
      <member refid="a01368_1a1b8af8f3c9f512efbe8496ce52059a79" prot="private" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>mat_</name></member>
      <member refid="a01368_1a55d99c371dc949e4c00324bcd5ddecfd" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Material</name></member>
      <member refid="a01368_1a25330e501f19feb4a91821464e3bbbee" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>materialTangent</name></member>
      <member refid="a01368_1ab7c8d3171e7b10131419a284feefe4aa" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>myDim</name></member>
      <member refid="a01368_1a3c87434ce03f479f107cd93ace1a7da5" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>NonLinearElastic</name></member>
      <member refid="a01368_1a5830d0db414b3fe1281a26a481e8925d" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>numberOfNodes</name></member>
      <member refid="a01368_1a502f72e77ec077fe629832914d8d5504" prot="private" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>numberOfNodes_</name></member>
      <member refid="a01368_1a4c9deac8c315fcaf9b8bb9de89e46da0" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>order</name></member>
      <member refid="a01368_1abc5c2c4ca11de5078c5e35046927e12e" prot="private" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>order_</name></member>
      <member refid="a01232_1a61ccfd550c88670bb02528e2ef00d6fd" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>size</name></member>
      <member refid="a01368_1a30a59eb29567415909f3d6165ebf26d1" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>strainFunction</name></member>
      <member refid="a01368_1a2ba2ed5c7258875dfa2083e401f7bd49" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>strainType</name></member>
      <member refid="a01332_1a3fa13c11a3d654ba3800c233856574a6" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Traction</name></member>
      <member refid="a01368_1aeae332fb38224eaa5c8ed1d8c79e4532" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>TractionType</name></member>
      <member refid="a01368_1a293a865db44f89553252be2da32c9991" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Traits</name></member>
      <member refid="a01336_1af67372d55f4036736affad41565639bd" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>Volume</name></member>
      <member refid="a01368_1ac482d71948b655196ad06dc23d57a467" prot="public" virt="non-virtual"><scope>Ikarus::NonLinearElastic</scope><name>VolumeType</name></member>
      <member refid="a01336_1a073fb2d3afae0bd3e0afe1c2534f9afd" prot="public" virt="non-virtual" ambiguityscope="Volume&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>worldDim</name></member>
      <member refid="a01332_1a1d2ad110e77cf497bc88ac1a8735fc97" prot="public" virt="non-virtual" ambiguityscope="Traction&lt; NonLinearElastic&lt; BH, MAT, FERequirements&lt;&gt;, false, true &gt;, FEBase&lt; BH, true, FERequirements&lt;&gt;, false &gt;::Traits &gt;::"><scope>Ikarus::NonLinearElastic</scope><name>worldDim</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
