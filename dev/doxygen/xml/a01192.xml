<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01192" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::PathFollowing</compoundname>
    <basecompoundref refid="a01568" prot="public" virt="non-virtual">Ikarus::IObservable&lt; ControlMessages &gt;</basecompoundref>
    <includes refid="a00257" local="no">ikarus/controlroutines/pathfollowing.hh</includes>
    <templateparamlist>
      <param>
        <type>typename NonLinearSolver</type>
      </param>
      <param>
        <type>typename PathFollowingType</type>
        <defval><ref refid="a01200" kindref="compound">ArcLength</ref></defval>
      </param>
      <param>
        <type>typename AdaptiveStepSizing</type>
        <defval><ref refid="a01176" kindref="compound">AdaptiveStepSizing::NoOp</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a01192_1acd87b2e657cfd2dac9d6e624bd419a8f" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; NonLinearSolver &gt;</type>
        <definition>std::shared_ptr&lt;NonLinearSolver&gt; Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;::nonLinearSolver</definition>
        <argsstring></argsstring>
        <name>nonLinearSolver</name>
        <qualifiedname>Ikarus::PathFollowing::nonLinearSolver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="112" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01192_1aa74fa7a59c89abb3626e9bbf2502705c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;::steps_</definition>
        <argsstring></argsstring>
        <name>steps_</name>
        <qualifiedname>Ikarus::PathFollowing::steps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="113" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01192_1a547fc1b66890216b1fa8afe0a64f595d" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;::stepSize_</definition>
        <argsstring></argsstring>
        <name>stepSize_</name>
        <qualifiedname>Ikarus::PathFollowing::stepSize_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="114" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01192_1a99215ea7f4a53012719d6760a2d9b892" prot="private" static="no" mutable="no">
        <type>PathFollowingType</type>
        <definition>PathFollowingType Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;::pathFollowingType_</definition>
        <argsstring></argsstring>
        <name>pathFollowingType_</name>
        <qualifiedname>Ikarus::PathFollowing::pathFollowingType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="115" column="23" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a01192_1ad7a68b6cd26c3e991fd2f7f6214fcfb7" prot="private" static="no" mutable="no">
        <type>AdaptiveStepSizing</type>
        <definition>AdaptiveStepSizing Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;::adaptiveStepSizing</definition>
        <argsstring></argsstring>
        <name>adaptiveStepSizing</name>
        <qualifiedname>Ikarus::PathFollowing::adaptiveStepSizing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="116" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01192_1ab9eed4b69c451cedf8ae4d0845a0f478" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>Ikarus::PathFollowing::name</qualifiedname>
        <briefdescription>
<para>The name of the <ref refid="a01192" kindref="compound">PathFollowing</ref> method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="85" column="20" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="a01192_1adc5522a16e0e190efacb4923a36de67e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;::PathFollowing</definition>
        <argsstring>(const std::shared_ptr&lt; NonLinearSolver &gt; &amp;p_nonLinearSolver, int steps, double stepSize, PathFollowingType p_pathFollowingType=ArcLength{}, AdaptiveStepSizing p_adaptiveStepSizing={})</argsstring>
        <name>PathFollowing</name>
        <qualifiedname>Ikarus::PathFollowing::PathFollowing</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; NonLinearSolver &gt; &amp;</type>
          <declname>p_nonLinearSolver</declname>
        </param>
        <param>
          <type>int</type>
          <declname>steps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>PathFollowingType</type>
          <declname>p_pathFollowingType</declname>
          <defval><ref refid="a01200" kindref="compound">ArcLength</ref>{}</defval>
        </param>
        <param>
          <type>AdaptiveStepSizing</type>
          <declname>p_adaptiveStepSizing</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="a01192" kindref="compound">PathFollowing</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_nonLinearSolver</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared pointer to the nonlinear solver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of steps in the control routine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each step. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pathFollowingType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the path-following function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_adaptiveStepSizing</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the adaptive step sizing strategy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="96" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="96" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="a01192_1a1da5f7921dc9d16774ad45c7897d97f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a01184" kindref="compound">ControlInformation</ref></type>
        <definition>ControlInformation Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <qualifiedname>Ikarus::PathFollowing::run</qualifiedname>
    <requiresclause>(Impl::checkPathFollowingTemplates&lt;NonLinearSolver,PathFollowingType,AdaptiveStepSizing&gt;())    </requiresclause>
        <briefdescription>
<para>Executes the <ref refid="a01192" kindref="compound">PathFollowing</ref> routine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="a01184" kindref="compound">ControlInformation</ref> structure containing information about the control results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Initializing solver</para>
<para>Calculate predictor for a particular step</para>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="109" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.inl" bodystart="27" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1ae182a206a72de6bc4585152d32332349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::subscribe</definition>
        <argsstring>(ControlMessages message, std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>subscribe</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::subscribe</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01564" kindref="compound">IObserver</ref>&lt; <ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to subscribe to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="137" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="221" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a13bd8d73b485186680f640786e2682e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::subscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::subscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01564" kindref="compound">IObserver</ref>&lt; <ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Subscribe an observer to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="142" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a026462a1a050728e37bc24e33d2edd9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::subscribeAll</definition>
        <argsstring>(std::initializer_list&lt; std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; &gt; observers)</argsstring>
        <name>subscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::subscribeAll</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::shared_ptr&lt; <ref refid="a01564" kindref="compound">IObserver</ref>&lt; <ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt; &gt;</type>
          <declname>observers</declname>
        </param>
        <briefdescription>
<para>Subscribe multiple observers to receive notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observers to be subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="147" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="234" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a49622286d2b15f0b8a2b25275e6bc771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::unSubscribe</definition>
        <argsstring>(ControlMessages message, std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>unSubscribe</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::unSubscribe</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01564" kindref="compound">IObserver</ref>&lt; <ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to unsubscribe from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="153" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a5c20f7eab2233d085071a4fd3b44cbda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::unSubscribeAll</definition>
        <argsstring>(std::shared_ptr&lt; IObserver&lt; ControlMessages &gt; &gt; observer)</argsstring>
        <name>unSubscribeAll</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::unSubscribeAll</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="a01564" kindref="compound">IObserver</ref>&lt; <ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref> &gt; &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>Unsubscribe an observer from receiving notifications for all message types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observer</parametername>
</parameternamelist>
<parameterdescription>
<para>The observer to be unsubscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="158" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="163" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="254" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1ac035ba934c33e090c4a45128ac13f190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, ScalarType val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a floating-point value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the floating-point value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating-point value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="172" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, int val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="179" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="269" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a2f93322aa7327069dd4469983933bd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, const std::string &amp;val)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="186" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="276" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1ae0c6cec757e540f22b65fce1f782e380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, int val1, double val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer and a double value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="194" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="283" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1a72e3156874ce81a1c7548b9f74db522c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, int val1, const std::string &amp;val2)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an integer value and a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="202" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="290" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="a01568_1ac72b261cd2af7f59e98f1504814bc785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObservable&lt; ControlMessages  &gt;::notify</definition>
        <argsstring>(ControlMessages message, Eigen::VectorX&lt; ScalarType &gt; vec)</argsstring>
        <name>notify</name>
        <qualifiedname>Ikarus::IObservable&lt; ControlMessages &gt;::notify</qualifiedname>
        <param>
          <type><ref refid="a00310_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Notify observers about a specific message type with an Eigen::VectorX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements in the Eigen::VectorX. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to notify about. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::VectorX to be sent with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="211" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="298" bodyend="302"/>
      </memberdef>
      </sectiondef>
    <requiresclause>( Impl::checkPathFollowingTemplates&lt;NonLinearSolver, PathFollowingType, AdaptiveStepSizing&gt;())    </requiresclause>
    <briefdescription>
<para>The <ref refid="a01192" kindref="compound">PathFollowing</ref> control routine for path-following analysis. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents the <ref refid="a01192" kindref="compound">PathFollowing</ref> control routine, which utilizes a nonlinear solver, such as Newton&apos;s method with scalar subsidiary function, which has to be fulfilled for solving the system along a predefined path.</para>
<para>Consider a non-linear system of equations <formula id="4">\[\mathbf{R}: \require{cases}\begin{cases}\mathbb{R}^n \times \mathbb{R} &amp;\rightarrow \mathbb{R}^n
\\ (\mathbf{D},\lambda)
&amp;\mapsto \mathbf{R}(\mathbf{D},\lambda) \end{cases}.\]</formula></para>
<para>Then in each step <formula id="5">$k+1$</formula> of the path following algorithm, the following problem is solved <formula id="6">\[ \begin{align}
\mathbf{R}(\mathbf{D}_k+ \mathrm{D}\mathbf{D}, \lambda_k+ \mathrm{D} \lambda) &amp;= \mathbf{0} \\
f(\mathrm{D}\mathbf{D}, \mathrm{D} \lambda) &amp;= 0 \end{align} \]</formula></para>
<para>where <formula id="7">$\mathrm{D}\mathbf{D}$</formula> is the increment of the solution vector and <formula id="8">$\mathrm{D} \lambda$</formula> is the load factor increment. The subsidiary function <formula id="9">$f$</formula> is provided by the user and needs to fulfill the concept Concepts::PathFollowingStrategy. This subsidiary function makes the given problem well-posed.</para>
<para>Currently the following subsidiary functions are implemented <ref refid="a01204" kindref="compound">LoadControlSubsidiaryFunction</ref>, <ref refid="a01200" kindref="compound">ArcLength</ref> and <ref refid="a01208" kindref="compound">DisplacementControl</ref></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NonLinearSolver</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the nonlinear solver used in the control routine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PathFollowingType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the path-following strategy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="a00317" kindref="compound">AdaptiveStepSizing</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the adaptive step sizing strategy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; ControlMessages &gt;</label>
        <link refid="a01568"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a01568"/>
      </node>
      <node id="1">
        <label>Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;</label>
        <link refid="a01192"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Ikarus::IObservable&lt; ControlMessages &gt;</label>
        <link refid="a01568"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObservable&lt; MessageType &gt;</label>
        <link refid="a01568"/>
      </node>
      <node id="1">
        <label>Ikarus::PathFollowing&lt; NonLinearSolver, PathFollowingType, AdaptiveStepSizing &gt;</label>
        <link refid="a01192"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" line="81" column="2" bodyfile="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowing.hh" bodystart="82" bodyend="117"/>
    <listofallmembers>
      <member refid="a01192_1ad7a68b6cd26c3e991fd2f7f6214fcfb7" prot="private" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>adaptiveStepSizing</name></member>
      <member refid="a01568_1ac8058d5b1ebb462a10712ba598154e23" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>IObservable</name></member>
      <member refid="a01192_1ab9eed4b69c451cedf8ae4d0845a0f478" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>name</name></member>
      <member refid="a01192_1acd87b2e657cfd2dac9d6e624bd419a8f" prot="private" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>nonLinearSolver</name></member>
      <member refid="a01568_1a4bce3750aa7d52aff9baf122a54e16b5" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01568_1ac035ba934c33e090c4a45128ac13f190" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01568_1a47ac8ae7cc4e9304cfb220f1d93ce1fc" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01568_1a2f93322aa7327069dd4469983933bd16" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01568_1ae0c6cec757e540f22b65fce1f782e380" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01568_1a72e3156874ce81a1c7548b9f74db522c" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01568_1ac72b261cd2af7f59e98f1504814bc785" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>notify</name></member>
      <member refid="a01192_1adc5522a16e0e190efacb4923a36de67e" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>PathFollowing</name></member>
      <member refid="a01192_1a99215ea7f4a53012719d6760a2d9b892" prot="private" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>pathFollowingType_</name></member>
      <member refid="a01192_1a1da5f7921dc9d16774ad45c7897d97f0" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>run</name></member>
      <member refid="a01192_1aa74fa7a59c89abb3626e9bbf2502705c" prot="private" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>steps_</name></member>
      <member refid="a01192_1a547fc1b66890216b1fa8afe0a64f595d" prot="private" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>stepSize_</name></member>
      <member refid="a01568_1ae182a206a72de6bc4585152d32332349" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>subscribe</name></member>
      <member refid="a01568_1a13bd8d73b485186680f640786e2682e5" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>subscribeAll</name></member>
      <member refid="a01568_1a026462a1a050728e37bc24e33d2edd9c" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>subscribeAll</name></member>
      <member refid="a01568_1a49622286d2b15f0b8a2b25275e6bc771" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>unSubscribe</name></member>
      <member refid="a01568_1a5c20f7eab2233d085071a4fd3b44cbda" prot="public" virt="non-virtual"><scope>Ikarus::PathFollowing</scope><name>unSubscribeAll</name></member>
      <member refid="a01568_1ad1fe15b31cccec8e44c695af550938ed" prot="public" virt="virtual"><scope>Ikarus::PathFollowing</scope><name>~IObservable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
