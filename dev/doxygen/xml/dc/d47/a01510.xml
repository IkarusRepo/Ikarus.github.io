<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="dc/d47/a01510" kind="class" language="C++" prot="public">
    <compoundname>Ikarus::ControlSubsamplingVertexVTKWriter</compoundname>
    <basecompoundref refid="da/da6/a01522" prot="public" virt="non-virtual">Ikarus::IObserver&lt; ControlMessages &gt;</basecompoundref>
    <includes refid="d3/db1/a00200" local="no">ikarus/utils/observer/controlvtkwriter.hh</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="d8/df1/a01414" kindref="compound">Basis</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="dc/d47/a01510_1adf8e3da64cce5e7ab1eac3d9d86383b1" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::components</definition>
        <argsstring></argsstring>
        <name>components</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::components</qualifiedname>
        <initializer>= Basis::LocalView::Tree::degree() == 0 ? 1 : Basis::LocalView::Tree::degree()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="32" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dc/d47/a01510_1adbbc1938988978c29c8d7cd9ed37f2fb" prot="private" static="no" mutable="no">
        <type><ref refid="d8/df1/a01414" kindref="compound">Basis</ref> const  *</type>
        <definition>Basis const* Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::basis</definition>
        <argsstring></argsstring>
        <name>basis</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::basis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="92" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d47/a01510_1a1e8805e38384d29b624346bab98692aa" prot="private" static="no" mutable="no">
        <type>Dune::SubsamplingVTKWriter&lt; typename <ref refid="d8/df1/a01414_1a066e94e24a8000ee0f47fff24c5c09b4" kindref="member">Basis::GridView</ref> &gt;</type>
        <definition>Dune::SubsamplingVTKWriter&lt;typename Basis::GridView&gt; Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::vtkWriter</definition>
        <argsstring></argsstring>
        <name>vtkWriter</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::vtkWriter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="93" column="32" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d47/a01510_1a3eb4522d5e5fd498fb9dbfbf7089f430" prot="private" static="no" mutable="no">
        <type>Eigen::VectorXd const  *</type>
        <definition>Eigen::VectorXd const* Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::solution</definition>
        <argsstring></argsstring>
        <name>solution</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::solution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="94" column="27" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d47/a01510_1ad83d3662511414835be7def5fad8d6f0" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::step</definition>
        <argsstring></argsstring>
        <name>step</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::step</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="95" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d47/a01510_1a657459a8fa6c83d018f874e12a0c9c90" prot="private" static="no" mutable="no">
        <type>Dune::VTK::FieldInfo</type>
        <definition>Dune::VTK::FieldInfo Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::fieldInfo</definition>
        <argsstring></argsstring>
        <name>fieldInfo</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::fieldInfo</qualifiedname>
        <initializer>{&quot;Default&quot;, Dune::VTK::FieldInfo::Type::scalar, 1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="96" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d47/a01510_1a8a222336492105c6724d10a16c7c6a3d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::prefixString</definition>
        <argsstring></argsstring>
        <name>prefixString</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::prefixString</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="97" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d47/a01510_1ace46c1a492224b02f5090aebce0f990e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::isFieldInfoSet</definition>
        <argsstring></argsstring>
        <name>isFieldInfoSet</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::isFieldInfoSet</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="98" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/d47/a01510_1ac1580434b973badf5715358d5365a2b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::ControlSubsamplingVertexVTKWriter</definition>
        <argsstring>(const Basis &amp;p_basis, const Eigen::VectorXd &amp;sol, int refinementLevels=0)</argsstring>
        <name>ControlSubsamplingVertexVTKWriter</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::ControlSubsamplingVertexVTKWriter</qualifiedname>
        <param>
          <type>const <ref refid="d8/df1/a01414" kindref="compound">Basis</ref> &amp;</type>
          <declname>p_basis</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>refinementLevels</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="dc/d47/a01510" kindref="compound">ControlSubsamplingVertexVTKWriter</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the VTK writer with the provided basis, solution, and refinement levels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_basis</parametername>
</parameternamelist>
<parameterdescription>
<para>The grid basis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>The solution vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refinementLevels</parametername>
</parameternamelist>
<parameterdescription>
<para>The refinement levels for subsampling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="44" column="5" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="44" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="dc/d47/a01510_1a351251161ca8fbb31aaea0cffaac3e90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::setFieldInfo</definition>
        <argsstring>(std::string &amp;&amp;name, Dune::VTK::FieldInfo::Type type, std::size_t size, Dune::VTK::Precision prec=Dune::VTK::Precision::float32)</argsstring>
        <name>setFieldInfo</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::setFieldInfo</qualifiedname>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Dune::VTK::FieldInfo::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>Dune::VTK::Precision</type>
          <declname>prec</declname>
          <defval>Dune::VTK::Precision::float32</defval>
        </param>
        <briefdescription>
<para>Set field information for the VTK file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prec</parametername>
</parameternamelist>
<parameterdescription>
<para>The precision of the field. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The field information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="56" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="dc/d47/a01510_1ab19f208c66b4af13d7248800d4fd1179" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::setFileNamePrefix</definition>
        <argsstring>(std::string &amp;&amp;p_name)</argsstring>
        <name>setFileNamePrefix</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::setFileNamePrefix</qualifiedname>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>p_name</declname>
        </param>
        <briefdescription>
<para>Set the file name prefix for VTK files. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The file name prefix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="67" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="dc/d47/a01510_1aa0c6914ffa6bcdbf95d0e5a815ca44ef" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;::updateImpl</definition>
        <argsstring>(ControlMessages message) final</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::ControlSubsamplingVertexVTKWriter::updateImpl</qualifiedname>
        <reimplements refid="da/da6/a01522_1a478eaa94650cf462a050e28ecf098773">updateImpl</reimplements>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Implementation of the update method. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is called upon receiving a SOLUTION_CHANGED control message. It writes VTK files with subsampling based on the provided field information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The received control message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="77" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="77" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1a8c171635a257ce7fe905a58337717efe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(ControlMessages message)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="34" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1a0f235d3f9f49582c0902dfcd5217f4a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(ControlMessages message, double val)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message and a double value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="44" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1a97bf3fd861a8eac696a97ec56d953b47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(ControlMessages message, int val)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message and an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="54" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1a05a6a76b6875406ae8ff5e05f2662d57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(ControlMessages message, const std::string &amp;val)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message and a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="64" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1ab87bc0dab48de914d7f5221fb9c3477b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(ControlMessages message, int val1, double val2)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message and two values (integer and double). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value associated with the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="75" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1a5d2fb507095933199fab726c17e01bcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(ControlMessages message, int val1, const std::string &amp;val2)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message, an integer value, and a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val1</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer value associated with the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val2</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="86" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1a20e3859480f6cab562f33ce9da888380" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::IObserver&lt; ControlMessages  &gt;::update</definition>
        <argsstring>(ControlMessages message, const Eigen::VectorXd &amp;vec)</argsstring>
        <name>update</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::update</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Update method for receiving notifications with a message and an Eigen::VectorXd. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be received. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::VectorXd associated with the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="96" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="96" bodyend="99"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="da/da6/a01522_1a663889f78a7dbd3561fa6a497e023a23" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(ControlMessages message, double val)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="103" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1adc61a4813394bdde201018db198544a3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(ControlMessages message, int val)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="104" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1ae97b76e37ab99f985a0ef71f4a9efd37" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(ControlMessages message, const std::string &amp;val)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <reimplementedby refid="db/d57/a01506_1a9c8c660297d060779e05303c63c1b4be">updateImpl</reimplementedby>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="105" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1af53b8b154a887fce37fee355b0244c21" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(ControlMessages message, int val1, const std::string &amp;val2)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <reimplementedby refid="db/d57/a01506_1a78f7ab50c3ad889e9dafe84ecc59bb9f">updateImpl</reimplementedby>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="106" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1a4d0a13cbe1104d10c4ec5e928f64ab4b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(ControlMessages message, int val1, double val2)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <reimplementedby refid="db/d57/a01506_1aca92cd9bf83a7575260a015a646aca8c">updateImpl</reimplementedby>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="107" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="da/da6/a01522_1a4b7267849be75994c85c8ebe7af10465" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::IObserver&lt; ControlMessages  &gt;::updateImpl</definition>
        <argsstring>(ControlMessages message, const Eigen::VectorXd &amp;vec)</argsstring>
        <name>updateImpl</name>
        <qualifiedname>Ikarus::IObserver&lt; ControlMessages &gt;::updateImpl</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga35fa62fd2d4186a9750af3d0692f2893" kindref="member">ControlMessages</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" line="108" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observer.hh" bodystart="108" bodyend="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="dc/d47/a01510" kindref="compound">ControlSubsamplingVertexVTKWriter</ref> class for writing VTK files with subsampling based on control messages. </para>
    </briefdescription>
    <detaileddescription>
<para>It inherits from the <ref refid="da/da6/a01522" kindref="compound">IObserver</ref> class and is specifically designed for handling SOLUTION_CHANGED messages.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="d8/df1/a01414" kindref="compound">Basis</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the grid basis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Ikarus::IObserver&lt; ControlMessages &gt;</label>
        <link refid="da/da6/a01522"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;</label>
        <link refid="dc/d47/a01510"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObserver&lt; MessageType &gt;</label>
        <link refid="da/da6/a01522"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Ikarus::IObserver&lt; ControlMessages &gt;</label>
        <link refid="da/da6/a01522"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; ControlMessages &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Ikarus::ControlSubsamplingVertexVTKWriter&lt; Basis &gt;</label>
        <link refid="dc/d47/a01510"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Ikarus::IObserver&lt; MessageType &gt;</label>
        <link refid="da/da6/a01522"/>
      </node>
    </collaborationgraph>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" line="31" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/controlvtkwriter.hh" bodystart="31" bodyend="99"/>
    <listofallmembers>
      <member refid="dc/d47/a01510_1adbbc1938988978c29c8d7cd9ed37f2fb" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>basis</name></member>
      <member refid="dc/d47/a01510_1adf8e3da64cce5e7ab1eac3d9d86383b1" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>components</name></member>
      <member refid="dc/d47/a01510_1ac1580434b973badf5715358d5365a2b6" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>ControlSubsamplingVertexVTKWriter</name></member>
      <member refid="dc/d47/a01510_1a657459a8fa6c83d018f874e12a0c9c90" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>fieldInfo</name></member>
      <member refid="dc/d47/a01510_1ace46c1a492224b02f5090aebce0f990e" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>isFieldInfoSet</name></member>
      <member refid="dc/d47/a01510_1a8a222336492105c6724d10a16c7c6a3d" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>prefixString</name></member>
      <member refid="dc/d47/a01510_1a351251161ca8fbb31aaea0cffaac3e90" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>setFieldInfo</name></member>
      <member refid="dc/d47/a01510_1ab19f208c66b4af13d7248800d4fd1179" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>setFileNamePrefix</name></member>
      <member refid="dc/d47/a01510_1a3eb4522d5e5fd498fb9dbfbf7089f430" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>solution</name></member>
      <member refid="dc/d47/a01510_1ad83d3662511414835be7def5fad8d6f0" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>step</name></member>
      <member refid="da/da6/a01522_1a8c171635a257ce7fe905a58337717efe" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="da/da6/a01522_1a0f235d3f9f49582c0902dfcd5217f4a1" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="da/da6/a01522_1a97bf3fd861a8eac696a97ec56d953b47" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="da/da6/a01522_1a05a6a76b6875406ae8ff5e05f2662d57" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="da/da6/a01522_1ab87bc0dab48de914d7f5221fb9c3477b" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="da/da6/a01522_1a5d2fb507095933199fab726c17e01bcf" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="da/da6/a01522_1a20e3859480f6cab562f33ce9da888380" prot="public" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>update</name></member>
      <member refid="dc/d47/a01510_1aa0c6914ffa6bcdbf95d0e5a815ca44ef" prot="public" virt="virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="da/da6/a01522_1a663889f78a7dbd3561fa6a497e023a23" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="da/da6/a01522_1adc61a4813394bdde201018db198544a3" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="da/da6/a01522_1ae97b76e37ab99f985a0ef71f4a9efd37" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="da/da6/a01522_1af53b8b154a887fce37fee355b0244c21" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="da/da6/a01522_1a4d0a13cbe1104d10c4ec5e928f64ab4b" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="da/da6/a01522_1a4b7267849be75994c85c8ebe7af10465" prot="protected" virt="virtual" ambiguityscope="IObserver&lt; ControlMessages &gt;::"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>updateImpl</name></member>
      <member refid="dc/d47/a01510_1a1e8805e38384d29b624346bab98692aa" prot="private" virt="non-virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>vtkWriter</name></member>
      <member refid="da/da6/a01522_1afda55d0cee706fa7a2df824e2a149a9e" prot="public" virt="virtual"><scope>Ikarus::ControlSubsamplingVertexVTKWriter</scope><name>~IObserver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
