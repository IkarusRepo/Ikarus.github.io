<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="da/d50/a00301" kind="namespace" language="C++">
    <compoundname>Ikarus</compoundname>
    <innerclass refid="de/d04/a01209" prot="public">Ikarus::AffordanceCollectionImpl</innerclass>
    <innerclass refid="d7/d68/a01413" prot="public">Ikarus::AlgoInfo</innerclass>
    <innerclass refid="d3/dd3/a01185" prot="public">Ikarus::ArcLength</innerclass>
    <innerclass refid="d4/d10/a01197" prot="public">Ikarus::AutoDiffFE</innerclass>
    <innerclass refid="d2/d9b/a01433" prot="public">Ikarus::Basis</innerclass>
    <innerclass refid="dc/d2a/a01333" prot="public">Ikarus::BulkModulusAndLamesFirstParameter</innerclass>
    <innerclass refid="d7/daf/a01169" prot="public">Ikarus::ControlInformation</innerclass>
    <innerclass refid="db/de9/a01525" prot="public">Ikarus::ControlLogger</innerclass>
    <innerclass refid="db/dce/a01529" prot="public">Ikarus::ControlSubsamplingVertexVTKWriter</innerclass>
    <innerclass refid="de/da0/a01341" prot="public">Ikarus::ConvertLameConstants</innerclass>
    <innerclass refid="dc/d9e/a01305" prot="public">Ikarus::DefaultMembraneStrain</innerclass>
    <innerclass refid="d9/d25/a01157" prot="public">Ikarus::DenseFlatAssembler</innerclass>
    <innerclass refid="d9/d8b/a01469" prot="public">Ikarus::DirichletValues</innerclass>
    <innerclass refid="dd/d43/a01193" prot="public">Ikarus::DisplacementControl</innerclass>
    <innerclass refid="de/d34/a01261" prot="public">Ikarus::EASH1E21</innerclass>
    <innerclass refid="d9/de7/a01257" prot="public">Ikarus::EASH1E9</innerclass>
    <innerclass refid="d1/d31/a01245" prot="public">Ikarus::EASQ1E4</innerclass>
    <innerclass refid="d3/d7b/a01249" prot="public">Ikarus::EASQ1E5</innerclass>
    <innerclass refid="d3/d0b/a01253" prot="public">Ikarus::EASQ1E7</innerclass>
    <innerclass refid="da/dd8/a01265" prot="public">Ikarus::EnhancedAssumedStrains</innerclass>
    <innerclass refid="db/d1c/a01229" prot="public">Ikarus::FErequirements</innerclass>
    <innerclass refid="d8/d53/a01225" prot="public">Ikarus::FERequirements</innerclass>
    <innerclass refid="d3/d07/a01241" prot="public">Ikarus::FETraits</innerclass>
    <innerclass refid="de/df6/a01141" prot="public">Ikarus::FlatAssemblerBase</innerclass>
    <innerclass refid="d1/de4/a01481" prot="public">Ikarus::FlatIndexMergingStrategy</innerclass>
    <innerclass refid="d4/d39/a01485" prot="public">Ikarus::FlatIndexMergingStrategy&lt; Dune::Functions::BasisFactory::BlockedInterleaved &gt;</innerclass>
    <innerclass refid="d2/dac/a01489" prot="public">Ikarus::FlatIndexMergingStrategy&lt; Dune::Functions::BasisFactory::BlockedLexicographic &gt;</innerclass>
    <innerclass refid="d8/d67/a01477" prot="public">Ikarus::FlatPreBasis</innerclass>
    <innerclass refid="d2/d41/a01493" prot="public">Ikarus::FlatPreBasis&lt; Dune::Functions::CompositePreBasis&lt; IMS, SPB... &gt; &gt;</innerclass>
    <innerclass refid="db/d1e/a01497" prot="public">Ikarus::FlatPreBasis&lt; Dune::Functions::PowerPreBasis&lt; IMS, SPB, C &gt; &gt;</innerclass>
    <innerclass refid="d1/d62/a01533" prot="public">Ikarus::GenericObserver</innerclass>
    <innerclass refid="dc/dce/a01505" prot="public">Ikarus::IkarusInstance</innerclass>
    <innerclass refid="dd/dba/a01545" prot="public">Ikarus::IObservable</innerclass>
    <innerclass refid="d5/dc8/a01541" prot="public">Ikarus::IObserver</innerclass>
    <innerclass refid="d6/d16/a01269" prot="public">Ikarus::KirchhoffLoveShell</innerclass>
    <innerclass refid="db/dec/a01337" prot="public">Ikarus::LamesFirstParameterAndShearModulus</innerclass>
    <innerclass refid="d2/d1d/a01277" prot="public">Ikarus::LinearElastic</innerclass>
    <innerclass refid="d1/d1a/a01285" prot="public">Ikarus::LinearElasticityT</innerclass>
    <innerclass refid="d3/dea/a01377" prot="public">Ikarus::LinearSolverTemplate</innerclass>
    <innerclass refid="d7/d0c/a01173" prot="public">Ikarus::LoadControl</innerclass>
    <innerclass refid="d3/d10/a01189" prot="public">Ikarus::LoadControlSubsidiaryFunction</innerclass>
    <innerclass refid="d5/d6f/a01281" prot="public">Ikarus::Material</innerclass>
    <innerclass refid="d9/dda/a01289" prot="public">Ikarus::NeoHookeT</innerclass>
    <innerclass refid="d3/d92/a01393" prot="public">Ikarus::NewtonRaphson</innerclass>
    <innerclass refid="d0/d95/a01389" prot="public">Ikarus::NewtonRaphsonSettings</innerclass>
    <innerclass refid="dc/df4/a01401" prot="public">Ikarus::NewtonRaphsonWithSubsidiaryFunction</innerclass>
    <innerclass refid="d7/d1c/a01397" prot="public">Ikarus::NewtonRaphsonWithSubsidiaryFunctionSettings</innerclass>
    <innerclass refid="db/d4b/a01309" prot="public">Ikarus::NonLinearElastic</innerclass>
    <innerclass refid="dc/d96/a01517" prot="public">Ikarus::NonLinearOperator</innerclass>
    <innerclass refid="d4/d1a/a01405" prot="public">Ikarus::NonLinearSolverInformation</innerclass>
    <innerclass refid="df/d3f/a01537" prot="public">Ikarus::NonLinearSolverLogger</innerclass>
    <innerclass refid="dc/d98/a01177" prot="public">Ikarus::PathFollowing</innerclass>
    <innerclass refid="de/df7/a01201" prot="public">Ikarus::PowerBasisFE</innerclass>
    <innerclass refid="d2/d1f/a01361" prot="public">Ikarus::ResultFunction</innerclass>
    <innerclass refid="dc/dab/a01237" prot="public">Ikarus::ResultRequirements</innerclass>
    <innerclass refid="d6/da1/a01233" prot="public">Ikarus::ResultTypeMap</innerclass>
    <innerclass refid="d9/d65/a01145" prot="public">Ikarus::ScalarAssembler</innerclass>
    <innerclass refid="de/d61/a01205" prot="public">Ikarus::ScalarFieldFE</innerclass>
    <innerclass refid="dc/d06/a01153" prot="public">Ikarus::SparseFlatAssembler</innerclass>
    <innerclass refid="de/daf/a01417" prot="public">Ikarus::Stats</innerclass>
    <innerclass refid="dc/dd5/a01293" prot="public">Ikarus::StVenantKirchhoffT</innerclass>
    <innerclass refid="de/db5/a01181" prot="public">Ikarus::SubsidiaryArgs</innerclass>
    <innerclass refid="de/d90/a01313" prot="public">Ikarus::TraitsFromLocalView</innerclass>
    <innerclass refid="d4/d20/a01421" prot="public">Ikarus::TrustRegion</innerclass>
    <innerclass refid="d9/d6e/a01409" prot="public">Ikarus::TrustRegionSettings</innerclass>
    <innerclass refid="d3/d07/a01301" prot="public">Ikarus::VanishingStress</innerclass>
    <innerclass refid="d8/d02/a01149" prot="public">Ikarus::VectorFlatAssembler</innerclass>
    <innerclass refid="dd/d5d/a01325" prot="public">Ikarus::YoungsModulusAndBulkModulus</innerclass>
    <innerclass refid="df/d29/a01329" prot="public">Ikarus::YoungsModulusAndLamesFirstParameter</innerclass>
    <innerclass refid="df/db8/a01317" prot="public">Ikarus::YoungsModulusAndPoissonsRatio</innerclass>
    <innerclass refid="d9/d5c/a01321" prot="public">Ikarus::YoungsModulusAndShearModulus</innerclass>
    <innernamespace refid="d0/d61/a00302">Ikarus::AdaptiveStepSizing</innernamespace>
    <innernamespace refid="d3/d07/a00305">Ikarus::AffordanceCollections</innernamespace>
    <innernamespace refid="dd/db3/a00313">Ikarus::Concepts</innernamespace>
    <innernamespace refid="d8/d17/a00304">Ikarus::FEHelper</innernamespace>
    <innernamespace refid="d4/d6f/a00315">Ikarus::plot</innernamespace>
    <innernamespace refid="d1/d67/a00310">Ikarus::Python</innernamespace>
    <innernamespace refid="d0/da2/a00307">Ikarus::ResultEvaluators</innernamespace>
    <innernamespace refid="da/de0/a00317">Ikarus::traits</innernamespace>
    <innernamespace refid="d1/d5d/a00311">Ikarus::utils</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d6/d7f/a00287_1ga8a33210894e12be4feb3d96fdfde215c" prot="public" static="no" strong="yes">
        <type></type>
        <name>ScalarAffordances</name>
        <qualifiedname>Ikarus::ScalarAffordances</qualifiedname>
        <enumvalue id="d6/d7f/a00287_1gga8a33210894e12be4feb3d96fdfde215ca19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga8a33210894e12be4feb3d96fdfde215ca9a280b29988e2eac8c0767e0fcefb49c" prot="public">
          <name>noAffordance</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga8a33210894e12be4feb3d96fdfde215ca814f34f472acef493e9ecf0ffccdcae6" prot="public">
          <name>mechanicalPotentialEnergy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga8a33210894e12be4feb3d96fdfde215cae45c0886135e58c01a313bda2d69e29a" prot="public">
          <name>microMagneticPotentialEnergy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga8a33210894e12be4feb3d96fdfde215cab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A strongly typed enum class representing the scalar affordance. </para>
        </briefdescription>
        <detaileddescription>
<para>ScalarAffordances </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="34" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="enum" id="d6/d7f/a00287_1ga122268ff4d2c0beee58799d85ba5e52a" prot="public" static="no" strong="yes">
        <type></type>
        <name>VectorAffordances</name>
        <qualifiedname>Ikarus::VectorAffordances</qualifiedname>
        <enumvalue id="d6/d7f/a00287_1gga122268ff4d2c0beee58799d85ba5e52aa19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga122268ff4d2c0beee58799d85ba5e52aa9a280b29988e2eac8c0767e0fcefb49c" prot="public">
          <name>noAffordance</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga122268ff4d2c0beee58799d85ba5e52aa2c05161a7e67e946ddc889571aac4e89" prot="public">
          <name>forces</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga122268ff4d2c0beee58799d85ba5e52aa3cc975e7798ac76d6af4f624e23c6ddc" prot="public">
          <name>microMagneticForces</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga122268ff4d2c0beee58799d85ba5e52aab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A strongly typed enum class representing the vector affordance. </para>
        </briefdescription>
        <detaileddescription>
<para>VectorAffordances </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="45" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="enum" id="d6/d7f/a00287_1ga52cb89165daabb500f6e2eb68ddd76ee" prot="public" static="no" strong="yes">
        <type></type>
        <name>MatrixAffordances</name>
        <qualifiedname>Ikarus::MatrixAffordances</qualifiedname>
        <enumvalue id="d6/d7f/a00287_1gga52cb89165daabb500f6e2eb68ddd76eea19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga52cb89165daabb500f6e2eb68ddd76eea9a280b29988e2eac8c0767e0fcefb49c" prot="public">
          <name>noAffordance</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga52cb89165daabb500f6e2eb68ddd76eea086e8b527490b8abe606a8dd76586ab1" prot="public">
          <name>stiffness</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga52cb89165daabb500f6e2eb68ddd76eea3a130b44dd6ff9351e7734ac33096b62" prot="public">
          <name>materialstiffness</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga52cb89165daabb500f6e2eb68ddd76eeae15aaa3bcdfc63653ecc7de3f1d4794b" prot="public">
          <name>geometricstiffness</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga52cb89165daabb500f6e2eb68ddd76eeadaa7ff7d704732b763943e3355764532" prot="public">
          <name>stiffnessdiffBucklingVector</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga52cb89165daabb500f6e2eb68ddd76eea1b0fce0a361af9d6e59694b4c51524f9" prot="public">
          <name>microMagneticHessian</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga52cb89165daabb500f6e2eb68ddd76eead90ccffa01275a7a7795fb6d1274e75f" prot="public">
          <name>mass</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d7f/a00287_1gga52cb89165daabb500f6e2eb68ddd76eeab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A strongly typed enum class representing the matrix affordance. </para>
        </briefdescription>
        <detaileddescription>
<para>MatrixAffordances </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="60" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="enum" id="da/ddc/a00288_1ga0c1577fd05efee8475b0f7fef795bbbe" prot="public" static="no" strong="yes">
        <type></type>
        <name>FEParameter</name>
        <qualifiedname>Ikarus::FEParameter</qualifiedname>
        <enumvalue id="da/ddc/a00288_1gga0c1577fd05efee8475b0f7fef795bbbea19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga0c1577fd05efee8475b0f7fef795bbbea298c62e2f9918b280f40eb210c44fdbe" prot="public">
          <name>noParameter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga0c1577fd05efee8475b0f7fef795bbbeaf72bac0ac84c0315e7bcbb8aa84b2ff8" prot="public">
          <name>loadfactor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga0c1577fd05efee8475b0f7fef795bbbea07cc694b9b3fc636710fa08b6922c42b" prot="public">
          <name>time</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga0c1577fd05efee8475b0f7fef795bbbeab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A strongly typed enum class representing the FE parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="71" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="enum" id="da/ddc/a00288_1gaea763c94a1cecbeefc4f8661debcc5a3" prot="public" static="no" strong="yes">
        <type></type>
        <name>FESolutions</name>
        <qualifiedname>Ikarus::FESolutions</qualifiedname>
        <enumvalue id="da/ddc/a00288_1ggaea763c94a1cecbeefc4f8661debcc5a3a19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1ggaea763c94a1cecbeefc4f8661debcc5a3a2100a151ce2773b3467509ae085aa505" prot="public">
          <name>noSolution</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1ggaea763c94a1cecbeefc4f8661debcc5a3a0c2d35f5f278a229db5ba41d40120f1c" prot="public">
          <name>displacement</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1ggaea763c94a1cecbeefc4f8661debcc5a3aac1a453d0cdc1f19d9479ccfaa8b082c" prot="public">
          <name>velocity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1ggaea763c94a1cecbeefc4f8661debcc5a3a3d4e992d8d8a7d848724aa26ed7f4176" prot="public">
          <name>director</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1ggaea763c94a1cecbeefc4f8661debcc5a3a58edccca94b76e0355ed45da28ece7ff" prot="public">
          <name>magnetizationAndVectorPotential</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1ggaea763c94a1cecbeefc4f8661debcc5a3ab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A strongly typed enum class representing the type of the solutions vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="84" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="da/ddc/a00288_1ga531be167e924b749eb8b4ccc7f1c18c9" prot="public" static="no" strong="yes">
        <type></type>
        <name>ResultType</name>
        <qualifiedname>Ikarus::ResultType</qualifiedname>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9a19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9ad2859ebb97e0012ad38b47dca4f85713" prot="public">
          <name>noType</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9ae32847e757c83ed980680fa215e356f7" prot="public">
          <name>magnetization</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9a92145c4b71bfe6ec078933e495fccd77" prot="public">
          <name>gradientNormOfMagnetization</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9a0b3e1fbd405fc1a6535e5514b0ba70a7" prot="public">
          <name>vectorPotential</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9a8475b505cc04610acbb7381506b3e65d" prot="public">
          <name>divergenceOfVectorPotential</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9a4c7528492cfffa1e4a34304fe5710566" prot="public">
          <name>BField</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9a1183c16939e5fc77a54cda60df89ec2f" prot="public">
          <name>HField</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9a823b6a2b943cfaf747fe3b45bd1a5f02" prot="public">
          <name>cauchyStress</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9afa06a140291f2b4bc25c81e5e6bac241" prot="public">
          <name>PK2Stress</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9ad8cbb8fe32024cc3f1376a24d27aeae7" prot="public">
          <name>linearStress</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9a3d4e992d8d8a7d848724aa26ed7f4176" prot="public">
          <name>director</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/ddc/a00288_1gga531be167e924b749eb8b4ccc7f1c18c9ab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A strongly typed enum class representing the type of the result request. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="103" column="1" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="enum" id="d4/d66/a00289_1gacef1e451de1a99845c59d7391064fb8f" prot="public" static="no" strong="yes">
        <type></type>
        <name>StrainTags</name>
        <qualifiedname>Ikarus::StrainTags</qualifiedname>
        <enumvalue id="d4/d66/a00289_1ggacef1e451de1a99845c59d7391064fb8fa19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1ggacef1e451de1a99845c59d7391064fb8fa9a932b3cb396238423eb2f33ec17d6aa" prot="public">
          <name>linear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1ggacef1e451de1a99845c59d7391064fb8fa61fc106262d2e2049866894bb4f862a5" prot="public">
          <name>deformationGradient</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1ggacef1e451de1a99845c59d7391064fb8fa0eb1f1f7a6a355c2f4260b74c21d80f3" prot="public">
          <name>displacementGradient</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1ggacef1e451de1a99845c59d7391064fb8faca3f1e4bb21fd00a3d29c5d8aff8e11e" prot="public">
          <name>greenLagrangian</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1ggacef1e451de1a99845c59d7391064fb8faea40a9960a7a89c4f366beeab85d07d2" prot="public">
          <name>rightCauchyGreenTensor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1ggacef1e451de1a99845c59d7391064fb8fab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A strongly typed enum class representing the type of the passed strain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" line="20" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="enum" id="d4/d66/a00289_1ga70b4ce43c53cc5e949d49919f437501e" prot="public" static="no" strong="yes">
        <type></type>
        <name>StressTags</name>
        <qualifiedname>Ikarus::StressTags</qualifiedname>
        <enumvalue id="d4/d66/a00289_1gga70b4ce43c53cc5e949d49919f437501ea19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1gga70b4ce43c53cc5e949d49919f437501ea9a932b3cb396238423eb2f33ec17d6aa" prot="public">
          <name>linear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1gga70b4ce43c53cc5e949d49919f437501eab13248d68ac5516c015337b68346fc21" prot="public">
          <name>PK2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1gga70b4ce43c53cc5e949d49919f437501eac34dd77ffb9238275b93ea1897664a7e" prot="public">
          <name>PK1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1gga70b4ce43c53cc5e949d49919f437501ea2ee21c55474972b3e65b31a6b0b57dc8" prot="public">
          <name>Cauchy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1gga70b4ce43c53cc5e949d49919f437501eadb46969ba633ea08a9181d8eb6218ba9" prot="public">
          <name>Kirchhoff</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1gga70b4ce43c53cc5e949d49919f437501eab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A strongly typed enum class representing the type of the computed stresses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" line="27" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="d4/d66/a00289_1ga05ac785124262c1e323d2f937d520a1b" prot="public" static="no" strong="yes">
        <type></type>
        <name>TangentModuliTags</name>
        <qualifiedname>Ikarus::TangentModuliTags</qualifiedname>
        <enumvalue id="d4/d66/a00289_1gga05ac785124262c1e323d2f937d520a1ba19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1gga05ac785124262c1e323d2f937d520a1bad92a8333dd3ccb895cc65f7455b71206" prot="public">
          <name>Material</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1gga05ac785124262c1e323d2f937d520a1ba33d7f1ec5fe18e7ba799474138e71504" prot="public">
          <name>Spatial</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1gga05ac785124262c1e323d2f937d520a1ba331d16a2885c7f82ba949f286f48143d" prot="public">
          <name>TwoPoint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d4/d66/a00289_1gga05ac785124262c1e323d2f937d520a1bab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A strongly typed enum class representing the type of the computed tangent moduli. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" line="34" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="enum" id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906" prot="public" static="no" strong="yes">
        <type></type>
        <name>SolverTypeTag</name>
        <qualifiedname>Ikarus::SolverTypeTag</qualifiedname>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a334c4a4c42fdb79d7ebc3e73b517e6f8" prot="public">
          <name>none</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a43e7ad1498548ecfbe9359418877c793" prot="public">
          <name>si_ConjugateGradient</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a64a3b585d23ed07479c1452d49f397bb" prot="public">
          <name>si_LeastSquaresConjugateGradient</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a3ba09bd833aa666cbeca9bfd4a33be6f" prot="public">
          <name>si_BiCGSTAB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906acd4c06ca3bfe2246c9ec45bee84b5852" prot="public">
          <name>sd_SimplicialLLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906af493d8a2d2d89f06181e77bc79cabf1c" prot="public">
          <name>sd_SimplicialLDLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906ae7cfd15be408672026faa788c0c112e5" prot="public">
          <name>sd_SparseLU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a259246f1b3299da36945e32f5660bebd" prot="public">
          <name>sd_SparseQR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a286dc99776bcd1ea313e669aa17b3236" prot="public">
          <name>sd_CholmodSupernodalLLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906afe6a46ed15566813699daa9c9cbf85d5" prot="public">
          <name>sd_UmfPackLU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906aa8fe11042608f12d110c154033361fcc" prot="public">
          <name>sd_SuperLU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a97eafebe024f68db956c95519ddf66f2" prot="public">
          <name>d_PartialPivLU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a4c20d1c5006d9987b894313a4af5de6e" prot="public">
          <name>d_FullPivLU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a290d38c1d75cda978733c7ee8266e16e" prot="public">
          <name>d_HouseholderQR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906af66de0478863779eca4d9e7dcf39c59a" prot="public">
          <name>d_ColPivHouseholderQR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a9be60de1df84a8b371f0ad372aba4582" prot="public">
          <name>d_FullPivHouseholderQR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906ae1f5f0486da0c6645a75c3df39d8d942" prot="public">
          <name>d_CompleteOrthogonalDecomposition</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906a40c05e324bcfe6242fddbef28720e86a" prot="public">
          <name>d_LLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a731a9ee6621f91193c15f31b9a399906ad495de2cc8831501954c24afe8688190" prot="public">
          <name>d_LDLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration representing different solver types. </para>
        </briefdescription>
        <detaileddescription>
<para>The prefix s and d stand for sparse and dense solvers and the second prefix i and d stand for iterative or direct solvers for the sparse case </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="27" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="27" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="da/d50/a00301_1a4763ca5888a027ed9b8d965d67cbb9ab" prot="public" static="no" strong="yes">
        <type></type>
        <name>MatrixTypeTag</name>
        <qualifiedname>Ikarus::MatrixTypeTag</qualifiedname>
        <enumvalue id="da/d50/a00301_1a4763ca5888a027ed9b8d965d67cbb9aba9a71a13863c84ba34fc41595fc2ee0c6" prot="public">
          <name>Dense</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1a4763ca5888a027ed9b8d965d67cbb9aba7407fb7e6a4df6392aaabd2368157312" prot="public">
          <name>Sparse</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration representing different matrix types (Dense or Sparse). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="53" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="enum" id="da/d50/a00301_1ace28d4868cfc647491f7938f04ef6c66" prot="public" static="no" strong="yes">
        <type></type>
        <name>PreConditioner</name>
        <qualifiedname>Ikarus::PreConditioner</qualifiedname>
        <enumvalue id="da/d50/a00301_1ace28d4868cfc647491f7938f04ef6c66a7a24b184ba388b8e327feb98dbe168ff" prot="public">
          <name>IncompleteCholesky</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1ace28d4868cfc647491f7938f04ef6c66a7a93111b975ec3c3824eab230f3ec608" prot="public">
          <name>IdentityPreconditioner</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1ace28d4868cfc647491f7938f04ef6c66a3c6b5404db3b7bf45a0302f376a53afc" prot="public">
          <name>DiagonalPreconditioner</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of available preconditioners for the trust region solver. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="33" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="enum" id="da/d50/a00301_1abd5d0cf356d1ae81f6ee827b0f47c674" prot="public" static="no" strong="yes">
        <type></type>
        <name>StopReason</name>
        <qualifiedname>Ikarus::StopReason</qualifiedname>
        <enumvalue id="da/d50/a00301_1abd5d0cf356d1ae81f6ee827b0f47c674a0c4f44592a7ae85baf42cb3fb4a5a3d1" prot="public">
          <name>gradientNormTolReached</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1abd5d0cf356d1ae81f6ee827b0f47c674ad1c6a6016de417acc66b5ac44a1fdca3" prot="public">
          <name>correctionNormTolReached</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1abd5d0cf356d1ae81f6ee827b0f47c674ad205528fe2a4412b89626ff7eee936f9" prot="public">
          <name>maximumTimeReached</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1abd5d0cf356d1ae81f6ee827b0f47c674a5ed07f9461b91dd3a6ba961a0ed5c8fe" prot="public">
          <name>maximumIterationsReached</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d50/a00301_1abd5d0cf356d1ae81f6ee827b0f47c674a8d2fa9685be8b8f8994bd8a73bfa8c9f" prot="public">
          <name>dontStop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of reasons for stopping the <ref refid="d4/d20/a01421" kindref="compound">TrustRegion</ref> solver. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="57" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="57" bodyend="63"/>
      </memberdef>
      <memberdef kind="enum" id="d9/d5e/a00295_1ga35fa62fd2d4186a9750af3d0692f2893" prot="public" static="no" strong="yes">
        <type></type>
        <name>ControlMessages</name>
        <qualifiedname>Ikarus::ControlMessages</qualifiedname>
        <enumvalue id="d9/d5e/a00295_1gga35fa62fd2d4186a9750af3d0692f2893a19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga35fa62fd2d4186a9750af3d0692f2893a3fbccdb8d4ddfe10b3c9ee45ed07aad0" prot="public">
          <name>CONTROL_STARTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga35fa62fd2d4186a9750af3d0692f2893a1c32d268de88f801deb25166d98a3938" prot="public">
          <name>CONTROL_ENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga35fa62fd2d4186a9750af3d0692f2893a18e0c9ecde68d13f1d2608dd1a180945" prot="public">
          <name>STEP_STARTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga35fa62fd2d4186a9750af3d0692f2893ae2b2386af3d7379bd2ddde735d5867b2" prot="public">
          <name>STEP_ENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga35fa62fd2d4186a9750af3d0692f2893a0d30d757bf062e88728ebe7f8e2b2577" prot="public">
          <name>SOLUTION_CHANGED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga35fa62fd2d4186a9750af3d0692f2893ab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum class defining control-routine-related messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observermessages.hh" line="16" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observermessages.hh" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="enum" id="d9/d5e/a00295_1ga662b2b6a80547adf4b9ce8b30d87fab5" prot="public" static="no" strong="yes">
        <type></type>
        <name>NonLinearSolverMessages</name>
        <qualifiedname>Ikarus::NonLinearSolverMessages</qualifiedname>
        <enumvalue id="d9/d5e/a00295_1gga662b2b6a80547adf4b9ce8b30d87fab5a19aad9f2fe3ce0023298ab83f7e75775" prot="public">
          <name>BEGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga662b2b6a80547adf4b9ce8b30d87fab5afaee4ca3c30ee18148ce3ada37466498" prot="public">
          <name>INIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga662b2b6a80547adf4b9ce8b30d87fab5afdb2cb9832d112cd92fb2cda8879c3b4" prot="public">
          <name>ITERATION_STARTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga662b2b6a80547adf4b9ce8b30d87fab5a073d71a89cce6d4b9775987fdbb22815" prot="public">
          <name>ITERATION_ENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga662b2b6a80547adf4b9ce8b30d87fab5a721c68980ba6c47122945477a56d7a14" prot="public">
          <name>RESIDUALNORM_UPDATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga662b2b6a80547adf4b9ce8b30d87fab5a07a63a77745ab72a7e89fb22a8bcfd78" prot="public">
          <name>CORRECTIONNORM_UPDATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga662b2b6a80547adf4b9ce8b30d87fab5a0d30d757bf062e88728ebe7f8e2b2577" prot="public">
          <name>SOLUTION_CHANGED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga662b2b6a80547adf4b9ce8b30d87fab5a15380ac35d47cdbcbd64aada4bc21931" prot="public">
          <name>FINISHED_SUCESSFULLY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d5e/a00295_1gga662b2b6a80547adf4b9ce8b30d87fab5ab1a326c06d88bf042f73d70f50197905" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum class defining non-linear solver-related messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observermessages.hh" line="22" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/observer/observermessages.hh" bodystart="22" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="da/d50/a00301_1a87e3feaaba5839ab7b515df24438c07f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Geometry</type>
          </param>
        </templateparamlist>
        <type>std::variant&lt; std::monostate, <ref refid="d1/d31/a01245" kindref="compound">EASQ1E4</ref>&lt; Geometry &gt;, <ref refid="d3/d7b/a01249" kindref="compound">EASQ1E5</ref>&lt; Geometry &gt;, <ref refid="d3/d0b/a01253" kindref="compound">EASQ1E7</ref>&lt; Geometry &gt; &gt;</type>
        <definition>using Ikarus::EAS2DVariant = typedef std::variant&lt;std::monostate, EASQ1E4&lt;Geometry&gt;, EASQ1E5&lt;Geometry&gt;, EASQ1E7&lt;Geometry&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>EAS2DVariant</name>
        <qualifiedname>Ikarus::EAS2DVariant</qualifiedname>
        <briefdescription>
<para>Variant type for 2D EAS structures. </para>
        </briefdescription>
        <detaileddescription>
<para>This variant type holds different EAS structures for 2D elements.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/enhancedassumedstrains.hh" line="315" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/enhancedassumedstrains.hh" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d50/a00301_1a4e486ca9fc463568d5018e15b3d68b0d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Geometry</type>
          </param>
        </templateparamlist>
        <type>std::variant&lt; std::monostate, <ref refid="d9/de7/a01257" kindref="compound">EASH1E9</ref>&lt; Geometry &gt;, <ref refid="de/d34/a01261" kindref="compound">EASH1E21</ref>&lt; Geometry &gt; &gt;</type>
        <definition>using Ikarus::EAS3DVariant = typedef std::variant&lt;std::monostate, EASH1E9&lt;Geometry&gt;, EASH1E21&lt;Geometry&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>EAS3DVariant</name>
        <qualifiedname>Ikarus::EAS3DVariant</qualifiedname>
        <briefdescription>
<para>Variant type for 3D EAS structures. </para>
        </briefdescription>
        <detaileddescription>
<para>This variant type holds different EAS structures for 3D elements.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/enhancedassumedstrains.hh" line="325" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/enhancedassumedstrains.hh" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d50/a00301_1ae7fcb8a58863e680e7a25d75766df15c" prot="public" static="no">
        <type><ref refid="d1/d1a/a01285" kindref="compound">LinearElasticityT</ref>&lt; double &gt;</type>
        <definition>typedef LinearElasticityT&lt;double&gt; Ikarus::LinearElasticity</definition>
        <argsstring></argsstring>
        <name>LinearElasticity</name>
        <qualifiedname>Ikarus::LinearElasticity</qualifiedname>
        <briefdescription>
<para>Convenience typedef for LinearElasticity with double as ScalarType. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/linearelasticity.hh" line="126" column="29" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/linearelasticity.hh" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d50/a00301_1a8d5cb9f5246159271193458daad08fdd" prot="public" static="no">
        <type><ref refid="d9/dda/a01289" kindref="compound">NeoHookeT</ref>&lt; double &gt;</type>
        <definition>typedef NeoHookeT&lt;double&gt; Ikarus::NeoHooke</definition>
        <argsstring></argsstring>
        <name>NeoHooke</name>
        <qualifiedname>Ikarus::NeoHooke</qualifiedname>
        <briefdescription>
<para>Alias for <ref refid="d9/dda/a01289" kindref="compound">NeoHookeT</ref> with double as the default scalar type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/neohooke.hh" line="140" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/neohooke.hh" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d50/a00301_1ab6b67c66afecf13985c9bf252ac644da" prot="public" static="no">
        <type><ref refid="dc/dd5/a01293" kindref="compound">StVenantKirchhoffT</ref>&lt; double &gt;</type>
        <definition>typedef StVenantKirchhoffT&lt;double&gt; Ikarus::StVenantKirchhoff</definition>
        <argsstring></argsstring>
        <name>StVenantKirchhoff</name>
        <qualifiedname>Ikarus::StVenantKirchhoff</qualifiedname>
        <briefdescription>
<para>Alias for <ref refid="dc/dd5/a01293" kindref="compound">StVenantKirchhoffT</ref> with double as the default scalar type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/svk.hh" line="174" column="30" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/svk.hh" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d50/a00301_1ae747d502e8f67af4c5412d8a6febeb4c" prot="public" static="no">
        <type><ref refid="d3/dea/a01377" kindref="compound">LinearSolverTemplate</ref>&lt; double &gt;</type>
        <definition>typedef LinearSolverTemplate&lt;double&gt; Ikarus::LinearSolver</definition>
        <argsstring></argsstring>
        <name>LinearSolver</name>
        <qualifiedname>Ikarus::LinearSolver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="234" column="32" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d50/a00301_1a98cbe3aef4b3238ea7de77ee9c4c19ac" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class PreBasis</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="d8/d67/a01477" kindref="compound">FlatPreBasis</ref>&lt; PreBasis &gt;::type</type>
        <definition>using Ikarus::FlatPreBasis_t = typedef typename FlatPreBasis&lt;PreBasis&gt;::type</definition>
        <argsstring></argsstring>
        <name>FlatPreBasis_t</name>
        <qualifiedname>Ikarus::FlatPreBasis_t</qualifiedname>
        <briefdescription>
<para>Type alias for flatted PreBasis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/flatprebasis.hh" line="52" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/flatprebasis.hh" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="da/d50/a00301_1a8d0ca59930b7ae15351497bd14319d1d" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="d6/d7f/a00287_1ga122268ff4d2c0beee58799d85ba5e52a" kindref="member">VectorAffordances</ref></type>
        <definition>constexpr VectorAffordances Ikarus::forces</definition>
        <argsstring></argsstring>
        <name>forces</name>
        <qualifiedname>Ikarus::forces</qualifiedname>
        <initializer>= VectorAffordances::forces</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="126" column="38" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="126" bodyend="-1"/>
        <referencedby refid="df/da9/a00263_1a0e4f7cface71bec1c24bbed3aaa798d8" compoundref="df/da9/a00263" startline="34" endline="167">PYBIND11_MODULE</referencedby>
      </memberdef>
      <memberdef kind="variable" id="da/d50/a00301_1a5185740b975fb7539a6e07553a061b26" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="d6/d7f/a00287_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref></type>
        <definition>constexpr MatrixAffordances Ikarus::stiffness</definition>
        <argsstring></argsstring>
        <name>stiffness</name>
        <qualifiedname>Ikarus::stiffness</qualifiedname>
        <initializer>= MatrixAffordances::stiffness</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="128" column="38" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="128" bodyend="-1"/>
        <referencedby refid="df/da9/a00263_1a0e4f7cface71bec1c24bbed3aaa798d8" compoundref="df/da9/a00263" startline="34" endline="167">PYBIND11_MODULE</referencedby>
      </memberdef>
      <memberdef kind="variable" id="da/d50/a00301_1a8191d0e317e1bea2a35d6c8a8f20750f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="d6/d7f/a00287_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref></type>
        <definition>constexpr MatrixAffordances Ikarus::stiffnessdiffBucklingVector</definition>
        <argsstring></argsstring>
        <name>stiffnessdiffBucklingVector</name>
        <qualifiedname>Ikarus::stiffnessdiffBucklingVector</qualifiedname>
        <initializer>= MatrixAffordances::stiffnessdiffBucklingVector</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="129" column="38" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="129" bodyend="-1"/>
        <referencedby refid="df/da9/a00263_1a0e4f7cface71bec1c24bbed3aaa798d8" compoundref="df/da9/a00263" startline="34" endline="167">PYBIND11_MODULE</referencedby>
      </memberdef>
      <memberdef kind="variable" id="da/d50/a00301_1a7e05e861b25ca636c1ccba4b8d2a3831" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="d6/d7f/a00287_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref></type>
        <definition>constexpr MatrixAffordances Ikarus::mass</definition>
        <argsstring></argsstring>
        <name>mass</name>
        <qualifiedname>Ikarus::mass</qualifiedname>
        <initializer>= MatrixAffordances::mass</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="130" column="38" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="130" bodyend="-1"/>
        <referencedby refid="df/da9/a00263_1a0e4f7cface71bec1c24bbed3aaa798d8" compoundref="df/da9/a00263" startline="34" endline="167">PYBIND11_MODULE</referencedby>
      </memberdef>
      <memberdef kind="variable" id="da/d50/a00301_1a64dfa264a039267932c6c99eb66ae98e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="d6/d7f/a00287_1ga8a33210894e12be4feb3d96fdfde215c" kindref="member">ScalarAffordances</ref></type>
        <definition>constexpr ScalarAffordances Ikarus::potentialEnergy</definition>
        <argsstring></argsstring>
        <name>potentialEnergy</name>
        <qualifiedname>Ikarus::potentialEnergy</qualifiedname>
        <initializer>= <ref refid="d6/d7f/a00287_1gga8a33210894e12be4feb3d96fdfde215ca814f34f472acef493e9ecf0ffccdcae6" kindref="member">ScalarAffordances::mechanicalPotentialEnergy</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="132" column="38" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d7b/a00296_1ga8bdeefaffd49685e7dcd89f34af51d76" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Ikarus::voigtNotationContainer</definition>
        <argsstring></argsstring>
        <name>voigtNotationContainer</name>
        <qualifiedname>Ikarus::voigtNotationContainer</qualifiedname>
        <initializer>= std::get&lt;dim - 1&gt;(Impl::voigtIndices)</initializer>
        <briefdescription>
<para>Container for Voigt notation indices based on dimension.</para>
<para>1D: 0,0 2D: 0,0 1,1 0,1 3D: 0,0 1,1 2,2 1,2 0,2 0,1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension for which Voigt indices are needed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="480" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="480" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/d50/a00301_1a0853622412d4cedc078b81ba454eb250" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::string</type>
        <definition>constexpr std::string Ikarus::toString</definition>
        <argsstring>(ScalarAffordances _e)</argsstring>
        <name>toString</name>
        <qualifiedname>Ikarus::toString</qualifiedname>
        <param>
          <type><ref refid="d6/d7f/a00287_1ga8a33210894e12be4feb3d96fdfde215c" kindref="member">ScalarAffordances</ref></type>
          <declname>_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="34" column="55" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="34" bodyend="34"/>
        <referencedby refid="d8/d53/a01225_1ae7fc156ad6fff17f82c3ebefb188949e" compoundref="dc/dfe/a00125" startline="237" endline="248">Ikarus::FERequirements&lt; SolutionVectorType_, ParameterType_ &gt;::getGlobalSolution</referencedby>
        <referencedby refid="d8/d53/a01225_1aed233407eb8ab5e7c7d7c8ea35265328" compoundref="dc/dfe/a00125" startline="260" endline="268">Ikarus::FERequirements&lt; SolutionVectorType_, ParameterType_ &gt;::getParameter</referencedby>
        <referencedby refid="d2/d1f/a01361_1aeab965379985b94a9c60059b01595f6b" compoundref="d7/d3f/a00173" startline="101" endline="106">Ikarus::ResultFunction&lt; ElementType_, UserFunction &gt;::name</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1aea6d8dd57847aa02cfe354d03fb33873" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::string</type>
        <definition>constexpr std::string Ikarus::toString</definition>
        <argsstring>(VectorAffordances _e)</argsstring>
        <name>toString</name>
        <qualifiedname>Ikarus::toString</qualifiedname>
        <param>
          <type><ref refid="d6/d7f/a00287_1ga122268ff4d2c0beee58799d85ba5e52a" kindref="member">VectorAffordances</ref></type>
          <declname>_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="45" column="55" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a6f0494a69387bbaac5cef6eb94ce5e60" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::string</type>
        <definition>constexpr std::string Ikarus::toString</definition>
        <argsstring>(MatrixAffordances _e)</argsstring>
        <name>toString</name>
        <qualifiedname>Ikarus::toString</qualifiedname>
        <param>
          <type><ref refid="d6/d7f/a00287_1ga52cb89165daabb500f6e2eb68ddd76ee" kindref="member">MatrixAffordances</ref></type>
          <declname>_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="60" column="55" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a2b95b51e82bcb7c8990ff20bd8273ebf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::string</type>
        <definition>constexpr std::string Ikarus::toString</definition>
        <argsstring>(FEParameter _e)</argsstring>
        <name>toString</name>
        <qualifiedname>Ikarus::toString</qualifiedname>
        <param>
          <type><ref refid="da/ddc/a00288_1ga0c1577fd05efee8475b0f7fef795bbbe" kindref="member">FEParameter</ref></type>
          <declname>_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="71" column="49" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ad313676e121358d0076db4f79fbce4be" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::string</type>
        <definition>constexpr std::string Ikarus::toString</definition>
        <argsstring>(FESolutions _e)</argsstring>
        <name>toString</name>
        <qualifiedname>Ikarus::toString</qualifiedname>
        <param>
          <type><ref refid="da/ddc/a00288_1gaea763c94a1cecbeefc4f8661debcc5a3" kindref="member">FESolutions</ref></type>
          <declname>_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="84" column="49" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a3c879db4909a24c05893eaf7da23bae1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::string</type>
        <definition>constexpr std::string Ikarus::toString</definition>
        <argsstring>(ResultType _e)</argsstring>
        <name>toString</name>
        <qualifiedname>Ikarus::toString</qualifiedname>
        <param>
          <type><ref refid="da/ddc/a00288_1ga531be167e924b749eb8b4ccc7f1c18c9" kindref="member">ResultType</ref></type>
          <declname>_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" line="103" column="48" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/ferequirements.hh" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a7a5b9f5e83f6918ca1726fb4316c3b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d Ikarus::calcTransformationMatrix2D</definition>
        <argsstring>(const Geometry &amp;geometry)</argsstring>
        <name>calcTransformationMatrix2D</name>
        <qualifiedname>Ikarus::calcTransformationMatrix2D</qualifiedname>
        <param>
          <type>const Geometry &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Calculates the 2D transformation matrix for Enhanced Assumed Strains (EAS). </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the transformation matrix for 2D EAS using the provided geometry.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the geometry object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Transformation matrix for 2D EAS. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/enhancedassumedstrains.hh" line="32" column="19" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/enhancedassumedstrains.hh" bodystart="32" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a95234ab8588ced83708c6e5a30e2368e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Geometry</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; double, 6, 6 &gt;</type>
        <definition>Eigen::Matrix&lt; double, 6, 6 &gt; Ikarus::calcTransformationMatrix3D</definition>
        <argsstring>(const Geometry &amp;geometry)</argsstring>
        <name>calcTransformationMatrix3D</name>
        <qualifiedname>Ikarus::calcTransformationMatrix3D</qualifiedname>
        <param>
          <type>const Geometry &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Calculates the 3D transformation matrix for Enhanced Assumed Strains (EAS). </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the transformation matrix for 3D EAS using the provided geometry.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the geometry object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Transformation matrix for 3D EAS. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/enhancedassumedstrains.hh" line="64" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/enhancedassumedstrains.hh" bodystart="64" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ab6a92f48acd6be62f36b7f499491fc8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Material</type>
          </param>
          <param>
            <type>typename Strains</type>
          </param>
        </templateparamlist>
        <type>consteval bool</type>
        <definition>consteval bool Ikarus::hasCorrectSize</definition>
        <argsstring>()</argsstring>
        <name>hasCorrectSize</name>
        <qualifiedname>Ikarus::hasCorrectSize</qualifiedname>
        <briefdescription>
<para>Template function for checking if the strain size is correct. </para>
        </briefdescription>
        <detaileddescription>
<para>The given strain quantity has to be a Eigen::Vector6 or a Eigen::Matrix3</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="d5/d6f/a01281" kindref="compound">Material</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the material. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Strains</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the strains. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/interface.hh" line="38" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/interface.hh" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="d4/d66/a00289_1gad5aa30fe829c7316a0a744b3438609f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>StrainTags</type>
            <declname>tag</declname>
            <defname>tag</defname>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::createGreenLagrangianStrains</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;eMB)</argsstring>
        <name>createGreenLagrangianStrains</name>
        <qualifiedname>Ikarus::createGreenLagrangianStrains</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>eMB</declname>
        </param>
        <briefdescription>
<para>Create Green-Lagrangian strain based on the input. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates Green-Lagrangian strains based on the input strain matrix. What to do is decided by the provided strain tag</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the strain tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eMB</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix representing the input strain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Green-Lagrangian strains matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" line="46" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" bodystart="46" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="d4/d66/a00289_1ga5293eb09f12e4a45a7aa19a3403a73d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>StrainTags</type>
            <declname>tag</declname>
            <defname>tag</defname>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Ikarus::createDeformationGradient</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;eMB)</argsstring>
        <name>createDeformationGradient</name>
        <qualifiedname>Ikarus::createDeformationGradient</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>eMB</declname>
        </param>
        <briefdescription>
<para>Create the deformation gradient based on the input. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates deformation gradient based on the input strain matrix. What to do is decided by the provided strain tag</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the strain tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eMB</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix representing the input strain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The deformation gradient matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" line="71" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" bodystart="71" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="d4/d66/a00289_1gae53e0e7999f565fc94610d1c4ede0d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>StrainTags</type>
            <declname>tag</declname>
            <defname>tag</defname>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Ikarus::createRightCauchyGreen</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;eMB)</argsstring>
        <name>createRightCauchyGreen</name>
        <qualifiedname>Ikarus::createRightCauchyGreen</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>eMB</declname>
        </param>
        <briefdescription>
<para>Create right Cauchy-Green tensor based on the input. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates Right Cauchy-Green tensor based on the input strain matrix. What to do is decided by the provided strain tag</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the strain tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eMB</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix representing the input strain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Right Cauchy-Green tensor matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" line="102" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" bodystart="102" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="d4/d66/a00289_1gae9c00f19ce473d7183c87aa84b247f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>StrainTags</type>
            <declname>from</declname>
            <defname>from</defname>
          </param>
          <param>
            <type>StrainTags</type>
            <declname>to</declname>
            <defname>to</defname>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Ikarus::transformStrain</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;eRaw)</argsstring>
        <name>transformStrain</name>
        <qualifiedname>Ikarus::transformStrain</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>eRaw</declname>
        </param>
        <briefdescription>
<para>Transform strain from one type to another. </para>
        </briefdescription>
        <detaileddescription>
<para>This function transforms one strain component matrix from one type to another, based on the provided strain tags</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the source strain tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the target strain tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eRaw</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix representing the input strain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The transformed strain matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" line="132" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/strainconversions.hh" bodystart="132" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1aabe2255ec3392fe00a383dd05d7dfe8a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::string</type>
        <definition>constexpr std::string Ikarus::toString</definition>
        <argsstring>(StrainTags _e)</argsstring>
        <name>toString</name>
        <qualifiedname>Ikarus::toString</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1gacef1e451de1a99845c59d7391064fb8f" kindref="member">StrainTags</ref></type>
          <declname>_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" line="20" column="50" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a31d0fcb0973be69c8c36cc4cbcb70c11" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::string</type>
        <definition>constexpr std::string Ikarus::toString</definition>
        <argsstring>(StressTags _e)</argsstring>
        <name>toString</name>
        <qualifiedname>Ikarus::toString</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga70b4ce43c53cc5e949d49919f437501e" kindref="member">StressTags</ref></type>
          <declname>_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" line="27" column="50" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a1146e010b8f52fa9a883f064b3aa389a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::string</type>
        <definition>constexpr std::string Ikarus::toString</definition>
        <argsstring>(TangentModuliTags _e)</argsstring>
        <name>toString</name>
        <qualifiedname>Ikarus::toString</qualifiedname>
        <param>
          <type><ref refid="d4/d66/a00289_1ga05ac785124262c1e323d2f937d520a1b" kindref="member">TangentModuliTags</ref></type>
          <declname>_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" line="34" column="57" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/tags.hh" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a317c0a50c0a7d482e2a20d8146e08df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Impl::StressIndexPair...</type>
            <declname>stressIndexPair</declname>
            <defname>stressIndexPair</defname>
          </param>
          <param>
            <type>typename MaterialImpl</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeVanishingStress</definition>
        <argsstring>(MaterialImpl mat, typename MaterialImpl::ScalarType p_tol=1e-12)</argsstring>
        <name>makeVanishingStress</name>
        <qualifiedname>Ikarus::makeVanishingStress</qualifiedname>
        <param>
          <type>MaterialImpl</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>typename MaterialImpl::ScalarType</type>
          <declname>p_tol</declname>
          <defval>1e-12</defval>
        </param>
        <briefdescription>
<para>Factory function to create a <ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> material with specified stress indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>stressIndexPair</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of StressIndexPair representing fixed stress components. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MaterialImpl</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying material model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying material model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for stress reduction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> The created <ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> material. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" line="271" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" bodystart="271" bodyend="273"/>
        <referencedby refid="da/d50/a00301_1a9bf89561a3cb74c038a5e137608ee22d" compoundref="d2/df5/a00137" startline="310" endline="312">beamMaterial</referencedby>
        <referencedby refid="da/d50/a00301_1a9b0fa242d65e9b14680cedcbaeed3301" compoundref="d2/df5/a00137" startline="283" endline="286">planeStress</referencedby>
        <referencedby refid="da/d50/a00301_1a97580749c5279282142d9e17d612b77e" compoundref="d2/df5/a00137" startline="297" endline="299">shellMaterial</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a9b0fa242d65e9b14680cedcbaeed3301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MaterialImpl</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::planeStress</definition>
        <argsstring>(const MaterialImpl &amp;mat, typename MaterialImpl::ScalarType p_tol=1e-8)</argsstring>
        <name>planeStress</name>
        <qualifiedname>Ikarus::planeStress</qualifiedname>
        <param>
          <type>const MaterialImpl &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>typename MaterialImpl::ScalarType</type>
          <declname>p_tol</declname>
          <defval>1e-8</defval>
        </param>
        <briefdescription>
<para>Factory function to create a <ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> material for plane stress conditions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MaterialImpl</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying material model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying material model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for stress reduction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> The created <ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> material for plane stress. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" line="283" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a97580749c5279282142d9e17d612b77e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MaterialImpl</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::shellMaterial</definition>
        <argsstring>(const MaterialImpl &amp;mat, typename MaterialImpl::ScalarType p_tol=1e-8)</argsstring>
        <name>shellMaterial</name>
        <qualifiedname>Ikarus::shellMaterial</qualifiedname>
        <param>
          <type>const MaterialImpl &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>typename MaterialImpl::ScalarType</type>
          <declname>p_tol</declname>
          <defval>1e-8</defval>
        </param>
        <briefdescription>
<para>Factory function to create a <ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> material for a shell material with zero normal stress condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MaterialImpl</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying material model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying material model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for stress reduction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> The created <ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> material for plane stress. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" line="297" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" bodystart="297" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a9bf89561a3cb74c038a5e137608ee22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MaterialImpl</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::beamMaterial</definition>
        <argsstring>(const MaterialImpl &amp;mat, typename MaterialImpl::ScalarType p_tol=1e-8)</argsstring>
        <name>beamMaterial</name>
        <qualifiedname>Ikarus::beamMaterial</qualifiedname>
        <param>
          <type>const MaterialImpl &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>typename MaterialImpl::ScalarType</type>
          <declname>p_tol</declname>
          <defval>1e-8</defval>
        </param>
        <briefdescription>
<para>Factory function to create a <ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> material for a beam material with two zero normal stress condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MaterialImpl</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying material model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying material model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for stress reduction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> The created <ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> material for plane stress. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" line="310" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/materials/vanishingstress.hh" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a90678a80e6b2b4849072623df02dae58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d Ikarus::planeStressLinearElasticMaterialTangent</definition>
        <argsstring>(double E, double nu)</argsstring>
        <name>planeStressLinearElasticMaterialTangent</name>
        <qualifiedname>Ikarus::planeStressLinearElasticMaterialTangent</qualifiedname>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
<para>Computes the plane stress linear elastic material tangent matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>Young&apos;s modulus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nu</parametername>
</parameternamelist>
<parameterdescription>
<para>Poisson&apos;s ratio. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>3x3 material tangent matrix. </para>
</simplesect>
<xrefsect id="d2/d04/a00281_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the material library <ref refid="da/d50/a00301_1ae7fcb8a58863e680e7a25d75766df15c" kindref="member">Ikarus::LinearElasticity</ref>. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="27" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="27" bodyend="35"/>
        <referencedby refid="d2/d1d/a01277_1ae9391f3895e965ecc5dfea1af1ac62f7" compoundref="d3/d6c/a02446" startline="137" endline="142">Ikarus::LinearElastic&lt; Basis_, FERequirements_, useEigenRef &gt;::materialTangent</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1afc9c57d60ca4a8c1075c44d926e497a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 6, 6 &gt;</type>
        <definition>Eigen:: Matrix&lt; double, 6, 6 &gt; Ikarus::linearElasticMaterialTangent3D</definition>
        <argsstring>(double E, double nu)</argsstring>
        <name>linearElasticMaterialTangent3D</name>
        <qualifiedname>Ikarus::linearElasticMaterialTangent3D</qualifiedname>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
<para>Computes the 3D linear elastic material tangent matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>Young&apos;s modulus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nu</parametername>
</parameternamelist>
<parameterdescription>
<para>Poisson&apos;s ratio. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>6x6 material tangent matrix. </para>
</simplesect>
<xrefsect id="d2/d04/a00281_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the material library <ref refid="da/d50/a00301_1ae7fcb8a58863e680e7a25d75766df15c" kindref="member">Ikarus::LinearElasticity</ref>. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="48" column="7" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="48" bodyend="56"/>
        <referencedby refid="d2/d1d/a01277_1ae9391f3895e965ecc5dfea1af1ac62f7" compoundref="d3/d6c/a02446" startline="137" endline="142">Ikarus::LinearElastic&lt; Basis_, FERequirements_, useEigenRef &gt;::materialTangent</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1aef16f39eb73407dd874bc14426576a4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/da0/a01341" kindref="compound">ConvertLameConstants</ref>&lt; <ref refid="df/db8/a01317" kindref="compound">YoungsModulusAndPoissonsRatio</ref> &gt;</type>
        <definition>ConvertLameConstants&lt; YoungsModulusAndPoissonsRatio &gt; Ikarus::convertLameConstants</definition>
        <argsstring>(const YoungsModulusAndPoissonsRatio &amp;p_vp)</argsstring>
        <name>convertLameConstants</name>
        <qualifiedname>Ikarus::convertLameConstants</qualifiedname>
        <param>
          <type>const <ref refid="df/db8/a01317" kindref="compound">YoungsModulusAndPoissonsRatio</ref> &amp;</type>
          <declname>p_vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="301" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="301" bodyend="304"/>
        <referencedby refid="da/d50/a00301_1a32940ef922d090491ffcaa9bf2a44aef" compoundref="df/d6a/a00119" startline="328" endline="333">toLamesFirstParameterAndShearModulus</referencedby>
        <referencedby refid="da/d50/a00301_1a4161393d679e5ec44806e6e911e26dee" compoundref="df/d6a/a00119" startline="341" endline="346">toYoungsModulusAndPoissonsRatio</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a12d4dc64780852248f63e127056a9acd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/da0/a01341" kindref="compound">ConvertLameConstants</ref>&lt; <ref refid="d9/d5c/a01321" kindref="compound">YoungsModulusAndShearModulus</ref> &gt;</type>
        <definition>ConvertLameConstants&lt; YoungsModulusAndShearModulus &gt; Ikarus::convertLameConstants</definition>
        <argsstring>(const YoungsModulusAndShearModulus &amp;p_vp)</argsstring>
        <name>convertLameConstants</name>
        <qualifiedname>Ikarus::convertLameConstants</qualifiedname>
        <param>
          <type>const <ref refid="d9/d5c/a01321" kindref="compound">YoungsModulusAndShearModulus</ref> &amp;</type>
          <declname>p_vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="305" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ac497080ab39c3c111c14fe3494537f19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/da0/a01341" kindref="compound">ConvertLameConstants</ref>&lt; <ref refid="dd/d5d/a01325" kindref="compound">YoungsModulusAndBulkModulus</ref> &gt;</type>
        <definition>ConvertLameConstants&lt; YoungsModulusAndBulkModulus &gt; Ikarus::convertLameConstants</definition>
        <argsstring>(const YoungsModulusAndBulkModulus &amp;p_vp)</argsstring>
        <name>convertLameConstants</name>
        <qualifiedname>Ikarus::convertLameConstants</qualifiedname>
        <param>
          <type>const <ref refid="dd/d5d/a01325" kindref="compound">YoungsModulusAndBulkModulus</ref> &amp;</type>
          <declname>p_vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="309" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a5d423c9a6e6c2c397453649be42ac3c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/da0/a01341" kindref="compound">ConvertLameConstants</ref>&lt; <ref refid="db/dec/a01337" kindref="compound">LamesFirstParameterAndShearModulus</ref> &gt;</type>
        <definition>ConvertLameConstants&lt; LamesFirstParameterAndShearModulus &gt; Ikarus::convertLameConstants</definition>
        <argsstring>(const LamesFirstParameterAndShearModulus &amp;p_vp)</argsstring>
        <name>convertLameConstants</name>
        <qualifiedname>Ikarus::convertLameConstants</qualifiedname>
        <param>
          <type>const <ref refid="db/dec/a01337" kindref="compound">LamesFirstParameterAndShearModulus</ref> &amp;</type>
          <declname>p_vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="313" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a1f84cd5962ef6c6b47fba01a130c7ea1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/da0/a01341" kindref="compound">ConvertLameConstants</ref>&lt; <ref refid="dc/d2a/a01333" kindref="compound">BulkModulusAndLamesFirstParameter</ref> &gt;</type>
        <definition>ConvertLameConstants&lt; BulkModulusAndLamesFirstParameter &gt; Ikarus::convertLameConstants</definition>
        <argsstring>(const BulkModulusAndLamesFirstParameter &amp;p_vp)</argsstring>
        <name>convertLameConstants</name>
        <qualifiedname>Ikarus::convertLameConstants</qualifiedname>
        <param>
          <type>const <ref refid="dc/d2a/a01333" kindref="compound">BulkModulusAndLamesFirstParameter</ref> &amp;</type>
          <declname>p_vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="317" column="31" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a32940ef922d090491ffcaa9bf2a44aef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::toLamesFirstParameterAndShearModulus</definition>
        <argsstring>(const YoungsModulusAndPoissonsRatio &amp;matParameter)</argsstring>
        <name>toLamesFirstParameterAndShearModulus</name>
        <qualifiedname>Ikarus::toLamesFirstParameterAndShearModulus</qualifiedname>
        <param>
          <type>const <ref refid="df/db8/a01317" kindref="compound">YoungsModulusAndPoissonsRatio</ref> &amp;</type>
          <declname>matParameter</declname>
        </param>
        <briefdescription>
<para>Converts Young&apos;s modulus and Poisson&apos;s ratio to Lame&apos;s first parameter and shear modulus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Young&apos;s modulus and Poisson&apos;s ratio. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lame&apos;s first parameter and shear modulus. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="328" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="328" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a4161393d679e5ec44806e6e911e26dee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::toYoungsModulusAndPoissonsRatio</definition>
        <argsstring>(const LamesFirstParameterAndShearModulus &amp;matParameter)</argsstring>
        <name>toYoungsModulusAndPoissonsRatio</name>
        <qualifiedname>Ikarus::toYoungsModulusAndPoissonsRatio</qualifiedname>
        <param>
          <type>const <ref refid="db/dec/a01337" kindref="compound">LamesFirstParameterAndShearModulus</ref> &amp;</type>
          <declname>matParameter</declname>
        </param>
        <briefdescription>
<para>Converts Lame&apos;s first parameter and shear modulus to Young&apos;s modulus and Poisson&apos;s ratio. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Lame&apos;s first parameter and shear modulus. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Young&apos;s modulus and Poisson&apos;s ratio. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" line="341" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/finiteelements/physicshelper.hh" bodystart="341" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a88c3bed4f749a93760f96c52c91091e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NonLinearOperatorImpl</type>
          </param>
          <param>
            <type>typename LinearSolver</type>
            <defval>utils::SolverDefault</defval>
          </param>
          <param>
            <type>typename UpdateFunctionType</type>
            <defval>utils::UpdateDefault</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeNewtonRaphson</definition>
        <argsstring>(const NonLinearOperatorImpl &amp;p_nonLinearOperator, LinearSolver &amp;&amp;p_linearSolver={}, UpdateFunctionType &amp;&amp;p_updateFunction={})</argsstring>
        <name>makeNewtonRaphson</name>
        <qualifiedname>Ikarus::makeNewtonRaphson</qualifiedname>
        <param>
          <type>const NonLinearOperatorImpl &amp;</type>
          <declname>p_nonLinearOperator</declname>
        </param>
        <param>
          <type><ref refid="da/d50/a00301_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">LinearSolver</ref> &amp;&amp;</type>
          <declname>p_linearSolver</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>UpdateFunctionType &amp;&amp;</type>
          <declname>p_updateFunction</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Function to create a <ref refid="d3/d92/a01393" kindref="compound">NewtonRaphson</ref> solver instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NonLinearOperatorImpl</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the nonlinear operator to solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LinearSolver</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the linear solver used internally (default is SolverDefault). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>UpdateFunctionType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the update function (default is UpdateDefault). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_nonLinearOperator</parametername>
</parameternamelist>
<parameterdescription>
<para>Nonlinear operator to solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_linearSolver</parametername>
</parameternamelist>
<parameterdescription>
<para>Linear solver used internally (default is SolverDefault). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_updateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Update function (default is UpdateDefault). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shared pointer to the <ref refid="d3/d92/a01393" kindref="compound">NewtonRaphson</ref> solver instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphson.hh" line="156" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphson.hh" bodystart="156" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a674c58e9e3dd89675adb727587a08850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NonLinearOperatorImpl</type>
          </param>
          <param>
            <type>typename LinearSolver</type>
            <defval>utils::SolverDefault</defval>
          </param>
          <param>
            <type>typename UpdateFunctionType</type>
            <defval>utils::UpdateDefault</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeNewtonRaphsonWithSubsidiaryFunction</definition>
        <argsstring>(const NonLinearOperatorImpl &amp;p_nonLinearOperator, LinearSolver &amp;&amp;p_linearSolver={}, UpdateFunctionType &amp;&amp;p_updateFunction={})</argsstring>
        <name>makeNewtonRaphsonWithSubsidiaryFunction</name>
        <qualifiedname>Ikarus::makeNewtonRaphsonWithSubsidiaryFunction</qualifiedname>
        <param>
          <type>const NonLinearOperatorImpl &amp;</type>
          <declname>p_nonLinearOperator</declname>
        </param>
        <param>
          <type><ref refid="da/d50/a00301_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">LinearSolver</ref> &amp;&amp;</type>
          <declname>p_linearSolver</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>UpdateFunctionType &amp;&amp;</type>
          <declname>p_updateFunction</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Function to create a <ref refid="d3/d92/a01393" kindref="compound">NewtonRaphson</ref> with subsidiary function solver instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NonLinearOperatorImpl</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the nonlinear operator to solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LinearSolver</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the linear solver used internally (default is SolverDefault). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>UpdateFunctionType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the update function (default is UpdateDefault). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_nonLinearOperator</parametername>
</parameternamelist>
<parameterdescription>
<para>Nonlinear operator to solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_linearSolver</parametername>
</parameternamelist>
<parameterdescription>
<para>Linear solver used internally (default is SolverDefault). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_updateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Update function (default is UpdateDefault). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shared pointer to the <ref refid="d3/d92/a01393" kindref="compound">NewtonRaphson</ref> solver instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" line="213" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/newtonraphsonwithscalarsubsidiaryfunction.hh" bodystart="213" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a729c70214792799fb38684febff75e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NonLinearOperatorImpl</type>
          </param>
          <param>
            <type>PreConditioner</type>
            <declname>preConditioner</declname>
            <defname>preConditioner</defname>
            <defval>PreConditioner::IncompleteCholesky</defval>
          </param>
          <param>
            <type>typename UpdateFunctionType</type>
            <defval>utils::UpdateDefault</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeTrustRegion</definition>
        <argsstring>(const NonLinearOperatorImpl &amp;p_nonLinearOperator, UpdateFunctionType &amp;&amp;p_updateFunction={})</argsstring>
        <name>makeTrustRegion</name>
        <qualifiedname>Ikarus::makeTrustRegion</qualifiedname>
        <param>
          <type>const NonLinearOperatorImpl &amp;</type>
          <declname>p_nonLinearOperator</declname>
        </param>
        <param>
          <type>UpdateFunctionType &amp;&amp;</type>
          <declname>p_updateFunction</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Creates an instance of the <ref refid="d4/d20/a01421" kindref="compound">TrustRegion</ref> solver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NonLinearOperatorImpl</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the nonlinear operator to solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preConditioner</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the preconditioner used internally (default is IncompleteCholesky). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>UpdateFunctionType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the update function (default is UpdateDefault). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_nonLinearOperator</parametername>
</parameternamelist>
<parameterdescription>
<para>Nonlinear operator to solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_updateFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Update function (default is UpdateDefault). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shared pointer to the <ref refid="d4/d20/a01421" kindref="compound">TrustRegion</ref> solver instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" line="473" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/nonlinearsolver/trustregion.hh" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a9a51c77ff0881c59e81e96c902b1fcd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GridView</type>
          </param>
          <param>
            <type>typename PreBasisFactory</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeBasis</definition>
        <argsstring>(const GridView &amp;gv, const PreBasisFactory &amp;pb)</argsstring>
        <name>makeBasis</name>
        <qualifiedname>Ikarus::makeBasis</qualifiedname>
        <param>
          <type>const GridView &amp;</type>
          <declname>gv</declname>
        </param>
        <param>
          <type>const PreBasisFactory &amp;</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
<para>Factory function to create a <ref refid="d2/d9b/a01433" kindref="compound">Basis</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Factory function that creates a <ref refid="d2/d9b/a01433" kindref="compound">Basis</ref> object from a given grid view and pre-basis factory.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GridView</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the grid view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PreBasisFactory</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the pre-basis factory function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gv</parametername>
</parameternamelist>
<parameterdescription>
<para>The grid view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pb</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-basis factory function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="d2/d9b/a01433" kindref="compound">Basis</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/basis.hh" line="108" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/basis.hh" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a41f7bb765ece7777057ad9bde7b2c10f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PreBasis</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::makeBasis</definition>
        <argsstring>(const Dune::Functions::DefaultGlobalBasis&lt; PreBasis &gt; &amp;gb)</argsstring>
        <name>makeBasis</name>
        <qualifiedname>Ikarus::makeBasis</qualifiedname>
        <param>
          <type>const Dune::Functions::DefaultGlobalBasis&lt; PreBasis &gt; &amp;</type>
          <declname>gb</declname>
        </param>
        <briefdescription>
<para>Factory function to create a <ref refid="d2/d9b/a01433" kindref="compound">Basis</ref> object from a DefaultGlobalBasis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PreBasis</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the pre-basis associated with the DefaultGlobalBasis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gb</parametername>
</parameternamelist>
<parameterdescription>
<para>The DefaultGlobalBasis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="d2/d9b/a01433" kindref="compound">Basis</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/basis.hh" line="122" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/basis.hh" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ac2c6469be19ce4ef2e630bfa1c5a5e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::transpose</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>transpose</name>
        <qualifiedname>Ikarus::transpose</qualifiedname>
        <param>
          <type>const <ref refid="d9/db0/a01437" kindref="compound">Eigen::EigenBase</ref>&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" line="33" column="8" declfile="/__w/ikarus/ikarus/repo/ikarus/utils/concepts.hh" declline="33" declcolumn="8"/>
        <referencedby refid="d6/d16/a01269_1a90e0bb85ca10d2bb5b97f509cc973931" compoundref="db/d5f/a02440" startline="479" endline="499">Ikarus::KirchhoffLoveShell&lt; Basis_, FERequirements_, useEigenRef &gt;::bopBending</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ab3afd8732c7518fb5cad5fc85f660ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d4/deb/a01345" kindref="compound">Dune::FieldVector</ref>&lt; ScalarType, size &gt;</type>
        <definition>Dune::FieldVector&lt; ScalarType, size &gt; Ikarus::toDune</definition>
        <argsstring>(const Eigen::Vector&lt; ScalarType, size &gt; &amp;vec)</argsstring>
        <name>toDune</name>
        <qualifiedname>Ikarus::toDune</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ScalarType, size &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Create Eigen::Vector to <ref refid="d4/deb/a01345" kindref="compound">Dune::FieldVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the vectors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the vectors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::Vector to be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dune::FieldVector&lt;ScalarType, size&gt; representing the converted vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" line="30" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" bodystart="30" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a93a33caf49e0072f27298b2745e9ae56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>rows</declname>
            <defname>rows</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d4/deb/a01345" kindref="compound">Dune::FieldVector</ref>&lt; ScalarType, rows &gt;</type>
        <definition>Dune::FieldVector&lt; ScalarType, rows &gt; Ikarus::toDune</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, rows, 0 &gt; &amp;vec)</argsstring>
        <name>toDune</name>
        <qualifiedname>Ikarus::toDune</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, rows, 0 &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Convert Eigen::Matrix to <ref refid="d4/deb/a01345" kindref="compound">Dune::FieldVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The matrix has fixed row size. The matrix needs to have a single column. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the vectors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows in the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::Matrix to be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dune::FieldVector&lt;ScalarType, rows&gt; representing the converted matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" line="47" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" bodystart="47" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a332dc3abf615826c1eeb5e4dba37dfb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>rows</declname>
            <defname>rows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>cols</declname>
            <defname>cols</defname>
          </param>
        </templateparamlist>
        <type>Dune::FieldMatrix&lt; ScalarType, rows, cols &gt;</type>
        <definition>Dune::FieldMatrix&lt; ScalarType, rows, cols &gt; Ikarus::toDune</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, rows, cols &gt; &amp;mat)</argsstring>
        <name>toDune</name>
        <qualifiedname>Ikarus::toDune</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, rows, cols &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Convert Eigen::Matrix to Dune::FieldMatrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The matrix has fixed rows and column size <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows in the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns in the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::Matrix to be converted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dune::FieldMatrix&lt;ScalarType, rows, cols&gt; representing the converted matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" line="66" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ab33f0f88435ac31e2f1230b321fe16db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Map&lt; const Eigen::Vector&lt; ScalarType, size &gt; &gt;</type>
        <definition>Eigen::Map&lt; const Eigen::Vector&lt; ScalarType, size &gt; &gt; Ikarus::toEigenMap</definition>
        <argsstring>(const Dune::FieldVector&lt; ScalarType, size &gt; &amp;vec)</argsstring>
        <name>toEigenMap</name>
        <qualifiedname>Ikarus::toEigenMap</qualifiedname>
        <param>
          <type>const <ref refid="d4/deb/a01345" kindref="compound">Dune::FieldVector</ref>&lt; ScalarType, size &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>View a <ref refid="d4/deb/a01345" kindref="compound">Dune::FieldVector</ref> as an Eigen::Vector using Map, no copies take place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="d4/deb/a01345" kindref="compound">Dune::FieldVector</ref> to be viewed as Eigen::Vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Map&lt;const Eigen::Vector&lt;ScalarType, size&gt;&gt; representing the viewed vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" line="83" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1a8f500d064c150a65ba93e8a4d5fe6df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Map&lt; Eigen::Vector&lt; ScalarType, size &gt; &gt;</type>
        <definition>Eigen::Map&lt; Eigen::Vector&lt; ScalarType, size &gt; &gt; Ikarus::toEigenMap</definition>
        <argsstring>(Dune::FieldVector&lt; ScalarType, size &gt; &amp;vec)</argsstring>
        <name>toEigenMap</name>
        <qualifiedname>Ikarus::toEigenMap</qualifiedname>
        <param>
          <type><ref refid="d4/deb/a01345" kindref="compound">Dune::FieldVector</ref>&lt; ScalarType, size &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>View a constant <ref refid="d4/deb/a01345" kindref="compound">Dune::FieldVector</ref> as a constant Eigen::Vector, no copies take place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar type of the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="d4/deb/a01345" kindref="compound">Dune::FieldVector</ref> to be viewed as Eigen::Vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Map&lt;Eigen::Vector&lt;ScalarType, size&gt;&gt; representing the viewed vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" line="95" column="14" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/eigendunetransformations.hh" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga42681f6971dbcfa99e66dc7593f95b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PreBasis</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Ikarus::flatPreBasis</definition>
        <argsstring>(PreBasis const &amp;preBasis)</argsstring>
        <name>flatPreBasis</name>
        <qualifiedname>Ikarus::flatPreBasis</qualifiedname>
        <param>
          <type>PreBasis const &amp;</type>
          <declname>preBasis</declname>
        </param>
        <briefdescription>
<para>Generator function for a flatted PreBasis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/flatprebasis.hh" line="104" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/flatprebasis.hh" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ac8243891c1b961e50a066140ab79a142" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Ikarus::init</definition>
        <argsstring>(int argc, char **argv, bool enableFileLogger=true)</argsstring>
        <name>init</name>
        <qualifiedname>Ikarus::init</qualifiedname>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enableFileLogger</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Initializes the <ref refid="da/d50/a00301" kindref="compound">Ikarus</ref> framework. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of command-line arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>The command-line arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enableFileLogger</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to enable the file logger. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><ulink url="https://patorjk.com/software/taag/#p=testall&amp;f=Univers&amp;t=IKARUS">https://patorjk.com/software/taag/#p=testall&amp;f=Univers&amp;t=IKARUS</ulink> (font: Lean)</para>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/init.hh" line="81" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/init.hh" bodystart="81" bodyend="105"/>
        <referencedby refid="df/da9/a00263_1a0e4f7cface71bec1c24bbed3aaa798d8" compoundref="df/da9/a00263" startline="34" endline="167">PYBIND11_MODULE</referencedby>
        <referencedby refid="d6/d82/a00293_1ga3792308fbe7fa149d290329ed46c5bb9" compoundref="de/d91/a02458" startline="37" endline="52">Ikarus::Python::registerBasis</referencedby>
        <referencedby refid="d1/d67/a00310_1a331fd78be5a4155963abe5829282c8f1" compoundref="dc/d57/a00194" startline="17" endline="30">Ikarus::Python::registerBoundaryPatch</referencedby>
        <referencedby refid="d6/d82/a00293_1ga39b6df6adfe4858b13ac71f5830f29f6" compoundref="d3/d19/a02464" startline="49" endline="113">Ikarus::Python::registerDirichletValues</referencedby>
        <referencedby refid="d6/d82/a00293_1ga40f83e4d7b90006b1019add3b1b218b5" compoundref="de/df3/a00185" startline="45" endline="137">Ikarus::Python::registerElement</referencedby>
        <referencedby refid="d6/d82/a00293_1ga31d84874c3995448666f6a1e070647d2" compoundref="d1/d04/a02443" startline="45" endline="74">Ikarus::Python::registerKirchhoffLoveShell</referencedby>
        <referencedby refid="d1/d67/a00310_1a4124469fcacfc527cb971b40fe86e244" compoundref="df/db6/a02455" startline="24" endline="115">Ikarus::Python::registerNonLinearElastic</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gaa33adfa2e95d7040a816bb2da81d275d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::orthonormalizeMatrixColumns</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>orthonormalizeMatrixColumns</name>
        <qualifiedname>Ikarus::orthonormalizeMatrixColumns</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Orthonormalizes all Matrix columns using Gram-Schmidt Orthogonalization. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The input matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> Matrix with orthonormalized columns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="35" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="35" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga545d74839895f4576a3b8c97d72abefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsFlatEigenVector</definition>
        <argsstring>(Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsFlatEigenVector</name>
        <qualifiedname>Ikarus::viewAsFlatEigenVector</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>View Dune::BlockVector as an Eigen::Vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blockedVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Map of the BlockVector as a flat Eigen::Vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="57" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="57" bodyend="62"/>
        <referencedby refid="da/dd8/a01265_1a22e25753bb3cf0c5b296c3af10c443b6" compoundref="d7/d06/a00131" startline="462" endline="498">Ikarus::EnhancedAssumedStrains&lt; DisplacementBasedElement &gt;::calculateAt</referencedby>
        <referencedby refid="da/dd8/a01265_1afa32c429e6121e0573a0fedbe43d2f45" compoundref="d7/d06/a00131" startline="558" endline="597">Ikarus::EnhancedAssumedStrains&lt; DisplacementBasedElement &gt;::calculateVectorImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga3beeb26c911116fa02df8756214484aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsFlatEigenVector</definition>
        <argsstring>(const Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsFlatEigenVector</name>
        <qualifiedname>Ikarus::viewAsFlatEigenVector</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>View const Dune::BlockVector as an Eigen::Vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blockedVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Map of the BlockVector as a flat Eigen::Vector (const version). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="72" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gaf9d7cf401f9f03ce1aae728c646ce178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsEigenMatrixAsDynFixed</definition>
        <argsstring>(Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsEigenMatrixAsDynFixed</name>
        <qualifiedname>Ikarus::viewAsEigenMatrixAsDynFixed</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>View Dune::BlockVector as an Eigen::Matrix with dynamic rows and fixed columns depending on the size of the ValueType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blockedVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Map of the BlockVector as a dynamic Eigen::Matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="88" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="88" bodyend="93"/>
        <referencedby refid="d6/d16/a01269_1a02b95fb491292c3230a70d4ea77b85c8" compoundref="db/d5f/a02440" startline="231" endline="265">Ikarus::KirchhoffLoveShell&lt; Basis_, FERequirements_, useEigenRef &gt;::computeMaterialAndStrains</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gaf1c6bdf14e40ee46e881f646e1c28b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsEigenMatrixAsDynFixed</definition>
        <argsstring>(const Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsEigenMatrixAsDynFixed</name>
        <qualifiedname>Ikarus::viewAsEigenMatrixAsDynFixed</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>Const view Dune::BlockVector as an Eigen::Matrix with dynamic rows and fixed columns depending on the size of the ValueType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blockedVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Map of the BlockVector as a dynamic Eigen::Matrix (const version). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="104" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="104" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gac25618d0e7c4aece653662d2541b61ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsEigenMatrixFixedDyn</definition>
        <argsstring>(Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsEigenMatrixFixedDyn</name>
        <qualifiedname>Ikarus::viewAsEigenMatrixFixedDyn</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>View Dune::BlockVector as an Eigen::Matrix with fixed rows depending on the size of the ValueType and dynamic columns. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blockedVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Map of the BlockVector as a fixed-size Eigen::Matrix with dynamic columns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="121" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="121" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga146a052f6eb97304a8172c7b65fe70fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::viewAsEigenMatrixFixedDyn</definition>
        <argsstring>(const Dune::BlockVector&lt; ValueType &gt; &amp;blockedVector)</argsstring>
        <name>viewAsEigenMatrixFixedDyn</name>
        <qualifiedname>Ikarus::viewAsEigenMatrixFixedDyn</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; ValueType &gt; &amp;</type>
          <declname>blockedVector</declname>
        </param>
        <briefdescription>
<para>Const view Dune::BlockVector as an Eigen::Matrix with fixed rows depending on the size of the ValueType and dynamic columns. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blockedVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Map of the BlockVector as a fixed-size Eigen::Matrix with dynamic columns (const version). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="136" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="136" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga609664964681787f2f736f772b82a01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t Ikarus::correctionSize</definition>
        <argsstring>(const Dune::BlockVector&lt; Type &gt; &amp;a)</argsstring>
        <name>correctionSize</name>
        <qualifiedname>Ikarus::correctionSize</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; Type &gt; &amp;</type>
          <declname>a</declname>
        </param>
    <requiresclause>requires { Type::correctionSize; }    </requiresclause>
        <briefdescription>
<para>Returns the total correction size of a block vector with a Manifold as the underlying type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Manifold type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Total correction size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="151" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="151" bodyend="154"/>
        <referencedby refid="db/d7b/a00296_1ga609664964681787f2f736f772b82a01e" compoundref="df/d03/a00062" startline="151" endline="154">correctionSize</referencedby>
        <referencedby refid="db/d7b/a00296_1gace6bdf5ec8a965423e5a13c20c91dd89" compoundref="df/d03/a00062" startline="179" endline="187">operator+=</referencedby>
        <referencedby refid="db/d7b/a00296_1ga09e1060b2b3a53a77bb0da6345d844b1" compoundref="df/d03/a00062" startline="199" endline="204">operator-=</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gac1df27a0dfa864327029cdb906a1840c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t Ikarus::valueSize</definition>
        <argsstring>(const Dune::BlockVector&lt; Type &gt; &amp;a)</argsstring>
        <name>valueSize</name>
        <qualifiedname>Ikarus::valueSize</qualifiedname>
        <param>
          <type>const Dune::BlockVector&lt; Type &gt; &amp;</type>
          <declname>a</declname>
        </param>
    <requiresclause>requires { Type::valueSize; }    </requiresclause>
        <briefdescription>
<para>Returns the total value size of a block vector with a Manifold as the underlying type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Manifold type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Total value size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="164" column="10" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="164" bodyend="167"/>
        <referencedby refid="db/d7b/a00296_1gad6bf040c4e1fadbf243d4c1c9d2855b2" compoundref="df/d03/a00062" startline="239" endline="248">addInEmbedding</referencedby>
        <referencedby refid="db/d7b/a00296_1gac1df27a0dfa864327029cdb906a1840c" compoundref="df/d03/a00062" startline="164" endline="167">valueSize</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gace6bdf5ec8a965423e5a13c20c91dd89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Dune::BlockVector&lt; Type &gt; &amp;</type>
        <definition>Dune::BlockVector&lt; Type &gt; &amp; Ikarus::operator+=</definition>
        <argsstring>(Dune::BlockVector&lt; Type &gt; &amp;a, const Eigen::MatrixBase&lt; Derived &gt; &amp;b)</argsstring>
        <name>operator+=</name>
        <qualifiedname>Ikarus::operator+=</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; Type &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>b</declname>
        </param>
    <requiresclause>( <ref refid="d3/da1/a01613" kindref="compound">Ikarus::Concepts::AddAssignAble</ref>&lt;Type, decltype(b.template segment&lt;Type::correctionSize&gt;(0))&gt;and requires() { Type::correctionSize; })    </requiresclause>
        <briefdescription>
<para>Enables the += operator for Dune::BlockVector += Eigen::Vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Manifold type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Eigen::Matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified Dune::BlockVector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="179" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="179" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga09e1060b2b3a53a77bb0da6345d844b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Dune::BlockVector&lt; Type &gt; &amp;</type>
        <definition>Dune::BlockVector&lt; Type &gt; &amp; Ikarus::operator-=</definition>
        <argsstring>(Dune::BlockVector&lt; Type &gt; &amp;a, const Eigen::MatrixBase&lt; Derived &gt; &amp;b)</argsstring>
        <name>operator-=</name>
        <qualifiedname>Ikarus::operator-=</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; Type &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>b</declname>
        </param>
    <requiresclause>( <ref refid="d3/da1/a01613" kindref="compound">Ikarus::Concepts::AddAssignAble</ref>&lt;Type, decltype(b.template segment&lt;Type::correctionSize&gt;(0))&gt;and requires() { Type::correctionSize; })    </requiresclause>
        <briefdescription>
<para>Enables the -= operator for Dune::BlockVector += Eigen::Vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Manifold type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Eigen::Matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified Dune::BlockVector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="199" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gaada5360aeb17e59d87ae2ba82057421d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Dune::TupleVector&lt; Types... &gt; &amp;</type>
        <definition>Dune::TupleVector&lt; Types... &gt; &amp; Ikarus::operator+=</definition>
        <argsstring>(Dune::TupleVector&lt; Types... &gt; &amp;a, const Eigen::MatrixBase&lt; Derived &gt; &amp;b)</argsstring>
        <name>operator+=</name>
        <qualifiedname>Ikarus::operator+=</qualifiedname>
        <param>
          <type>Dune::TupleVector&lt; Types... &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Enables the += operator for Dune::TupleVector += Eigen::Vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Types</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of the elements in the TupleVector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::TupleVector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Eigen::Matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified Dune::TupleVector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="216" column="21" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="216" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gad6bf040c4e1fadbf243d4c1c9d2855b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ManifoldPoint</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Dune::BlockVector&lt; ManifoldPoint &gt; &amp;</type>
        <definition>Dune::BlockVector&lt; ManifoldPoint &gt; &amp; Ikarus::addInEmbedding</definition>
        <argsstring>(Dune::BlockVector&lt; ManifoldPoint &gt; &amp;a, const Eigen::MatrixBase&lt; Derived &gt; &amp;b)</argsstring>
        <name>addInEmbedding</name>
        <qualifiedname>Ikarus::addInEmbedding</qualifiedname>
        <param>
          <type>Dune::BlockVector&lt; ManifoldPoint &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>b</declname>
        </param>
    <requiresclause>( <ref refid="d3/da1/a01613" kindref="compound">Ikarus::Concepts::AddAssignAble</ref>&lt;ManifoldPoint, decltype(b.template segment&lt;ManifoldPoint::valueSize&gt;(0))&gt;and requires() { ManifoldPoint::valueSize; })    </requiresclause>
        <briefdescription>
<para>Enables the addition in the embedding space of a vector in the space M^n, where M is a manifold with the points of type ManifoldPoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ManifoldPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Manifold type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>ManifoldPoint of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Dune::BlockVector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Input Eigen::Matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified Dune::BlockVector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="239" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="239" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga0ffc0c74dbd9aeee3e53b199a21b828c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::norm</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;v)</argsstring>
        <name>norm</name>
        <qualifiedname>Ikarus::norm</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>v</declname>
        </param>
    <requiresclause>(!std::floating_point&lt;Derived&gt;)    </requiresclause>
        <briefdescription>
<para>Adding free norm function to <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Norm of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="258" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gaceb8dc8f6f43516dabf75155b1f22d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::norm</definition>
        <argsstring>(const std::floating_point auto &amp;v)</argsstring>
        <name>norm</name>
        <qualifiedname>Ikarus::norm</qualifiedname>
        <param>
          <type>const std::floating_point auto &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Helper Free Function to have the same interface as for <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> Vector Types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Input scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Absolute value of the scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="266" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gacbc60e06e8e43a9bc14660189eb1baa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator*</definition>
        <argsstring>(const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;a, const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;b)</argsstring>
        <name>operator*</name>
        <qualifiedname>Ikarus::operator*</qualifiedname>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Eigen::DiagonalMatrix Product Missing in <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the diagonal matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input DiagonalMatrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Input DiagonalMatrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Product of the two DiagonalMatrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="278" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga96968bbff353ac49f48d0aa8b9810b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator+=</definition>
        <argsstring>(Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;a, const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;b)</argsstring>
        <name>operator+=</name>
        <qualifiedname>Ikarus::operator+=</qualifiedname>
        <param>
          <type>Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>In-place addition for Eigen::DiagonalMatrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the diagonal matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input DiagonalMatrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Input DiagonalMatrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the modified DiagonalMatrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="292" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga098b554b29619e0cea837f3daa6e0e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator+</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;a, const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>Ikarus::operator+</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Eigen::Matrix + Eigen::DiagonalMatrix addition missing in <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the diagonal matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Input DiagonalMatrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of the <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix and DiagonalMatrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="308" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="308" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gafe54695fd1436b5f2d75934a6fda8fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator+</definition>
        <argsstring>(const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;a, const Eigen::MatrixBase&lt; Derived &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>Ikarus::operator+</qualifiedname>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Eigen::DiagonalMatrix + Eigen::Matrix addition missing in <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the diagonal matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input DiagonalMatrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of the DiagonalMatrix and <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="325" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="325" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga9ab6437d6235e378a6171bfffd4bf1cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator-</definition>
        <argsstring>(const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;a)</argsstring>
        <name>operator-</name>
        <qualifiedname>Ikarus::operator-</qualifiedname>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Unary minus for Eigen::DiagonalMatrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the diagonal matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input DiagonalMatrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Negation of the DiagonalMatrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="338" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="338" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga0fe1660eb760ecc49838d130ba6c6712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename Derived2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator+</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;a, const Eigen::DiagonalWrapper&lt; Derived2 &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>Ikarus::operator+</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalWrapper&lt; Derived2 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Addition of Eigen::Matrix and Eigen::DiagonalWrapper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived2</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> DiagonalWrapper. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> DiagonalWrapper. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix and DiagonalWrapper. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="352" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="352" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga9377cd2cf3a5ec468d140cb7063efa58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename Derived2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::operator+</definition>
        <argsstring>(const Eigen::DiagonalWrapper&lt; Derived &gt; &amp;a, const Eigen::MatrixBase&lt; Derived2 &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>Ikarus::operator+</qualifiedname>
        <param>
          <type>const Eigen::DiagonalWrapper&lt; Derived &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived2 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Addition of Eigen::DiagonalWrapper and Eigen::Matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> DiagonalWrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived2</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> DiagonalWrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sum of DiagonalWrapper and <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="368" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="368" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gac2cdcc3047e59b91a4874a1355503cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; Ikarus::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Ikarus::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; Scalar, size &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Output stream operator for Eigen::DiagonalMatrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the diagonal matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>Output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input DiagonalMatrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="382" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gabd35ea7f69bcc71ee90ea421a1c48167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived Ikarus::sym</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>sym</name>
        <qualifiedname>Ikarus::sym</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the symmetric part of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Symmetric part of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="395" column="11" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="395" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga1496a9776a583f8b09c4244a68453394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived Ikarus::skew</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>skew</name>
        <qualifiedname>Ikarus::skew</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the skew part of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Skew part of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="407" column="11" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="407" bodyend="409"/>
        <referencedby refid="d6/d16/a01269_1a1acdd9123a1e1268a5f990b5655a737c" compoundref="db/d5f/a02440" startline="431" endline="476">Ikarus::KirchhoffLoveShell&lt; Basis_, FERequirements_, useEigenRef &gt;::kgBending</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga40c08050aff1e3e49e58c7823ecbcc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Ikarus::printForMaple</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;A)</argsstring>
        <name>printForMaple</name>
        <qualifiedname>Ikarus::printForMaple</qualifiedname>
        <param>
          <type>const <ref refid="d9/db0/a01437" kindref="compound">Eigen::EigenBase</ref>&lt; Derived &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Method to print the matrix in a format that can directly be copied to Maple. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>The derived type of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The input matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="418" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="418" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga821ecf80e4a83241318d825f49cd79e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FieldVectorT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::createRandomVector</definition>
        <argsstring>(typename FieldVectorT::value_type lower=-1, typename FieldVectorT::value_type upper=1)</argsstring>
        <name>createRandomVector</name>
        <qualifiedname>Ikarus::createRandomVector</qualifiedname>
        <param>
          <type>typename FieldVectorT::value_type</type>
          <declname>lower</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>typename FieldVectorT::value_type</type>
          <declname>upper</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Creates a random vector of the specified type within a given range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FieldVectorT</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the random values (default is -1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the random values (default is 1). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A random vector within the specified range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="441" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="441" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1gabf7cb564e7fa11a403cb8439e2436205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 3, 3 &gt; Ikarus::skew</definition>
        <argsstring>(const Eigen::Vector&lt; ScalarType, 3 &gt; &amp;a)</argsstring>
        <name>skew</name>
        <qualifiedname>Ikarus::skew</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ScalarType, 3 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Create skew 3x3 matrix from 3d vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the coordinates in the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The skew matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="459" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="459" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga19d425a4fbc72c2ef7a97d71de9329a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>sizeOfCondensedIndices</declname>
            <defname>sizeOfCondensedIndices</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::staticCondensation</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;E, const std::array&lt; size_t, sizeOfCondensedIndices &gt; &amp;indices)</argsstring>
        <name>staticCondensation</name>
        <qualifiedname>Ikarus::staticCondensation</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>const std::array&lt; size_t, sizeOfCondensedIndices &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Performs static condensation on a square matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeOfCondensedIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the condensed indices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of indices to be condensed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting matrix after static condensation.</para>
</simplesect>
This function performs static condensation on a square matrix. It removes the specified indices from the matrix, computes the remaining submatrices (K11, K12, K22), and returns the result of the static condensation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="495" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="495" bodyend="508"/>
        <referencedby refid="d3/d07/a01301_1a3fb115007e1e4323b8f3d46f2b681ff0" compoundref="d2/df5/a00137" startline="160" endline="167">Ikarus::VanishingStress&lt; stressIndexPair, MaterialImpl &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga2f675229501979101656ec4dee7764d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>sizeOfRemovedCols</declname>
            <defname>sizeOfRemovedCols</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::removeCol</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;E, const std::array&lt; size_t, sizeOfRemovedCols &gt; &amp;indices)</argsstring>
        <name>removeCol</name>
        <qualifiedname>Ikarus::removeCol</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>const std::array&lt; size_t, sizeOfRemovedCols &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Removes specified columns from a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizeOfRemovedCols</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the columns to be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of column indices to be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting matrix after removing specified columns.</para>
</simplesect>
This function removes specified columns from a matrix. It computes the remaining columns after removing the specified indices and returns the resulting matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="523" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="523" bodyend="532"/>
        <referencedby refid="d3/d07/a01301_1a09ee586572c98a89b4b63e4952687ad4" compoundref="d2/df5/a00137" startline="142" endline="150">Ikarus::VanishingStress&lt; stressIndexPair, MaterialImpl &gt;::stressesImpl</referencedby>
        <referencedby refid="db/d7b/a00296_1ga378c5569b7b899586e7c8006fb776351" compoundref="df/d03/a00062" startline="549" endline="562">toVoigtAndMaybeReduce</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga378c5569b7b899586e7c8006fb776351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>typename MaterialImpl</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::toVoigtAndMaybeReduce</definition>
        <argsstring>(const Eigen::Matrix&lt; ST, 3, 3 &gt; &amp;E, const MaterialImpl &amp;material, bool isStrain=true)</argsstring>
        <name>toVoigtAndMaybeReduce</name>
        <qualifiedname>Ikarus::toVoigtAndMaybeReduce</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ST, 3, 3 &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>const MaterialImpl &amp;</type>
          <declname>material</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isStrain</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Converts a 3x3 matrix to Voigt notation, possibly reducing it based on material properties. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ST</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MaterialImpl</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the material implementation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 3x3 matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>material</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the material implementation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isStrain</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if the matrix represents strain (default is true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting matrix in Voigt notation.</para>
</simplesect>
This function converts a 3x3 matrix to its Voigt notation. If the material is not reduced, the full Voigt notation is returned. Otherwise, the specified columns (based on material properties, such as <ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref>) are removed, and the reduced Voigt notation is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="549" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="549" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga30500f2c49b7d1997c7eb7b6ee90ad75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Material</type>
          </param>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) Ikarus::enlargeIfReduced</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Derived &gt; &amp;E)</argsstring>
        <name>enlargeIfReduced</name>
        <qualifiedname>Ikarus::enlargeIfReduced</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <briefdescription>
<para>Enlarges a matrix if it reduced in the context of material laws, i.e., <ref refid="d3/d07/a01301" kindref="compound">VanishingStress</ref> If the material is not reduced the untouched matrix is returned and rendering the function as a NoOp. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="d5/d6f/a01281" kindref="compound">Material</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the material. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto Resulting matrix based on material properties.</para>
</simplesect>
This function takes an input matrix and, based on the material properties, either returns the original matrix (if it is not reduced) or enlarges the matrix by filling in the specified columns with zeros (if it is reduced). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" line="577" column="12" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/linearalgebrahelper.hh" bodystart="577" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="db/d7b/a00296_1ga5db6e8f04892e85e6b17e276cdbd0e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageType</type>
          </param>
        </templateparamlist>
        <type>MessageType &amp;</type>
        <definition>MessageType &amp; Ikarus::increment</definition>
        <argsstring>(MessageType &amp;e)</argsstring>
        <name>increment</name>
        <qualifiedname>Ikarus::increment</qualifiedname>
        <param>
          <type>MessageType &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Increments the given enum value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MessageType</parametername>
</parameternamelist>
<parameterdescription>
<para>The enum type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The enum value to increment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The incremented enum value. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Dune::RangeError</parametername>
</parameternamelist>
<parameterdescription>
<para>if trying to increment MessageType::END. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/makeenum.hh" line="63" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/makeenum.hh" bodystart="63" bodyend="69"/>
        <referencedby refid="dd/dba/a01545_1ac8058d5b1ebb462a10712ba598154e23" compoundref="d3/de5/a00209" startline="127" endline="130">Ikarus::IObservable&lt; MessageType &gt;::IObservable</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ae55d4d0c3478ab3ecf54ce905ddf223b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T Ikarus::ct_sqrt</definition>
        <argsstring>(T x)</argsstring>
        <name>ct_sqrt</name>
        <qualifiedname>Ikarus::ct_sqrt</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
    <requiresclause>std::integral&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Compile-time square root for integer types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The integral type for which square root is calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for which square root is calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr T The calculated square root. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/math.hh" line="46" column="15" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/math.hh" bodystart="46" bodyend="46"/>
        <referencedby refid="d3/d4a/a00297_1ga106e11a950fe2545890e811d2e9545fd" compoundref="d4/d51/a00017" startline="256" endline="271">fromVoigt</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ac00abda505aa8ccc73ce59afd165ce49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::parameter</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>parameter</name>
        <qualifiedname>Ikarus::parameter</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Creates a Parameter object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument types. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The tuple of arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The Parameter object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/nonlinearoperator.hh" line="114" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/nonlinearoperator.hh" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ab787b670f0d338c870988f417cf85f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::functions</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>functions</name>
        <qualifiedname>Ikarus::functions</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Creates a Functions object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument types. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The tuple of arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The Functions object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/nonlinearoperator.hh" line="126" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/nonlinearoperator.hh" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="da/d50/a00301_1ac4a51a33b91a6e959c61fb4a71cef19c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>DerivativeArgs</declname>
            <defname>DerivativeArgs</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>ParameterArgs</declname>
            <defname>ParameterArgs</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::initResults</definition>
        <argsstring>(const Impl::Functions&lt; DerivativeArgs... &gt; &amp;derivativesFunctions, const Impl::Parameter&lt; ParameterArgs... &gt; &amp;parameterI)</argsstring>
        <name>initResults</name>
        <qualifiedname>Ikarus::initResults</qualifiedname>
        <param>
          <type>const Impl::Functions&lt; DerivativeArgs... &gt; &amp;</type>
          <declname>derivativesFunctions</declname>
        </param>
        <param>
          <type>const Impl::Parameter&lt; ParameterArgs... &gt; &amp;</type>
          <declname>parameterI</declname>
        </param>
        <briefdescription>
<para>Initializes the results for functions and parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DerivativeArgs</parametername>
</parameternamelist>
<parameterdescription>
<para>The types of derivative arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ParameterArgs</parametername>
</parameternamelist>
<parameterdescription>
<para>The types of parameter arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>derivativesFunctions</parametername>
</parameternamelist>
<parameterdescription>
<para>The Functions object for derivative arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameterI</parametername>
</parameternamelist>
<parameterdescription>
<para>The Parameter object for parameter arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto The initialized results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/nonlinearoperator.hh" line="140" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/nonlinearoperator.hh" bodystart="140" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1ga5cfd9d098384fb067d897b3c0499b447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; typename Derived::Scalar, rank &gt;</type>
        <definition>Eigen::Tensor&lt; typename Derived::Scalar, rank &gt; Ikarus::tensorView</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;matrix, const std::array&lt; T, rank &gt; &amp;dims)</argsstring>
        <name>tensorView</name>
        <qualifiedname>Ikarus::tensorView</qualifiedname>
        <param>
          <type>const <ref refid="d9/db0/a01437" kindref="compound">Eigen::EigenBase</ref>&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::array&lt; T, rank &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
<para>View an <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix as an <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> Tensor with specified dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Rank of the resulting Tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix to be cast. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of the resulting Tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Tensor&lt;typename Derived::Scalar, rank&gt; The casted <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> Tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="32" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="32" bodyend="37"/>
        <referencedby refid="d6/d16/a01269_1aa135b5062856432512c7d29f1ff675b0" compoundref="db/d5f/a02440" startline="501" endline="512">Ikarus::KirchhoffLoveShell&lt; Basis_, FERequirements_, useEigenRef &gt;::materialTangent</referencedby>
        <referencedby refid="d9/dda/a01289_1aec2dfac0aca87f7998a0f0c2b3b63133" compoundref="d7/d9a/a00152" startline="108" endline="122">Ikarus::NeoHookeT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1gab2cea9ac847cc3635812467c9d96ceb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::dyadic</definition>
        <argsstring>(const auto &amp;A_ij, const auto &amp;B_kl)</argsstring>
        <name>dyadic</name>
        <qualifiedname>Ikarus::dyadic</qualifiedname>
        <param>
          <type>const auto &amp;</type>
          <declname>A_ij</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>B_kl</declname>
        </param>
        <briefdescription>
<para>Computes the dyadic product of two <ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> tensors. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="33">\[ \CI_{ijkl} = A_{ij}B_{kl}. \]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A_ij</parametername>
</parameternamelist>
<parameterdescription>
<para>First tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_kl</parametername>
</parameternamelist>
<parameterdescription>
<para>Second tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting tensor after the dyadic product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="47" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="47" bodyend="50"/>
        <referencedby refid="d6/d16/a01269_1aa135b5062856432512c7d29f1ff675b0" compoundref="db/d5f/a02440" startline="501" endline="512">Ikarus::KirchhoffLoveShell&lt; Basis_, FERequirements_, useEigenRef &gt;::materialTangent</referencedby>
        <referencedby refid="d9/dda/a01289_1aec2dfac0aca87f7998a0f0c2b3b63133" compoundref="d7/d9a/a00152" startline="108" endline="122">Ikarus::NeoHookeT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1ga1c9618ef351cd986d4f64fde7f52e860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symmetricIdentityFourthOrder</definition>
        <argsstring>()</argsstring>
        <name>symmetricIdentityFourthOrder</name>
        <qualifiedname>Ikarus::symmetricIdentityFourthOrder</qualifiedname>
        <briefdescription>
<para>Generates a symmetric identity fourth-order tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Symmetric identity fourth-order tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="60" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="60" bodyend="68"/>
        <referencedby refid="dc/dd5/a01293_1a7c2e0bf3afe37f104ae311bd9f2391f7" compoundref="de/d76/a00134" startline="141" endline="156">Ikarus::StVenantKirchhoffT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1ga2368a572348c410fd7e7deb6c6e3964a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symmetricFourthOrder</definition>
        <argsstring>(const auto &amp;A, const auto &amp;B)</argsstring>
        <name>symmetricFourthOrder</name>
        <qualifiedname>Ikarus::symmetricFourthOrder</qualifiedname>
        <param>
          <type>const auto &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Generates a symmetric fourth-order tensor based on two second-order input tensors. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="34">\[ \CI_{ijkl} = \frac{1}{2} \left(A_{ik}B_{jl}+A_{il}B_{jk} \right) .
\]</formula> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the tensors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>First tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Second tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Symmetric fourth-order tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="82" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="82" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1gadb08b6f9cc40847b70286dc314a23000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::identityFourthOrder</definition>
        <argsstring>()</argsstring>
        <name>identityFourthOrder</name>
        <qualifiedname>Ikarus::identityFourthOrder</qualifiedname>
        <briefdescription>
<para>Generates an identity fourth-order tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="35">\[ \CI_{ijkl} = \de_{ij}\de_{kl}. \]</formula> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Identity fourth-order tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="101" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="101" bodyend="108"/>
        <referencedby refid="dc/dd5/a01293_1a7c2e0bf3afe37f104ae311bd9f2391f7" compoundref="de/d76/a00134" startline="141" endline="156">Ikarus::StVenantKirchhoffT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1ga8fa2b440586483c1ee0f9b90b9081da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AType</type>
          </param>
          <param>
            <type>typename BType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fourthOrderIKJL</definition>
        <argsstring>(const Eigen::MatrixBase&lt; AType &gt; &amp;A, const Eigen::MatrixBase&lt; BType &gt; &amp;B)</argsstring>
        <name>fourthOrderIKJL</name>
        <qualifiedname>Ikarus::fourthOrderIKJL</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; AType &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; BType &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Computes the IKJL product of two matrices. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="36">\[ \CI_{ijkl} = A_{ik}B_{jl}, \]</formula> which simply swaps the inner slots <computeroutput>j</computeroutput>and <computeroutput>k</computeroutput> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>AType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the first matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the second matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>First matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Second matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting tensor of the IKJL product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="122" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="122" bodyend="135"/>
        <referencedby refid="d9/dda/a01289_1aec2dfac0aca87f7998a0f0c2b3b63133" compoundref="d7/d9a/a00152" startline="108" endline="122">Ikarus::NeoHookeT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1gaea03dbfcd8f85ef7af004c7e09244aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>long int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symTwoSlots</definition>
        <argsstring>(const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; dim, dim, dim, dim &gt; &gt; &amp;t, const std::array&lt; size_t, 2 &gt; &amp;slots)</argsstring>
        <name>symTwoSlots</name>
        <qualifiedname>Ikarus::symTwoSlots</qualifiedname>
        <param>
          <type>const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; dim, dim, dim, dim &gt; &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::array&lt; size_t, 2 &gt; &amp;</type>
          <declname>slots</declname>
        </param>
        <briefdescription>
<para>Creates a symmetric fourth-order tensor in the two specified slots of the input tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Input tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slots</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of the slots to be swapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fourth-order Tensor which is symmetric in the given slots. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="146" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="146" bodyend="152"/>
        <referencedby refid="d9/dda/a01289_1aec2dfac0aca87f7998a0f0c2b3b63133" compoundref="d7/d9a/a00152" startline="108" endline="122">Ikarus::NeoHookeT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1ga4304655095296ce9283e012587817a51" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr Eigen::Index</type>
        <definition>constexpr Eigen::Index Ikarus::toVoigt</definition>
        <argsstring>(Eigen::Index i, Eigen::Index j) noexcept</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>Eigen::Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Eigen::Index</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Converts 2D indices to Voigt notation index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Column index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Index Voigt notation index.</para>
</simplesect>
This function converts 2D indices (i, j) to a Voigt notation index. The Voigt notation is used to represent the six unique components of a symmetric 3x3 matrix in a one-dimensional array.</para>
<para>If the input indices are not within the valid range (0, 1, 2), an assertion failure is triggered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="167" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="167" bodyend="178"/>
        <referencedby refid="db/d4b/a01309_1afc5090fbbd1054eaa33932e88f2fdb42" compoundref="da/d23/a02452" startline="245" endline="260">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateAt</referencedby>
        <referencedby refid="d6/d16/a01269_1a02b95fb491292c3230a70d4ea77b85c8" compoundref="db/d5f/a02440" startline="231" endline="265">Ikarus::KirchhoffLoveShell&lt; Basis_, FERequirements_, useEigenRef &gt;::computeMaterialAndStrains</referencedby>
        <referencedby refid="d6/d16/a01269_1aa135b5062856432512c7d29f1ff675b0" compoundref="db/d5f/a02440" startline="501" endline="512">Ikarus::KirchhoffLoveShell&lt; Basis_, FERequirements_, useEigenRef &gt;::materialTangent</referencedby>
        <referencedby refid="d5/d6f/a01281_1a297b4cab80330a8c473dbc06552c8808" compoundref="d7/dce/a00143" startline="116" endline="127">Ikarus::Material&lt; MaterialImpl &gt;::storedEnergy</referencedby>
        <referencedby refid="d5/d6f/a01281_1af10f8631c73d1c4cb78f8b6d44bf6f1a" compoundref="d7/dce/a00143" startline="140" endline="148">Ikarus::Material&lt; MaterialImpl &gt;::stresses</referencedby>
        <referencedby refid="d5/d6f/a01281_1a00e7bb30244df751617e1e613d382ea0" compoundref="d7/dce/a00143" startline="161" endline="169">Ikarus::Material&lt; MaterialImpl &gt;::tangentModuli</referencedby>
        <referencedby refid="d3/d4a/a00297_1ga8777400d7d11c49d46f3c6be2698722e" compoundref="d4/d51/a00017" startline="195" endline="203">toVoigt</referencedby>
        <referencedby refid="db/d7b/a00296_1ga378c5569b7b899586e7c8006fb776351" compoundref="df/d03/a00062" startline="549" endline="562">toVoigtAndMaybeReduce</referencedby>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1ga8777400d7d11c49d46f3c6be2698722e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 6 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 6 &gt; Ikarus::toVoigt</definition>
        <argsstring>(const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; 3, 3, 3, 3 &gt; &gt; &amp;ft)</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; 3, 3, 3, 3 &gt; &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <briefdescription>
<para>Converts a fourth-order tensor of fixed size 3x3x3x3 to a Voigt notation matrix of size 6x6. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type of the tensor elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth-order tensor . </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Voigt notation matrix.</para>
</simplesect>
This function converts a fourth-order tensor to a Voigt notation matrix, which is a symmetric 6x6 matrix containing the unique components of the input tensor. The mapping from the tensor indices to the Voigt notation indices is performed by the toVoigt function.</para>
<para><simplesect kind="remark"><para>The current implementation does not take advantage of this symmetry. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="195" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="195" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1ga7a49f3cfec729ac9991cc595bac37a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::toVoigt</definition>
        <argsstring>(const Eigen::Matrix&lt; ST, size, size, Options, size, size &gt; &amp;E, bool isStrain=true)</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ST, size, size, Options, size, size &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isStrain</declname>
          <defval>true</defval>
        </param>
    <requiresclause>(size &gt; 0 and size &lt;= 3)    </requiresclause>
        <briefdescription>
<para>Converts a square 2x2 or 3x3 matrix to a Voigt notation vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ST</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type of the matrix elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows and columns of the square matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Options</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d0f/a00308" kindref="compound">Eigen</ref> matrix options. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix of size (size x size). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isStrain</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether the conversion is for strain (true) or not (false). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector with components in Voigt notation vector.</para>
</simplesect>
This function converts a square matrix to a Voigt notation vector, which contains the unique components of the input matrix. The mapping from the matrix indices to the Voigt notation indices is performed by the toVoigt function.</para>
<para>The optional isStrain parameter allows the user to specify whether the conversion is intended for strain calculations. If isStrain is true, the off-diagonal components are multiplied by 2, providing the correct Voigt notation for symmetric strain tensors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="224" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="224" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1ga106e11a950fe2545890e811d2e9545fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fromVoigt</definition>
        <argsstring>(const Eigen::Vector&lt; ST, size &gt; &amp;EVoigt, bool isStrain=true)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ST, size &gt; &amp;</type>
          <declname>EVoigt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isStrain</declname>
          <defval>true</defval>
        </param>
    <requiresclause>(size == 1 or size == 3 or size == 6)    </requiresclause>
        <briefdescription>
<para>Converts a vector given in Voigt notation to a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ST</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the vector elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the Voigt notation vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>EVoigt</parametername>
</parameternamelist>
<parameterdescription>
<para>Voigt notation vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isStrain</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether the vector represents a strain (default is true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix corresponding to the vector in Voigt notation.</para>
</simplesect>
This function converts a vector given in Voigt notation to the corresponding matrix. The conversion depends on the size The parameter <computeroutput>isStrain</computeroutput> is used to determine the conversion factor for off-diagonal components, which need to be divided by 2 in the matrix representation if the quantity is a strain tensor.</para>
<para>The function requires that the size of the Voigt notation vector is valid (1, 3, or 6). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="256" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="256" bodyend="271"/>
        <referencedby refid="d3/d4a/a00297_1ga0afe53095f875017b5673a42e13e6f5a" compoundref="d4/d51/a00017" startline="313" endline="324">fromVoigt</referencedby>
        <referencedby refid="d3/d07/a01301_1a09ee586572c98a89b4b63e4952687ad4" compoundref="d2/df5/a00137" startline="142" endline="150">Ikarus::VanishingStress&lt; stressIndexPair, MaterialImpl &gt;::stressesImpl</referencedby>
        <referencedby refid="d3/d07/a01301_1a3fb115007e1e4323b8f3d46f2b681ff0" compoundref="d2/df5/a00137" startline="160" endline="167">Ikarus::VanishingStress&lt; stressIndexPair, MaterialImpl &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1ga518e0394f7c90dbe798b6cb8d757b822" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::array&lt; size_t, 2 &gt;</type>
        <definition>constexpr std::array&lt; size_t, 2 &gt; Ikarus::fromVoigt</definition>
        <argsstring>(size_t i)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Converts a Voigt notation index to matrix indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Voigt notation index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix indices corresponding to the Voigt notation index.</para>
</simplesect>
This function converts a Voigt notation index to the corresponding matrix indices. The mapping is based on the assumption that the Voigt notation indices 0, 1, and 2 represent the diagonal components <computeroutput>00</computeroutput>, <computeroutput>11</computeroutput>, and <computeroutput>22</computeroutput>, respectively. The remaining Voigt notation indices (3, 4, and 5) correspond to the off-diagonal components (<computeroutput>12</computeroutput> and <computeroutput>21</computeroutput>, <computeroutput>02</computeroutput> and <computeroutput>20</computeroutput>, <computeroutput>01</computeroutput> and <computeroutput>10</computeroutput>).</para>
<para>The function asserts that the input index is within the valid range for Voigt notation (0 to 5). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="286" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="286" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="d3/d4a/a00297_1ga0afe53095f875017b5673a42e13e6f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fromVoigt</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 6 &gt; &amp;CVoigt)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 6 &gt; &amp;</type>
          <declname>CVoigt</declname>
        </param>
        <briefdescription>
<para>Converts a matrix in Voigt notation to a Fourth-order tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the matrix elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CVoigt</parametername>
</parameternamelist>
<parameterdescription>
<para>Voigt notation matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fourth-order tensor corresponding to the matrix in Voigt notation.</para>
</simplesect>
This function converts a Voigt notation matrix to the corresponding 4th-order tensor. The function uses the <computeroutput>fromVoigt</computeroutput> function to map matrix indices to tensor indices. The resulting tensor is symmetric due to symmetry considerations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="313" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="313" bodyend="324"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/assembler/simpleassemblers.hh" line="21" column="1"/>
  </compounddef>
</doxygen>
