<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="da/dd4/a00291" kind="group">
    <compoundname>tensor</compoundname>
    <title>Tensor Utilities</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/dd4/a00291_1ga5cfd9d098384fb067d897b3c0499b447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>auto</type>
            <declname>rank</declname>
            <defname>rank</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; typename Derived::Scalar, rank &gt;</type>
        <definition>Eigen::Tensor&lt; typename Derived::Scalar, rank &gt; Ikarus::tensorView</definition>
        <argsstring>(const Eigen::EigenBase&lt; Derived &gt; &amp;matrix, const std::array&lt; T, rank &gt; &amp;dims)</argsstring>
        <name>tensorView</name>
        <qualifiedname>Ikarus::tensorView</qualifiedname>
        <param>
          <type>const <ref refid="d1/df4/a01422" kindref="compound">Eigen::EigenBase</ref>&lt; Derived &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const std::array&lt; T, rank &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
<para>View an <ref refid="da/d50/a00301" kindref="compound">Eigen</ref> matrix as an <ref refid="da/d50/a00301" kindref="compound">Eigen</ref> Tensor with specified dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input <ref refid="da/d50/a00301" kindref="compound">Eigen</ref> matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Rank of the resulting Tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="da/d50/a00301" kindref="compound">Eigen</ref> matrix to be cast. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dims</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of the resulting Tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Tensor&lt;typename Derived::Scalar, rank&gt; The casted <ref refid="da/d50/a00301" kindref="compound">Eigen</ref> Tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="32" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="32" bodyend="37"/>
        <referencedby refid="d9/d5e/a00295_1a10529d3a284b885b2f89440faa693877" compoundref="da/d18/a02421" startline="39" endline="50">Ikarus::energyHelper</referencedby>
        <referencedby refid="d4/d10/a01278_1aec2dfac0aca87f7998a0f0c2b3b63133" compoundref="d7/d9a/a00152" startline="108" endline="122">Ikarus::NeoHookeT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1gab2cea9ac847cc3635812467c9d96ceb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto Ikarus::dyadic</definition>
        <argsstring>(const auto &amp;A_ij, const auto &amp;B_kl)</argsstring>
        <name>dyadic</name>
        <qualifiedname>Ikarus::dyadic</qualifiedname>
        <param>
          <type>const auto &amp;</type>
          <declname>A_ij</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>B_kl</declname>
        </param>
        <briefdescription>
<para>Computes the dyadic product of two <ref refid="da/d50/a00301" kindref="compound">Eigen</ref> tensors. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="33">\[ \CI_{ijkl} = A_{ij}B_{kl}. \]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A_ij</parametername>
</parameternamelist>
<parameterdescription>
<para>First tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_kl</parametername>
</parameternamelist>
<parameterdescription>
<para>Second tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting tensor after the dyadic product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="47" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="47" bodyend="50"/>
        <referencedby refid="d9/d5e/a00295_1a10529d3a284b885b2f89440faa693877" compoundref="da/d18/a02421" startline="39" endline="50">Ikarus::energyHelper</referencedby>
        <referencedby refid="d4/d10/a01278_1aec2dfac0aca87f7998a0f0c2b3b63133" compoundref="d7/d9a/a00152" startline="108" endline="122">Ikarus::NeoHookeT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1ga1c9618ef351cd986d4f64fde7f52e860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symmetricIdentityFourthOrder</definition>
        <argsstring>()</argsstring>
        <name>symmetricIdentityFourthOrder</name>
        <qualifiedname>Ikarus::symmetricIdentityFourthOrder</qualifiedname>
        <briefdescription>
<para>Generates a symmetric identity fourth-order tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Symmetric identity fourth-order tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="60" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="60" bodyend="68"/>
        <referencedby refid="d8/d17/a01282_1a7c2e0bf3afe37f104ae311bd9f2391f7" compoundref="de/d76/a00134" startline="141" endline="156">Ikarus::StVenantKirchhoffT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1ga2368a572348c410fd7e7deb6c6e3964a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symmetricFourthOrder</definition>
        <argsstring>(const auto &amp;A, const auto &amp;B)</argsstring>
        <name>symmetricFourthOrder</name>
        <qualifiedname>Ikarus::symmetricFourthOrder</qualifiedname>
        <param>
          <type>const auto &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const auto &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Generates a symmetric fourth-order tensor based on two second-order input tensors. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="34">\[ \CI_{ijkl} = \frac{1}{2} \left(A_{ik}B_{jl}+A_{il}B_{jk} \right) .
\]</formula> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the tensors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>First tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Second tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Symmetric fourth-order tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="82" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="82" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1gadb08b6f9cc40847b70286dc314a23000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
          <param>
            <type>int</type>
            <declname>dim</declname>
            <defname>dim</defname>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::identityFourthOrder</definition>
        <argsstring>()</argsstring>
        <name>identityFourthOrder</name>
        <qualifiedname>Ikarus::identityFourthOrder</qualifiedname>
        <briefdescription>
<para>Generates an identity fourth-order tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="35">\[ \CI_{ijkl} = \de_{ij}\de_{kl}. \]</formula> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Identity fourth-order tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="101" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="101" bodyend="108"/>
        <referencedby refid="d8/d17/a01282_1a7c2e0bf3afe37f104ae311bd9f2391f7" compoundref="de/d76/a00134" startline="141" endline="156">Ikarus::StVenantKirchhoffT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1ga8fa2b440586483c1ee0f9b90b9081da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AType</type>
          </param>
          <param>
            <type>typename BType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fourthOrderIKJL</definition>
        <argsstring>(const Eigen::MatrixBase&lt; AType &gt; &amp;A, const Eigen::MatrixBase&lt; BType &gt; &amp;B)</argsstring>
        <name>fourthOrderIKJL</name>
        <qualifiedname>Ikarus::fourthOrderIKJL</qualifiedname>
        <param>
          <type>const Eigen::MatrixBase&lt; AType &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; BType &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Computes the IKJL product of two matrices. </para>
        </briefdescription>
        <detaileddescription>
<para>The components of the result read <formula id="36">\[ \CI_{ijkl} = A_{ik}B_{jl}, \]</formula> which simply swaps the inner slots <computeroutput>j</computeroutput>and <computeroutput>k</computeroutput> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>AType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the first matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the second matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>First matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Second matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting tensor of the IKJL product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="122" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="122" bodyend="135"/>
        <referencedby refid="d4/d10/a01278_1aec2dfac0aca87f7998a0f0c2b3b63133" compoundref="d7/d9a/a00152" startline="108" endline="122">Ikarus::NeoHookeT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1gaea03dbfcd8f85ef7af004c7e09244aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>long int</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::symTwoSlots</definition>
        <argsstring>(const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; dim, dim, dim, dim &gt; &gt; &amp;t, const std::array&lt; size_t, 2 &gt; &amp;slots)</argsstring>
        <name>symTwoSlots</name>
        <qualifiedname>Ikarus::symTwoSlots</qualifiedname>
        <param>
          <type>const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; dim, dim, dim, dim &gt; &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::array&lt; size_t, 2 &gt; &amp;</type>
          <declname>slots</declname>
        </param>
        <briefdescription>
<para>Creates a symmetric fourth-order tensor in the two specified slots of the input tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements in the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Input tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slots</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of the slots to be swapped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fourth-order Tensor which is symmetric in the given slots. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="146" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="146" bodyend="152"/>
        <referencedby refid="d4/d10/a01278_1aec2dfac0aca87f7998a0f0c2b3b63133" compoundref="d7/d9a/a00152" startline="108" endline="122">Ikarus::NeoHookeT&lt; ScalarType_ &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1ga4304655095296ce9283e012587817a51" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr Eigen::Index</type>
        <definition>constexpr Eigen::Index Ikarus::toVoigt</definition>
        <argsstring>(Eigen::Index i, Eigen::Index j) noexcept</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>Eigen::Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Eigen::Index</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Converts 2D indices to Voigt notation index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Column index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Index Voigt notation index.</para>
</simplesect>
This function converts 2D indices (i, j) to a Voigt notation index. The Voigt notation is used to represent the six unique components of a symmetric 3x3 matrix in a one-dimensional array.</para>
<para>If the input indices are not within the valid range (0, 1, 2), an assertion failure is triggered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="167" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="167" bodyend="178"/>
        <referencedby refid="d7/d88/a01294_1afc5090fbbd1054eaa33932e88f2fdb42" compoundref="d7/d18/a02433" startline="258" endline="273">Ikarus::NonLinearElastic&lt; Basis_, Material_, FERequirements_, useEigenRef &gt;::calculateAt</referencedby>
        <referencedby refid="d3/d53/a01262_1a83c5d12a0591fce31bc29ea903156863" compoundref="da/d18/a02421" startline="219" endline="293">Ikarus::KirchhoffLoveShell&lt; Basis_, FERequirements_, useEigenRef &gt;::calculateScalarImpl</referencedby>
        <referencedby refid="d9/d5e/a00295_1a10529d3a284b885b2f89440faa693877" compoundref="da/d18/a02421" startline="39" endline="50">Ikarus::energyHelper</referencedby>
        <referencedby refid="da/d00/a01270_1a297b4cab80330a8c473dbc06552c8808" compoundref="d7/dce/a00143" startline="116" endline="127">Ikarus::Material&lt; MaterialImpl &gt;::storedEnergy</referencedby>
        <referencedby refid="da/d00/a01270_1af10f8631c73d1c4cb78f8b6d44bf6f1a" compoundref="d7/dce/a00143" startline="140" endline="148">Ikarus::Material&lt; MaterialImpl &gt;::stresses</referencedby>
        <referencedby refid="da/d00/a01270_1a00e7bb30244df751617e1e613d382ea0" compoundref="d7/dce/a00143" startline="161" endline="169">Ikarus::Material&lt; MaterialImpl &gt;::tangentModuli</referencedby>
        <referencedby refid="da/dd4/a00291_1ga8777400d7d11c49d46f3c6be2698722e" compoundref="d4/d51/a00017" startline="195" endline="203">Ikarus::toVoigt</referencedby>
        <referencedby refid="de/d25/a00290_1ga378c5569b7b899586e7c8006fb776351" compoundref="df/d03/a00062" startline="535" endline="548">Ikarus::toVoigtAndMaybeReduce</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1ga8777400d7d11c49d46f3c6be2698722e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
            <defval>double</defval>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; ScalarType, 6, 6 &gt;</type>
        <definition>Eigen::Matrix&lt; ScalarType, 6, 6 &gt; Ikarus::toVoigt</definition>
        <argsstring>(const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; 3, 3, 3, 3 &gt; &gt; &amp;ft)</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>const Eigen::TensorFixedSize&lt; ScalarType, Eigen::Sizes&lt; 3, 3, 3, 3 &gt; &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <briefdescription>
<para>Converts a fourth-order tensor of fixed size 3x3x3x3 to a Voigt notation matrix of size 6x6. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type of the tensor elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ft</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth-order tensor . </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Voigt notation matrix.</para>
</simplesect>
This function converts a fourth-order tensor to a Voigt notation matrix, which is a symmetric 6x6 matrix containing the unique components of the input tensor. The mapping from the tensor indices to the Voigt notation indices is performed by the toVoigt function.</para>
<para><simplesect kind="remark"><para>The current implementation does not take advantage of this symmetry. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="195" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="195" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1ga7a49f3cfec729ac9991cc595bac37a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::toVoigt</definition>
        <argsstring>(const Eigen::Matrix&lt; ST, size, size, Options, size, size &gt; &amp;E, bool isStrain=true)</argsstring>
        <name>toVoigt</name>
        <qualifiedname>Ikarus::toVoigt</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ST, size, size, Options, size, size &gt; &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isStrain</declname>
          <defval>true</defval>
        </param>
    <requiresclause>(size &gt; 0 and size &lt;= 3)    </requiresclause>
        <briefdescription>
<para>Converts a square 2x2 or 3x3 matrix to a Voigt notation vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ST</parametername>
</parameternamelist>
<parameterdescription>
<para>Data type of the matrix elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows and columns of the square matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Options</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="da/d50/a00301" kindref="compound">Eigen</ref> matrix options. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix of size (size x size). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isStrain</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether the conversion is for strain (true) or not (false). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector with components in Voigt notation vector.</para>
</simplesect>
This function converts a square matrix to a Voigt notation vector, which contains the unique components of the input matrix. The mapping from the matrix indices to the Voigt notation indices is performed by the toVoigt function.</para>
<para>The optional isStrain parameter allows the user to specify whether the conversion is intended for strain calculations. If isStrain is true, the off-diagonal components are multiplied by 2, providing the correct Voigt notation for symmetric strain tensors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="224" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="224" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1ga106e11a950fe2545890e811d2e9545fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ST</type>
          </param>
          <param>
            <type>int</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fromVoigt</definition>
        <argsstring>(const Eigen::Vector&lt; ST, size &gt; &amp;EVoigt, bool isStrain=true)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>const Eigen::Vector&lt; ST, size &gt; &amp;</type>
          <declname>EVoigt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isStrain</declname>
          <defval>true</defval>
        </param>
    <requiresclause>(size == 1 or size == 3 or size == 6)    </requiresclause>
        <briefdescription>
<para>Converts a vector given in Voigt notation to a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ST</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the vector elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the Voigt notation vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>EVoigt</parametername>
</parameternamelist>
<parameterdescription>
<para>Voigt notation vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isStrain</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether the vector represents a strain (default is true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix corresponding to the vector in Voigt notation.</para>
</simplesect>
This function converts a vector given in Voigt notation to the corresponding matrix. The conversion depends on the size The parameter <computeroutput>isStrain</computeroutput> is used to determine the conversion factor for off-diagonal components, which need to be divided by 2 in the matrix representation if the quantity is a strain tensor.</para>
<para>The function requires that the size of the Voigt notation vector is valid (1, 3, or 6). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="256" column="9" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="256" bodyend="271"/>
        <referencedby refid="da/dd4/a00291_1ga0afe53095f875017b5673a42e13e6f5a" compoundref="d4/d51/a00017" startline="313" endline="324">Ikarus::fromVoigt</referencedby>
        <referencedby refid="dc/ded/a01290_1a09ee586572c98a89b4b63e4952687ad4" compoundref="d2/df5/a00137" startline="142" endline="150">Ikarus::VanishingStress&lt; stressIndexPair, MaterialImpl &gt;::stressesImpl</referencedby>
        <referencedby refid="dc/ded/a01290_1a3fb115007e1e4323b8f3d46f2b681ff0" compoundref="d2/df5/a00137" startline="160" endline="167">Ikarus::VanishingStress&lt; stressIndexPair, MaterialImpl &gt;::tangentModuliImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1ga518e0394f7c90dbe798b6cb8d757b822" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr std::array&lt; size_t, 2 &gt;</type>
        <definition>constexpr std::array&lt; size_t, 2 &gt; Ikarus::fromVoigt</definition>
        <argsstring>(size_t i)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Converts a Voigt notation index to matrix indices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Voigt notation index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix indices corresponding to the Voigt notation index.</para>
</simplesect>
This function converts a Voigt notation index to the corresponding matrix indices. The mapping is based on the assumption that the Voigt notation indices 0, 1, and 2 represent the diagonal components <computeroutput>00</computeroutput>, <computeroutput>11</computeroutput>, and <computeroutput>22</computeroutput>, respectively. The remaining Voigt notation indices (3, 4, and 5) correspond to the off-diagonal components (<computeroutput>12</computeroutput> and <computeroutput>21</computeroutput>, <computeroutput>02</computeroutput> and <computeroutput>20</computeroutput>, <computeroutput>01</computeroutput> and <computeroutput>10</computeroutput>).</para>
<para>The function asserts that the input index is within the valid range for Voigt notation (0 to 5). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="286" column="24" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="286" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="da/dd4/a00291_1ga0afe53095f875017b5673a42e13e6f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::fromVoigt</definition>
        <argsstring>(const Eigen::Matrix&lt; ScalarType, 6, 6 &gt; &amp;CVoigt)</argsstring>
        <name>fromVoigt</name>
        <qualifiedname>Ikarus::fromVoigt</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; ScalarType, 6, 6 &gt; &amp;</type>
          <declname>CVoigt</declname>
        </param>
        <briefdescription>
<para>Converts a matrix in Voigt notation to a Fourth-order tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ScalarType</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar type of the matrix elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CVoigt</parametername>
</parameternamelist>
<parameterdescription>
<para>Voigt notation matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fourth-order tensor corresponding to the matrix in Voigt notation.</para>
</simplesect>
This function converts a Voigt notation matrix to the corresponding 4th-order tensor. The function uses the <computeroutput>fromVoigt</computeroutput> function to map matrix indices to tensor indices. The resulting tensor is symmetric due to symmetry considerations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" line="313" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/tensorutils.hh" bodystart="313" bodyend="324"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Collection of several utilities for dealing with <ref refid="da/d50/a00301" kindref="compound">Eigen</ref> tensors. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
