<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="da/d15/a00188" kind="file" language="C++">
    <compoundname>pathfollowingfunctions.hh</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">optional</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">dune/common/exceptions.hh</includes>
    <includes local="no">Eigen/Core</includes>
    <includes refid="db/dd9/a00179" local="no">ikarus/solver/linearsolver/linearsolver.hh</includes>
    <includes refid="d4/d3a/a00101" local="no">ikarus/utils/concepts.hh</includes>
    <includes refid="df/d98/a00107" local="no">ikarus/utils/defaultfunctions.hh</includes>
    <includes refid="da/d1e/a00149" local="no">ikarus/utils/traits.hh</includes>
    <includedby refid="de/df3/a00185" local="no">adaptivestepsizing.hh</includedby>
    <includedby refid="d5/de9/a00176" local="no">newtonraphsonwithscalarsubsidiaryfunction.hh</includedby>
    <includedby refid="d9/dd0/a00191" local="no">pathfollowingtechnique.hh</includedby>
    <incdepgraph>
      <node id="1">
        <label>pathfollowingfunctions.hh</label>
        <link refid="da/d15/a00188"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ikarus/solver/linearsolver/linearsolver.hh</label>
        <link refid="db/dd9/a00179"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ikarus/utils/concepts.hh</label>
        <link refid="d4/d3a/a00101"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ikarus/utils/defaultfunctions.hh</label>
        <link refid="df/d98/a00107"/>
      </node>
      <node id="18">
        <label>ikarus/utils/traits.hh</label>
        <link refid="da/d1e/a00149"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Eigen/Core</label>
      </node>
      <node id="17">
        <label>Eigen/Sparse</label>
      </node>
      <node id="13">
        <label>Eigen/SparseCore</label>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="15">
        <label>concepts</label>
      </node>
      <node id="7">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="21">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="16">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="19">
        <label>functional</label>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
      <node id="3">
        <label>optional</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="20">
        <label>tuple</label>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="12">
        <label>variant</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>adaptivestepsizing.hh</label>
        <link refid="de/df3/a00185"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pathfollowingfunctions.hh</label>
        <link refid="da/d15/a00188"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pathfollowingtechnique.hh</label>
        <link refid="d9/dd0/a00191"/>
      </node>
      <node id="4">
        <label>newtonraphsonwithscalarsubsidiaryfunction.hh</label>
        <link refid="d5/de9/a00176"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="de/d1c/a01093" prot="public">Ikarus::SubsidiaryArgs</innerclass>
    <innerclass refid="d1/dfa/a01097" prot="public">Ikarus::StandardArcLength</innerclass>
    <innerclass refid="de/d99/a01101" prot="public">Ikarus::LoadControlWithSubsidiaryFunction</innerclass>
    <innerclass refid="de/d1d/a01105" prot="public">Ikarus::DisplacementControl</innerclass>
    <innernamespace refid="dd/df3/a00219">Ikarus</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/common/exceptions.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="db/dd9/a00179" kindref="compound">ikarus/solver/linearsolver/linearsolver.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="d4/d3a/a00101" kindref="compound">ikarus/utils/concepts.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="df/d98/a00107" kindref="compound">ikarus/utils/defaultfunctions.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="da/d1e/a00149" kindref="compound">ikarus/utils/traits.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="dd/df3/a00219" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="de/d1c/a01093" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref><sp/>{</highlight></codeline>
<codeline lineno="24" refid="de/d1c/a01093_1a9c0bca7ed999dcf751648d41b5d9aa78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/d1c/a01093_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="25" refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorX&lt;double&gt;<sp/><ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>;</highlight></codeline>
<codeline lineno="26" refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>{};</highlight></codeline>
<codeline lineno="27" refid="de/d1c/a01093_1a628b23aa9e90c0e0ba1461ad2241645a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/d1c/a01093_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref>{};</highlight></codeline>
<codeline lineno="28" refid="de/d1c/a01093_1aa1bc7c1fc866571e3b6b22e14ed9afcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorX&lt;double&gt;<sp/><ref refid="de/d1c/a01093_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>;</highlight></codeline>
<codeline lineno="29" refid="de/d1c/a01093_1a198c4e48b353f1ebe5c5922bf51e34e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/d1c/a01093_1a198c4e48b353f1ebe5c5922bf51e34e5" kindref="member">dfdDlambda</ref>{};</highlight></codeline>
<codeline lineno="30" refid="de/d1c/a01093_1a217c729e1ae8b05a98c852f19b0d6ae5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="de/d1c/a01093_1a217c729e1ae8b05a98c852f19b0d6ae5" kindref="member">currentStep</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="d1/dfa/a01097" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/dfa/a01097" kindref="compound">StandardArcLength</ref><sp/>{</highlight></codeline>
<codeline lineno="35" refid="d1/dfa/a01097_1afe1b684e05372d505d34a7e7458cca50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dfa/a01097_1afe1b684e05372d505d34a7e7458cca50" kindref="member">evaluateSubsidiaryFunction</ref>(<ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psi)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>root<sp/>=<sp/>sqrt(args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>.squaredNorm()<sp/>+<sp/>psi.value()<sp/>*<sp/>psi.value()<sp/>*<sp/>args.<ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref><sp/>*<sp/>args.<ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>root<sp/>-<sp/>args.<ref refid="de/d1c/a01093_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref><sp/>/<sp/>root;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1a198c4e48b353f1ebe5c5922bf51e34e5" kindref="member">dfdDlambda</ref><sp/>=<sp/>(psi.value()<sp/>*<sp/>psi.value()<sp/>*<sp/>args.<ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>)<sp/>/<sp/>root;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUNE_THROW(Dune::InvalidStateException,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;You<sp/>have<sp/>to<sp/>call<sp/>initialPrediction<sp/>first.<sp/>Otherwise<sp/>psi<sp/>is<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator&gt;</highlight></codeline>
<codeline lineno="47" refid="d1/dfa/a01097_1af6d5d9da1195b4b2c9b5ee59c2937720" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dfa/a01097_1af6d5d9da1195b4b2c9b5ee59c2937720" kindref="member">initialPrediction</ref>(<ref refid="d3/d0b/a01253" kindref="compound">NonLinearOperator</ref>&amp;<sp/>nonLinearOperator,<sp/><ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906" kindref="member">Ikarus::SolverTypeTag</ref><sp/>solverTag;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">JacobianType<sp/>=<sp/>std::remove_cvref_t&lt;typename<sp/>NonLinearOperator::DerivativeType&gt;;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">((<ref refid="d9/dae/a01453" kindref="compound">Ikarus::Std::isSpecializationTypeAndNonTypes&lt;Eigen::Matrix, JacobianType&gt;::value</ref>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>(<ref refid="d9/d8b/a01469" kindref="compound">Ikarus::Std::isSpecializationTypeNonTypeAndType&lt;Eigen::SparseMatrix, JacobianType&gt;::value</ref>),</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Linear<sp/>solver<sp/>not<sp/>implemented<sp/>for<sp/>the<sp/>chosen<sp/>derivative<sp/>type<sp/>of<sp/>the<sp/>non-linear<sp/>operator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="d9/dae/a01453" kindref="compound">Ikarus::Std::isSpecializationTypeAndNonTypes&lt;Eigen::Matrix, JacobianType&gt;::value</ref>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverTag<sp/>=<sp/><ref refid="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906ad495de2cc8831501954c24afe8688190" kindref="member">Ikarus::SolverTypeTag::d_LDLT</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverTag<sp/>=<sp/><ref refid="dd/df3/a00219_1a731a9ee6621f91193c15f31b9a399906af493d8a2d2d89f06181e77bc79cabf1c" kindref="member">Ikarus::SolverTypeTag::sd_SimplicialLDLT</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator.lastParameter()<sp/>=<sp/>1.0;<sp/><sp/></highlight><highlight class="comment">//<sp/>lambda<sp/>=1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator.template<sp/>update&lt;0&gt;();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>R<sp/>=<sp/>nonLinearOperator.value();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>K<sp/>=<sp/>nonLinearOperator.derivative();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLinearSolver</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="da/daf/a01568" kindref="compound">Ikarus::Concepts::LinearSolverCheck</ref>&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="dd/df3/a00219_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">Ikarus::LinearSolver</ref>(solverTag)),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator::DerivativeType,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator::ValueType&gt;;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(isLinearSolver,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>predictor<sp/>step<sp/>in<sp/>the<sp/>standard<sp/>arc-length<sp/>method<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>linear<sp/>solver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>linearSolver<sp/>=<sp/><ref refid="dd/df3/a00219_1ae747d502e8f67af4c5412d8a6febeb4c" kindref="member">Ikarus::LinearSolver</ref>(solverTag);<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>linear<sp/>predictor<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.analyzePattern(K);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.factorize(K);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linearSolver.solve(args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>,<sp/>-R);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>DD2<sp/>=<sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>.squaredNorm();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psi<sp/><sp/><sp/><sp/>=<sp/>sqrt(DD2);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>sqrt(psi.value()<sp/>*<sp/>psi.value()<sp/>+<sp/>DD2);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref><sp/>*<sp/>args.<ref refid="de/d1c/a01093_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref><sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref><sp/>=<sp/>args.<ref refid="de/d1c/a01093_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref><sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator.firstParameter()<sp/>=<sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator.lastParameter()<sp/><sp/>=<sp/>args.<ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator&gt;</highlight></codeline>
<codeline lineno="90" refid="d1/dfa/a01097_1a0c2107beffebae7d097120da2b04a850" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dfa/a01097_1a0c2107beffebae7d097120da2b04a850" kindref="member">intermediatePrediction</ref>(<ref refid="d3/d0b/a01253" kindref="compound">NonLinearOperator</ref>&amp;<sp/>nonLinearOperator,<sp/><ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator.firstParameter()<sp/>+=<sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator.lastParameter()<sp/>+=<sp/>args.<ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="d1/dfa/a01097_1a6761eae338aa420f4c1373013065d493" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="d1/dfa/a01097_1a6761eae338aa420f4c1373013065d493" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Arc<sp/>length&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;double&gt;<sp/>psi;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="de/d99/a01101" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="de/d99/a01101" kindref="compound">LoadControlWithSubsidiaryFunction</ref><sp/>{</highlight></codeline>
<codeline lineno="103" refid="de/d99/a01101_1af87fa5ec13fd52529d19ea843c99dbbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d99/a01101_1af87fa5ec13fd52529d19ea843c99dbbd" kindref="member">evaluateSubsidiaryFunction</ref>(<ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref><sp/>=<sp/>args.<ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref><sp/>-<sp/>args.<ref refid="de/d1c/a01093_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>.setZero();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1a198c4e48b353f1ebe5c5922bf51e34e5" kindref="member">dfdDlambda</ref><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator&gt;</highlight></codeline>
<codeline lineno="110" refid="de/d99/a01101_1a3ec349a905f844f6d935b30f2f747d75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d99/a01101_1a3ec349a905f844f6d935b30f2f747d75" kindref="member">initialPrediction</ref>(<ref refid="d3/d0b/a01253" kindref="compound">NonLinearOperator</ref>&amp;<sp/>nonLinearOperator,<sp/><ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args.<ref refid="de/d1c/a01093_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator.lastParameter()<sp/>=<sp/>args.<ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator&gt;</highlight></codeline>
<codeline lineno="116" refid="de/d99/a01101_1a14f2f84067290853cdaad6e009dd7130" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d99/a01101_1a14f2f84067290853cdaad6e009dd7130" kindref="member">intermediatePrediction</ref>(<ref refid="d3/d0b/a01253" kindref="compound">NonLinearOperator</ref>&amp;<sp/>nonLinearOperator,<sp/><ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator.lastParameter()<sp/>+=<sp/>args.<ref refid="de/d1c/a01093_1a0cd5cc302f164ea614b9edfadd7c82c9" kindref="member">Dlambda</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119" refid="de/d99/a01101_1a4cd2f54b19f8d1f84954cca36896e14a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="de/d99/a01101_1a4cd2f54b19f8d1f84954cca36896e14a" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Load<sp/>control&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="de/d1d/a01105" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="de/d1d/a01105" kindref="compound">DisplacementControl</ref><sp/>{</highlight></codeline>
<codeline lineno="124" refid="de/d1d/a01105_1aa15060bf256c9786fe44096fad899733" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="de/d1d/a01105_1aa15060bf256c9786fe44096fad899733" kindref="member">DisplacementControl</ref>(std::vector&lt;int&gt;<sp/>p_controlledIndices)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>controlledIndices{std::move(p_controlledIndices)}<sp/>{}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="de/d1d/a01105_1aea9a8e2704c82def9288b97683faf342" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d1d/a01105_1aea9a8e2704c82def9288b97683faf342" kindref="member">evaluateSubsidiaryFunction</ref>(<ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>controlledDOFsNorm<sp/>=<sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>(controlledIndices).norm();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1a628b23aa9e90c0e0ba1461ad2241645a" kindref="member">f</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>controlledDOFsNorm<sp/>-<sp/>args.<ref refid="de/d1c/a01093_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1a198c4e48b353f1ebe5c5922bf51e34e5" kindref="member">dfdDlambda</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>.setZero();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1aa1bc7c1fc866571e3b6b22e14ed9afcf" kindref="member">dfdDD</ref>(controlledIndices)<sp/>=<sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>(controlledIndices)<sp/>/<sp/>controlledDOFsNorm;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator&gt;</highlight></codeline>
<codeline lineno="136" refid="de/d1d/a01105_1a745ce332f4df7c4483d2d86e06013f24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d1d/a01105_1a745ce332f4df7c4483d2d86e06013f24" kindref="member">initialPrediction</ref>(<ref refid="d3/d0b/a01253" kindref="compound">NonLinearOperator</ref>&amp;<sp/>nonLinearOperator,<sp/><ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>(controlledIndices).array()<sp/>=<sp/>args.<ref refid="de/d1c/a01093_1a9c0bca7ed999dcf751648d41b5d9aa78" kindref="member">stepSize</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator.firstParameter()<sp/>=<sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NonLinearOperator&gt;</highlight></codeline>
<codeline lineno="142" refid="de/d1d/a01105_1a11625614df35e7e3c627e7d87a1670fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d1d/a01105_1a11625614df35e7e3c627e7d87a1670fe" kindref="member">intermediatePrediction</ref>(<ref refid="d3/d0b/a01253" kindref="compound">NonLinearOperator</ref>&amp;<sp/>nonLinearOperator,<sp/><ref refid="de/d1c/a01093" kindref="compound">SubsidiaryArgs</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonLinearOperator.firstParameter()<sp/>+=<sp/>args.<ref refid="de/d1c/a01093_1afc97f3ae46ddd6a208b90d253aa8a7e6" kindref="member">DD</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="de/d1d/a01105_1ab2966f19b7b2434a0ffdf3bf11ba4637" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="de/d1d/a01105_1ab2966f19b7b2434a0ffdf3bf11ba4637" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Displacement<sp/>control&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>controlledIndices;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/controlroutines/pathfollowingfunctions.hh"/>
  </compounddef>
</doxygen>
