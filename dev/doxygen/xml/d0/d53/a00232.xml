<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="d0/d53/a00232" kind="namespace" language="C++">
    <compoundname>Ikarus::Std</compoundname>
    <innerclass refid="d3/d1b/a01549" prot="public">Ikarus::Std::DummyFalse</innerclass>
    <innerclass refid="db/dce/a01529" prot="public">Ikarus::Std::FunctionTraits</innerclass>
    <innerclass refid="d1/d62/a01533" prot="public">Ikarus::Std::FunctionTraits&lt; R(*)(Args...)&gt;</innerclass>
    <innerclass refid="df/d3f/a01537" prot="public">Ikarus::Std::FunctionTraits&lt; R(C::*)(Args...) const &gt;</innerclass>
    <innerclass refid="d5/dc8/a01541" prot="public">Ikarus::Std::FunctionTraits&lt; R(C::*)(Args...)&gt;</innerclass>
    <innerclass refid="dd/dba/a01545" prot="public">Ikarus::Std::FunctionTraits&lt; T, Dune::void_t&lt; decltype(&amp;T::operator())&gt; &gt;</innerclass>
    <innerclass refid="db/df2/a01425" prot="public">Ikarus::Std::hasType</innerclass>
    <innerclass refid="d5/df9/a01441" prot="public">Ikarus::Std::hasType&lt; T, std::tuple&lt; T, Ts... &gt; &gt;</innerclass>
    <innerclass refid="d9/db0/a01437" prot="public">Ikarus::Std::hasType&lt; T, std::tuple&lt; U, Ts... &gt; &gt;</innerclass>
    <innerclass refid="d1/d3b/a01429" prot="public">Ikarus::Std::hasType&lt; T, std::tuple&lt;&gt; &gt;</innerclass>
    <innerclass refid="d2/d9b/a01433" prot="public">Ikarus::Std::hasType&lt; T, T &gt;</innerclass>
    <innerclass refid="db/d2c/a01501" prot="public">Ikarus::Std::Index</innerclass>
    <innerclass refid="db/d06/a01509" prot="public">Ikarus::Std::Index&lt; T, std::tuple&lt; T, Types... &gt; &gt;</innerclass>
    <innerclass refid="d0/d62/a01513" prot="public">Ikarus::Std::Index&lt; T, std::tuple&lt; U, Types... &gt; &gt;</innerclass>
    <innerclass refid="dc/dce/a01505" prot="public">Ikarus::Std::Index&lt; T, std::tuple&lt;&gt; &gt;</innerclass>
    <innerclass refid="de/daf/a01417" prot="public">Ikarus::Std::is_tuple</innerclass>
    <innerclass refid="d4/d20/a01421" prot="public">Ikarus::Std::is_tuple&lt; std::tuple&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="d9/d6f/a01445" prot="public">Ikarus::Std::isSpecialization</innerclass>
    <innerclass refid="d2/d95/a01449" prot="public">Ikarus::Std::isSpecialization&lt; U, U&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="dc/d60/a01461" prot="public">Ikarus::Std::isSpecializationNonTypeAndTypes</innerclass>
    <innerclass refid="d4/dfd/a01465" prot="public">Ikarus::Std::isSpecializationNonTypeAndTypes&lt; Type, Type&lt; T, N... &gt; &gt;</innerclass>
    <innerclass refid="d8/d67/a01477" prot="public">Ikarus::Std::isSpecializationNonTypes</innerclass>
    <innerclass refid="d1/de4/a01481" prot="public">Ikarus::Std::isSpecializationNonTypes&lt; Type, Type&lt; N... &gt; &gt;</innerclass>
    <innerclass refid="d9/dae/a01453" prot="public">Ikarus::Std::isSpecializationTypeAndNonTypes</innerclass>
    <innerclass refid="da/df7/a01457" prot="public">Ikarus::Std::isSpecializationTypeAndNonTypes&lt; Type, Type&lt; T, N... &gt; &gt;</innerclass>
    <innerclass refid="d9/d8b/a01469" prot="public">Ikarus::Std::isSpecializationTypeNonTypeAndType</innerclass>
    <innerclass refid="de/d13/a01473" prot="public">Ikarus::Std::isSpecializationTypeNonTypeAndType&lt; Type, Type&lt; T, M, N &gt; &gt;</innerclass>
    <innerclass refid="d2/d41/a01493" prot="public">Ikarus::Std::isTemplateSame</innerclass>
    <innerclass refid="db/d1e/a01497" prot="public">Ikarus::Std::isTemplateSame&lt; TT, TT &gt;</innerclass>
    <innerclass refid="dc/d96/a01517" prot="public">Ikarus::Std::Rebind</innerclass>
    <innerclass refid="dc/d42/a01521" prot="public">Ikarus::Std::Rebind&lt; Container&lt; OldType, Args... &gt;, NewType &gt;</innerclass>
    <innerclass refid="db/de9/a01525" prot="public">Ikarus::Std::Rebind&lt; Container&lt; OldType, N &gt;, NewType &gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d0/d53/a00232_1a8a73882aa4613b1db650ae7126112c7d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Fun</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::invoke_result_t&lt; Fun, Args... &gt;</type>
        <definition>using Ikarus::Std::ReturnType = typedef std::invoke_result_t&lt;Fun, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>ReturnType</name>
        <qualifiedname>Ikarus::Std::ReturnType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="47" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d0/d53/a00232_1adf0c15a4be1e5a5efd784a6597c45c9c" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>template&lt; auto... &gt; class</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool Ikarus::Std::countTypeSpecialization_v</definition>
        <argsstring></argsstring>
        <name>countTypeSpecialization_v</name>
        <qualifiedname>Ikarus::Std::countTypeSpecialization_v</qualifiedname>
        <initializer>= <ref refid="d0/d53/a00232_1aa996c89f661b3e898276ad9a2c827eed" kindref="member">countTypeSpecialization</ref>&lt;Type, Tuple&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="264" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/d53/a00232_1a7bc5c0303ee657cc2dce61165e01dc9c" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>template&lt; auto... &gt; typename</type>
            <declname>TT</declname>
            <defname>TT</defname>
          </param>
          <param>
            <type>template&lt; auto... &gt; typename</type>
            <declname>UU</declname>
            <defname>UU</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool Ikarus::Std::isTemplateSame_v</definition>
        <argsstring></argsstring>
        <name>isTemplateSame_v</name>
        <qualifiedname>Ikarus::Std::isTemplateSame_v</qualifiedname>
        <initializer>= <ref refid="d2/d41/a01493" kindref="compound">isTemplateSame</ref>&lt;TT, UU&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="286" column="25" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="286" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d53/a00232_1a9068e91a401551c189fd055d792b2773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto &amp; Ikarus::Std::returnReferenceOrNulloptIfObjectIsNullPtr</definition>
        <argsstring>(T v)</argsstring>
        <name>returnReferenceOrNulloptIfObjectIsNullPtr</name>
        <qualifiedname>Ikarus::Std::returnReferenceOrNulloptIfObjectIsNullPtr</qualifiedname>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
    <requiresclause>is_pointer&lt;T&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="19" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1aa2fd7f176ba35a00dfa564e2de345dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::Std::makeNestedTupleFlat</definition>
        <argsstring>(std::tuple&lt; Types... &gt; tup)</argsstring>
        <name>makeNestedTupleFlat</name>
        <qualifiedname>Ikarus::Std::makeNestedTupleFlat</qualifiedname>
        <param>
          <type>std::tuple&lt; Types... &gt;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="289" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="289" bodyend="291" declfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" declline="28" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1af69eaa862f96b1e05cae132002e3bda2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>::value consteval int</type>
        <definition>::value consteval int Ikarus::Std::countType</definition>
        <argsstring>()</argsstring>
        <name>countType</name>
        <qualifiedname>Ikarus::Std::countType</qualifiedname>
    <requiresclause>is_tuple&lt;Tuple&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="37" column="26" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="37" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1ad4fc88994776e27c7e59e9d3e6642714" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>typename Predicate</type>
          </param>
        </templateparamlist>
        <type>constexpr size_t</type>
        <definition>constexpr size_t Ikarus::Std::find_if</definition>
        <argsstring>(Tuple &amp;&amp;tuple, Predicate pred)</argsstring>
        <name>find_if</name>
        <qualifiedname>Ikarus::Std::find_if</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>Predicate</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="192" column="20" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="192" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1af0dae23b4085d0bf0dadbd4164f963da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>typename Predicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Ikarus::Std::none_of</definition>
        <argsstring>(Tuple &amp;&amp;tuple, Predicate pred)</argsstring>
        <name>none_of</name>
        <qualifiedname>Ikarus::Std::none_of</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>Predicate</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="208" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1adc9017fac80bfcb010f2d128df0035a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>typename Predicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Ikarus::Std::any_of</definition>
        <argsstring>(Tuple &amp;&amp;tuple, Predicate pred)</argsstring>
        <name>any_of</name>
        <qualifiedname>Ikarus::Std::any_of</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>Predicate</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="213" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1ad53bff1c71d9dd7a6ce1e553bb5a1647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>typename Predicate</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::Std::filter</definition>
        <argsstring>(Tuple &amp;&amp;tuple, Predicate pred)</argsstring>
        <name>filter</name>
        <qualifiedname>Ikarus::Std::filter</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>Predicate</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="218" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="218" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1a36bc95d9b39957050ffb6ae932d9e0d2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Ikarus::Std::unique</definition>
        <argsstring>(std::tuple&lt; Types... &gt; &amp;&amp;)</argsstring>
        <name>unique</name>
        <qualifiedname>Ikarus::Std::unique</qualifiedname>
        <param>
          <type>std::tuple&lt; Types... &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="227" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1a6bd7fd054314c161f4599efc760dbb4b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>typename Predicate</type>
          </param>
        </templateparamlist>
        <type>constexpr size_t</type>
        <definition>constexpr size_t Ikarus::Std::count_if</definition>
        <argsstring>(Tuple &amp;&amp;tuple, Predicate pred)</argsstring>
        <name>count_if</name>
        <qualifiedname>Ikarus::Std::count_if</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>Predicate</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="232" column="20" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="232" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1ae1bdd01661c6fb29b55953eacff6fce6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; auto... &gt; class</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int Ikarus::Std::findTypeSpecialization</definition>
        <argsstring>()</argsstring>
        <name>findTypeSpecialization</name>
        <qualifiedname>Ikarus::Std::findTypeSpecialization</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="241" column="17" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1a6c8b15da98e8b2456964a65f2d61b149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; auto... &gt; class</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::Std::getSpecialization</definition>
        <argsstring>(Tuple &amp;&amp;tuple)</argsstring>
        <name>getSpecialization</name>
        <qualifiedname>Ikarus::Std::getSpecialization</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="246" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1a78380595cc1115819a4b6fd6e1bead21" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; auto... &gt; class</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool Ikarus::Std::hasTypeSpecialization</definition>
        <argsstring>()</argsstring>
        <name>hasTypeSpecialization</name>
        <qualifiedname>Ikarus::Std::hasTypeSpecialization</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="252" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1aa996c89f661b3e898276ad9a2c827eed" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; auto... &gt; class</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool Ikarus::Std::countTypeSpecialization</definition>
        <argsstring>()</argsstring>
        <name>countTypeSpecialization</name>
        <qualifiedname>Ikarus::Std::countTypeSpecialization</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="259" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1ae9ba6a20096c1432f050411f3f9bd3b8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>class Tuple</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Ikarus::Std::makeTupleSubset</definition>
        <argsstring>(Tuple &amp;&amp;t)</argsstring>
        <name>makeTupleSubset</name>
        <qualifiedname>Ikarus::Std::makeTupleSubset</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="267" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="267" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1a573bbe47801041c2f5587dca0c29de04" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto Ikarus::Std::makeTupleFromTupleIndices</definition>
        <argsstring>(Tuple &amp;&amp;t)</argsstring>
        <name>makeTupleFromTupleIndices</name>
        <qualifiedname>Ikarus::Std::makeTupleFromTupleIndices</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="275" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1af855cc9636f69b7d565b07f375753e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Ikarus::Std::makeNestedTupleFlatAndStoreReferences</definition>
        <argsstring>(Tuple &amp;&amp;tup)</argsstring>
        <name>makeNestedTupleFlatAndStoreReferences</name>
        <qualifiedname>Ikarus::Std::makeNestedTupleFlatAndStoreReferences</qualifiedname>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="294" column="8" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="294" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1a8d8f476dd24abc5844c02c8e74bc6b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>consteval bool</type>
        <definition>consteval bool Ikarus::Std::areTypesEqual</definition>
        <argsstring>(T1 &amp;&amp;, T2 &amp;&amp;)</argsstring>
        <name>areTypesEqual</name>
        <qualifiedname>Ikarus::Std::areTypesEqual</qualifiedname>
        <param>
          <type>T1 &amp;&amp;</type>
        </param>
        <param>
          <type>T2 &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="357" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="357" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="d0/d53/a00232_1aaf00e1d73d9e2ebcc9d30831b50caf2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>consteval bool</type>
        <definition>consteval bool Ikarus::Std::areTypesEqual</definition>
        <argsstring>()</argsstring>
        <name>areTypesEqual</name>
        <qualifiedname>Ikarus::Std::areTypesEqual</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="361" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" bodystart="361" bodyend="363"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/utils/traits.hh" line="12" column="1"/>
  </compounddef>
</doxygen>
