<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="d2/df5/a00137" kind="file" language="C++">
    <compoundname>traction.hh</compoundname>
    <includes local="no">dune/fufem/boundarypatch.hh</includes>
    <includes refid="dc/dfe/a00125" local="no">ikarus/finiteelements/ferequirements.hh</includes>
    <includes refid="d5/d16/a00029" local="no">ikarus/utils/defaultfunctions.hh</includes>
    <includedby refid="dc/de6/a00167" local="no">loads.hh</includedby>
    <incdepgraph>
      <node id="3">
        <label>ikarus/finiteelements/ferequirements.hh</label>
        <link refid="dc/dfe/a00125"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>traction.hh</label>
        <link refid="d2/df5/a00137"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>concepts.hh</label>
        <link refid="db/db2/a00020"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ikarus/utils/defaultfunctions.hh</label>
        <link refid="d5/d16/a00029"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>linearalgebrahelper.hh</label>
        <link refid="df/d03/a00062"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ikarus/utils/makeenum.hh</label>
        <link refid="d4/dee/a00008"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ikarus/utils/traits.hh</label>
        <link refid="d9/d2e/a00056"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Eigen/Core</label>
      </node>
      <node id="19">
        <label>Eigen/Sparse</label>
      </node>
      <node id="28">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="14">
        <label>concepts</label>
      </node>
      <node id="8">
        <label>dune/common/exceptions.hh</label>
      </node>
      <node id="23">
        <label>dune/common/hybridutilities.hh</label>
      </node>
      <node id="26">
        <label>dune/common/tuplevector.hh</label>
      </node>
      <node id="2">
        <label>dune/fufem/boundarypatch.hh</label>
      </node>
      <node id="17">
        <label>dune/functions/functionspacebases/basistags.hh</label>
      </node>
      <node id="18">
        <label>dune/functions/functionspacebases/lagrangebasis.hh</label>
      </node>
      <node id="27">
        <label>dune/istl/bvector.hh</label>
      </node>
      <node id="4">
        <label>iosfwd</label>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="21">
        <label>optional</label>
      </node>
      <node id="24">
        <label>random</label>
      </node>
      <node id="25">
        <label>ranges</label>
      </node>
      <node id="6">
        <label>set</label>
      </node>
      <node id="22">
        <label>tuple</label>
      </node>
      <node id="15">
        <label>type_traits</label>
      </node>
      <node id="16">
        <label>utility</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>kirchhoffloveshell.hh</label>
        <link refid="d9/dd8/a02481"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>linearelastic.hh</label>
        <link refid="d1/d50/a02487"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>loads.hh</label>
        <link refid="dc/de6/a00167"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>traction.hh</label>
        <link refid="d2/df5/a00137"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>nonlinearelastic.hh</label>
        <link refid="dc/de1/a02493"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>kirchhoffloveshell.hh</label>
        <link refid="de/d4e/a02484"/>
      </node>
      <node id="6">
        <label>linearelastic.hh</label>
        <link refid="d5/ddd/a02490"/>
      </node>
      <node id="9">
        <label>nonlinearelastic.hh</label>
        <link refid="d1/df5/a02496"/>
      </node>
      <node id="7">
        <label>registerelement.hh</label>
        <link refid="dc/d57/a00194"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="dc/ded/a01290" prot="public">Ikarus::Traction</innerclass>
    <innernamespace refid="d1/d67/a00310">Ikarus</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-FileCopyrightText:<sp/>2021-2024<sp/>The<sp/>Ikarus<sp/>Developers<sp/>mueller@ibb.uni-stuttgart.de</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0-or-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dune/fufem/boundarypatch.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="dc/dfe/a00125" kindref="compound">ikarus/finiteelements/ferequirements.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="d5/d16/a00029" kindref="compound">ikarus/utils/defaultfunctions.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d1/d67/a00310" kindref="compound">Ikarus</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DisplacementBasedElement,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="22" refid="dc/ded/a01290" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dc/ded/a01290" kindref="compound">Traction</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24" refid="dc/ded/a01290_1ab2e0b2df428dd9dd03b3589e7502b4c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/ded/a01290_1ab2e0b2df428dd9dd03b3589e7502b4c1" kindref="member">FERequirementType</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::FERequirementType;</highlight></codeline>
<codeline lineno="25" refid="dc/ded/a01290_1aa929e87072d4632e34dae86f12f35b6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/ded/a01290_1aa929e87072d4632e34dae86f12f35b6f" kindref="member">LocalView</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::LocalView;</highlight></codeline>
<codeline lineno="26" refid="dc/ded/a01290_1a055e8c867a09ddb37177fcecfbedd827" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="dc/ded/a01290_1a055e8c867a09ddb37177fcecfbedd827" kindref="member">GridView</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::GridView;</highlight></codeline>
<codeline lineno="27" refid="dc/ded/a01290_1a38f601316eb612388ff73f6142e9aa74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1a38f601316eb612388ff73f6142e9aa74" kindref="member">myDim</ref><sp/><sp/><sp/><sp/>=<sp/>Traits::mydim;</highlight></codeline>
<codeline lineno="28" refid="dc/ded/a01290_1a1eee242b581174d0fd8e7587130234be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1a1eee242b581174d0fd8e7587130234be" kindref="member">worldDim</ref><sp/>=<sp/>Traits::worlddim;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NeumannBoundaryLoad&gt;</highlight></codeline>
<codeline lineno="38" refid="dc/ded/a01290_1ab0350cc85099b73b31b6f337bba45052" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1ab0350cc85099b73b31b6f337bba45052" kindref="member">Traction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoundaryPatch&lt;GridView&gt;*<sp/>p_neumannBoundary,<sp/>NeumannBoundaryLoad<sp/>p_neumannBoundaryLoad)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>neumannBoundary{p_neumannBoundary}<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(!std::is_same_v&lt;NeumannBoundaryLoad,<sp/>utils::LoadDefault&gt;)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neumannBoundaryLoad<sp/>=<sp/>p_neumannBoundaryLoad;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(((not<sp/>p_neumannBoundary<sp/>and<sp/>not<sp/>neumannBoundaryLoad)<sp/>or<sp/>(p_neumannBoundary<sp/>and<sp/>neumannBoundaryLoad))</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;If<sp/>you<sp/>pass<sp/>a<sp/>Neumann<sp/>boundary<sp/>you<sp/>should<sp/>also<sp/>pass<sp/>the<sp/>function<sp/>for<sp/>the<sp/>Neumann<sp/>load!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="dc/ded/a01290_1ac9ed9f5497683a52effe2c572056c6e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1ac9ed9f5497683a52effe2c572056c6e0" kindref="member">calculateScalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1ab2e0b2df428dd9dd03b3589e7502b4c1" kindref="member">FERequirementType</ref>&amp;<sp/>req)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calculateScalarImpl&lt;double&gt;(req);<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="dc/ded/a01290_1a7c9d37bb3d426f00c1451d5a5222b748" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1a7c9d37bb3d426f00c1451d5a5222b748" kindref="member">calculateVector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1ab2e0b2df428dd9dd03b3589e7502b4c1" kindref="member">FERequirementType</ref>&amp;<sp/>req,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>VectorType&lt;&gt;<sp/>force)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calculateVectorImpl&lt;double&gt;(req,<sp/>force);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74" refid="dc/ded/a01290_1ad5b9f64124013ab2e98b6494e9b511b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1ad5b9f64124013ab2e98b6494e9b511b3" kindref="member">calculateMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1ab2e0b2df428dd9dd03b3589e7502b4c1" kindref="member">FERequirementType</ref>&amp;<sp/>req,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>MatrixType&lt;&gt;<sp/>K)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calculateMatrixImpl&lt;double&gt;(req,<sp/>K);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="80" refid="dc/ded/a01290_1a3b3de553171d016228f21cbac1e7f47d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1a3b3de553171d016228f21cbac1e7f47d" kindref="member">calculateScalarImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1ab2e0b2df428dd9dd03b3589e7502b4c1" kindref="member">FERequirementType</ref>&amp;<sp/>par,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&gt;&amp;<sp/>dx</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::nullopt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>ScalarType<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>neumannBoundary<sp/>and<sp/>not<sp/>neumannBoundaryLoad)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ScalarType<sp/>energy<sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uFunction<sp/>=<sp/>dbElement().displacementFunction(par,<sp/>dx);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lambda<sp/><sp/><sp/>=<sp/>par.getParameter(<ref refid="d3/d4a/a00297_1gga0c1577fd05efee8475b0f7fef795bbbeaf72bac0ac84c0315e7bcbb8aa84b2ff8" kindref="member">Ikarus::FEParameter::loadfactor</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>dbElement().localView().element();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>intersection<sp/>:<sp/>intersections(neumannBoundary-&gt;gridView(),<sp/>element))<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>neumannBoundary-&gt;contains(intersection))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>quadLine<sp/>=<sp/>Dune::QuadratureRules&lt;double,<sp/>myDim<sp/>-<sp/>1&gt;::rule(intersection.type(),<sp/>dbElement().order());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curQuad<sp/>:<sp/>quadLine)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Local<sp/>position<sp/>of<sp/>the<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/dab/a01362" kindref="compound">Dune::FieldVector&lt;double, myDim&gt;</ref>&amp;<sp/>quadPos<sp/>=<sp/>intersection.geometryInInside().global(curQuad.position());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integrationElement<sp/>=<sp/>intersection.geometry().integrationElement(curQuad.position());</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>of<sp/>the<sp/>local<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uVal<sp/>=<sp/>uFunction.evaluate(quadPos);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>of<sp/>the<sp/>Neumann<sp/>data<sp/>at<sp/>the<sp/>current<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>neumannValue<sp/>=<sp/>neumannBoundaryLoad(intersection.geometry().global(curQuad.position()),<sp/>lambda);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy<sp/>-=<sp/>neumannValue.dot(uVal)<sp/>*<sp/>curQuad.weight()<sp/>*<sp/>integrationElement;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>energy;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="112" refid="dc/ded/a01290_1a0cac2c7cc2a06ae38bc83f97664e4d8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1a0cac2c7cc2a06ae38bc83f97664e4d8c" kindref="member">calculateVectorImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1ab2e0b2df428dd9dd03b3589e7502b4c1" kindref="member">FERequirementType</ref>&amp;<sp/>par,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>VectorType&lt;ScalarType&gt;<sp/>force,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&gt;<sp/>dx<sp/>=<sp/>std::nullopt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>neumannBoundary<sp/>and<sp/>not<sp/>neumannBoundaryLoad)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Dune::DerivativeDirections;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d4/d6f/a00315" kindref="compound">Dune</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uFunction<sp/>=<sp/>dbElement().displacementFunction(par,<sp/>dx);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lambda<sp/><sp/><sp/>=<sp/>par.getParameter(<ref refid="d3/d4a/a00297_1gga0c1577fd05efee8475b0f7fef795bbbeaf72bac0ac84c0315e7bcbb8aa84b2ff8" kindref="member">Ikarus::FEParameter::loadfactor</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>dbElement().localView().element();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>intersection<sp/>:<sp/>intersections(neumannBoundary-&gt;gridView(),<sp/>element))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>neumannBoundary-&gt;contains(intersection))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>quadLine<sp/>=<sp/>Dune::QuadratureRules&lt;double,<sp/>myDim<sp/>-<sp/>1&gt;::rule(intersection.type(),<sp/>dbElement().order());</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curQuad<sp/>:<sp/>quadLine)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/dab/a01362" kindref="compound">Dune::FieldVector&lt;double, myDim&gt;</ref>&amp;<sp/>quadPos<sp/>=<sp/>intersection.geometryInInside().global(curQuad.position());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>intElement<sp/>=<sp/>intersection.geometry().integrationElement(curQuad.position());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dbElement().numberOfNodes();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>udCi<sp/>=<sp/>uFunction.evaluateDerivative(quadPos,<sp/>wrt(coeff(i)));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>neumannValue<sp/>=<sp/>neumannBoundaryLoad(intersection.geometry().global(curQuad.position()),<sp/>lambda);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force.template<sp/>segment&lt;worldDim&gt;(<ref refid="dc/ded/a01290_1a1eee242b581174d0fd8e7587130234be" kindref="member">worldDim</ref><sp/>*<sp/>i)<sp/>-=<sp/>udCi<sp/>*<sp/>neumannValue<sp/>*<sp/>curQuad.weight()<sp/>*<sp/>intElement;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType&gt;</highlight></codeline>
<codeline lineno="144" refid="dc/ded/a01290_1aae1b4a04dd13b2ec2145ef141bf3190c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1aae1b4a04dd13b2ec2145ef141bf3190c" kindref="member">calculateMatrixImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/ded/a01290_1ab2e0b2df428dd9dd03b3589e7502b4c1" kindref="member">FERequirementType</ref>&amp;<sp/>par,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>MatrixType&lt;&gt;<sp/>K,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorX&lt;ScalarType&gt;&gt;&amp;<sp/>dx<sp/>=<sp/>std::nullopt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;Eigen::Vector&lt;double,<sp/>worldDim&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/dab/a01362" kindref="compound">Dune::FieldVector&lt;double, worldDim&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neumannBoundaryLoad;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoundaryPatch&lt;GridView&gt;*<sp/>neumannBoundary;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DisplacementBasedElement&amp;<sp/>dbElement()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DisplacementBasedElement<sp/>const&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Ikarus</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/__w/ikarus/ikarus/repo/ikarus/finiteelements/mechanics/loads/traction.hh"/>
  </compounddef>
</doxygen>
