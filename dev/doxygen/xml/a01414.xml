<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a01414" kind="struct" language="C++" prot="private" abstract="yes">
    <compoundname>Ikarus::LinearSolverTemplate::SolverBase</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a01414_1a9c6b97e27f64983ae56bdbc19918e7c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::~SolverBase</definition>
        <argsstring>()=default</argsstring>
        <name>~SolverBase</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::~SolverBase</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="114" column="13"/>
      </memberdef>
      <memberdef kind="function" id="a01414_1ab7fda7f9bc34c5c928e998ff09449ac2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::analyzePattern</definition>
        <argsstring>(const DenseMatrixType &amp;) const</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::analyzePattern</qualifiedname>
        <param>
          <type>const <ref refid="a01410_1a878cccde0e595d7b0f7d6a2188aeeb31" kindref="member">DenseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="115" column="18" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="a01414_1a30d0a26638a6af07677547d2a979487b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::analyzePattern</definition>
        <argsstring>(const SparseMatrixType &amp;)=0</argsstring>
        <name>analyzePattern</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::analyzePattern</qualifiedname>
        <param>
          <type>const <ref refid="a01410_1a374226b59baa30615d574bdd7ec230c8" kindref="member">SparseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="116" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01414_1af3e416eae09d8e4cfaebae12a12e12fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::factorize</definition>
        <argsstring>(const DenseMatrixType &amp;)=0</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::factorize</qualifiedname>
        <param>
          <type>const <ref refid="a01410_1a878cccde0e595d7b0f7d6a2188aeeb31" kindref="member">DenseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="117" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01414_1a97aad98bed7a42ee036cfac716dc45ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::factorize</definition>
        <argsstring>(const SparseMatrixType &amp;)=0</argsstring>
        <name>factorize</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::factorize</qualifiedname>
        <param>
          <type>const <ref refid="a01410_1a374226b59baa30615d574bdd7ec230c8" kindref="member">SparseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="118" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01414_1ae309210028f682de6bf5449594893227" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::compute</definition>
        <argsstring>(const SparseMatrixType &amp;)=0</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::compute</qualifiedname>
        <param>
          <type>const <ref refid="a01410_1a374226b59baa30615d574bdd7ec230c8" kindref="member">SparseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="119" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01414_1a57e9a24484c4866f542a10e7c6c8745c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::compute</definition>
        <argsstring>(const DenseMatrixType &amp;)=0</argsstring>
        <name>compute</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::compute</qualifiedname>
        <param>
          <type>const <ref refid="a01410_1a878cccde0e595d7b0f7d6a2188aeeb31" kindref="member">DenseMatrixType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="120" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01414_1a07dc4225d0efa0cae6c980850c69e2b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::solve</definition>
        <argsstring>(Eigen::VectorX&lt; ScalarType &gt; &amp;x, const Eigen::VectorX&lt; ScalarType &gt; &amp;) const =0</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::solve</qualifiedname>
        <param>
          <type>Eigen::VectorX&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorX&lt; ScalarType &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="121" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01414_1a97ce8a2b08840fb1a55253566cea1217" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::solve</definition>
        <argsstring>(Eigen::MatrixX2&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX2&lt; ScalarType &gt; &amp;) const =0</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX2&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX2&lt; ScalarType &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="122" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01414_1a2c4d374d775da144f1c1d481c35257da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::solve</definition>
        <argsstring>(Eigen::MatrixX3&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX3&lt; ScalarType &gt; &amp;) const =0</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX3&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX3&lt; ScalarType &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="123" column="18"/>
      </memberdef>
      <memberdef kind="function" id="a01414_1a1c649eddfca260a622a0b989f8d3591f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Ikarus::LinearSolverTemplate&lt; ScalarType &gt;::SolverBase::solve</definition>
        <argsstring>(Eigen::MatrixX&lt; ScalarType &gt; &amp;x, const Eigen::MatrixX&lt; ScalarType &gt; &amp;) const =0</argsstring>
        <name>solve</name>
        <qualifiedname>Ikarus::LinearSolverTemplate::SolverBase::solve</qualifiedname>
        <param>
          <type>Eigen::MatrixX&lt; ScalarType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::MatrixX&lt; ScalarType &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="124" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" line="112" column="3" bodyfile="/__w/ikarus/ikarus/repo/ikarus/solver/linearsolver/linearsolver.hh" bodystart="113" bodyend="125"/>
    <listofallmembers>
      <member refid="a01414_1ab7fda7f9bc34c5c928e998ff09449ac2" prot="public" virt="virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>analyzePattern</name></member>
      <member refid="a01414_1a30d0a26638a6af07677547d2a979487b" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>analyzePattern</name></member>
      <member refid="a01414_1ae309210028f682de6bf5449594893227" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>compute</name></member>
      <member refid="a01414_1a57e9a24484c4866f542a10e7c6c8745c" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>compute</name></member>
      <member refid="a01414_1af3e416eae09d8e4cfaebae12a12e12fd" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>factorize</name></member>
      <member refid="a01414_1a97aad98bed7a42ee036cfac716dc45ba" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>factorize</name></member>
      <member refid="a01414_1a07dc4225d0efa0cae6c980850c69e2b0" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>solve</name></member>
      <member refid="a01414_1a97ce8a2b08840fb1a55253566cea1217" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>solve</name></member>
      <member refid="a01414_1a2c4d374d775da144f1c1d481c35257da" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>solve</name></member>
      <member refid="a01414_1a1c649eddfca260a622a0b989f8d3591f" prot="public" virt="pure-virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>solve</name></member>
      <member refid="a01414_1a9c6b97e27f64983ae56bdbc19918e7c0" prot="public" virt="virtual"><scope>Ikarus::LinearSolverTemplate::SolverBase</scope><name>~SolverBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
